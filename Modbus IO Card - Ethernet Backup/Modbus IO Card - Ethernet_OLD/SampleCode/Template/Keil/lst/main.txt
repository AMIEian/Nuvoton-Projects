; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xAN\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GetBoardID||, CODE, READONLY, ALIGN=2

                  GetBoardID PROC
;;;442    	
;;;443    void GetBoardID()
000000  4912              LDR      r1,|L1.76|
;;;444    {
;;;445    	if(P00 == 0)
000002  680a              LDR      r2,[r1,#0]
;;;446    		boardID = boardID | 0x01;
000004  4812              LDR      r0,|L1.80|
000006  2a00              CMP      r2,#0                 ;445
000008  d103              BNE      |L1.18|
00000a  7802              LDRB     r2,[r0,#0]  ; boardID
00000c  2301              MOVS     r3,#1
00000e  431a              ORRS     r2,r2,r3
000010  7002              STRB     r2,[r0,#0]
                  |L1.18|
;;;447    	if(P01 == 0)
000012  684a              LDR      r2,[r1,#4]
000014  2a00              CMP      r2,#0
000016  d103              BNE      |L1.32|
;;;448    		boardID = boardID | 0x02;
000018  7802              LDRB     r2,[r0,#0]  ; boardID
00001a  2302              MOVS     r3,#2
00001c  431a              ORRS     r2,r2,r3
00001e  7002              STRB     r2,[r0,#0]
                  |L1.32|
;;;449    	if(P04 == 0)
000020  690a              LDR      r2,[r1,#0x10]
000022  2a00              CMP      r2,#0
000024  d103              BNE      |L1.46|
;;;450    		boardID = boardID | 0x04;
000026  7802              LDRB     r2,[r0,#0]  ; boardID
000028  2304              MOVS     r3,#4
00002a  431a              ORRS     r2,r2,r3
00002c  7002              STRB     r2,[r0,#0]
                  |L1.46|
;;;451    	if(P05 == 0)
00002e  694a              LDR      r2,[r1,#0x14]
000030  2a00              CMP      r2,#0
000032  d103              BNE      |L1.60|
;;;452    		boardID = boardID | 0x08;
000034  7802              LDRB     r2,[r0,#0]  ; boardID
000036  2308              MOVS     r3,#8
000038  431a              ORRS     r2,r2,r3
00003a  7002              STRB     r2,[r0,#0]
                  |L1.60|
;;;453    	if(P06 == 0)
00003c  6989              LDR      r1,[r1,#0x18]
00003e  2900              CMP      r1,#0
000040  d103              BNE      |L1.74|
;;;454    		boardID = boardID | 0x10;
000042  7801              LDRB     r1,[r0,#0]  ; boardID
000044  2210              MOVS     r2,#0x10
000046  4311              ORRS     r1,r1,r2
000048  7001              STRB     r1,[r0,#0]
                  |L1.74|
;;;455    }
00004a  4770              BX       lr
;;;456    
                          ENDP

                  |L1.76|
                          DCD      0x50004200
                  |L1.80|
                          DCD      ||.data||

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;296    	
;;;297    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;298    {
;;;299        /*---------------------------------------------------------------------------------------------------------*/
;;;300        /* Init System Clock                                                                                       */
;;;301        /*---------------------------------------------------------------------------------------------------------*/
;;;302        /* Enable IRC22M clock */
;;;303        CLK->PWRCON |= CLK_PWRCON_IRC22M_EN_Msk;
000002  4c16              LDR      r4,|L2.92|
000004  6820              LDR      r0,[r4,#0]
000006  2104              MOVS     r1,#4
000008  4308              ORRS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;304    
;;;305        /* Waiting for IRC22M clock ready */
;;;306        CLK_WaitClockReady(CLK_CLKSTATUS_IRC22M_STB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;307    
;;;308        /* Switch HCLK clock source to HIRC */
;;;309        CLK->CLKSEL0 = CLK_CLKSEL0_HCLK_S_HIRC;
000012  2007              MOVS     r0,#7
000014  6120              STR      r0,[r4,#0x10]
;;;310    
;;;311        /* Set PLL to Power-down mode and PLL_STB bit in CLKSTATUS register will be cleared by hardware.*/
;;;312        CLK->PLLCON |= CLK_PLLCON_PD_Msk;
000016  6a20              LDR      r0,[r4,#0x20]
000018  01e1              LSLS     r1,r4,#7
00001a  4308              ORRS     r0,r0,r1
00001c  6220              STR      r0,[r4,#0x20]
;;;313    
;;;314        /* Enable PLL and Set PLL frequency */
;;;315        CLK->PLLCON = PLLCON_SETTING;
00001e  4810              LDR      r0,|L2.96|
000020  6220              STR      r0,[r4,#0x20]
;;;316    
;;;317        /* Waiting for clock ready */
;;;318        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk | CLK_CLKSTATUS_XTL12M_STB_Msk | CLK_CLKSTATUS_IRC10K_STB_Msk);
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       CLK_WaitClockReady
;;;319    
;;;320        /* Switch HCLK clock source to PLL, STCLK to HCLK/2 */
;;;321        CLK->CLKSEL0 = CLK_CLKSEL0_STCLK_S_HCLK_DIV2 | CLK_CLKSEL0_HCLK_S_PLL;
000028  201a              MOVS     r0,#0x1a
00002a  6120              STR      r0,[r4,#0x10]
;;;322    
;;;323        /* Enable peripheral clock */
;;;324        CLK->APBCLK = CLK_APBCLK_UART0_EN_Msk | CLK_APBCLK_TMR0_EN_Msk;
00002c  480d              LDR      r0,|L2.100|
00002e  60a0              STR      r0,[r4,#8]
;;;325    
;;;326        /* Peripheral clock source */
;;;327        CLK->CLKSEL1 = CLK_CLKSEL1_UART_S_PLL | CLK_CLKSEL1_TMR0_S_HIRC;
000030  480d              LDR      r0,|L2.104|
000032  6160              STR      r0,[r4,#0x14]
;;;328    
;;;329        /* Update System Core Clock */
;;;330        /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;331        SystemCoreClockUpdate();
000034  f7fffffe          BL       SystemCoreClockUpdate
;;;332    
;;;333        /*---------------------------------------------------------------------------------------------------------*/
;;;334        /* Init I/O Multi-function                                                                                 */
;;;335        /*---------------------------------------------------------------------------------------------------------*/
;;;336        /* Set P3 multi-function pins for UART0 RXD, TXD */
;;;337        SYS->P0_MFP &= ~(SYS_MFP_P03_Msk | SYS_MFP_P02_Msk);
000038  2005              MOVS     r0,#5
00003a  0700              LSLS     r0,r0,#28
00003c  6b01              LDR      r1,[r0,#0x30]
00003e  4a0b              LDR      r2,|L2.108|
000040  4011              ANDS     r1,r1,r2
000042  6301              STR      r1,[r0,#0x30]
;;;338        SYS->P0_MFP |= (SYS_MFP_P03_RXD0 | SYS_MFP_P02_TXD0);
000044  6b01              LDR      r1,[r0,#0x30]
000046  43d2              MVNS     r2,r2
000048  4311              ORRS     r1,r1,r2
00004a  6301              STR      r1,[r0,#0x30]
;;;339    		
;;;340    		SYS->P4_MFP &= ~(SYS_MFP_P46_Msk | SYS_MFP_P47_Msk);
00004c  4808              LDR      r0,|L2.112|
00004e  6801              LDR      r1,[r0,#0]
000050  4a08              LDR      r2,|L2.116|
000052  4011              ANDS     r1,r1,r2
000054  6001              STR      r1,[r0,#0]
;;;341        SYS->P4_MFP |= (SYS_MFP_P46_GPIO | SYS_MFP_P47_GPIO);
000056  6801              LDR      r1,[r0,#0]
000058  6001              STR      r1,[r0,#0]
;;;342    }
00005a  bd10              POP      {r4,pc}
;;;343    
                          ENDP

                  |L2.92|
                          DCD      0x50000200
                  |L2.96|
                          DCD      0x00085639
                  |L2.100|
                          DCD      0x00010004
                  |L2.104|
                          DCD      0x01000700
                  |L2.108|
                          DCD      0xfffff3f3
                  |L2.112|
                          DCD      0x50000040
                  |L2.116|
                          DCD      0xffff3f3f

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  TMR0_IRQHandler PROC
;;;264     */
;;;265    void TMR0_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  4918              LDR      r1,|L3.100|
000004  6888              LDR      r0,[r1,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;266    	{
00000a  d00f              BEQ      |L3.44|
00000c  2001              MOVS     r0,#1
00000e  6088              STR      r0,[r1,#8]
;;;267    			if(TIMER_GetIntFlag(TIMER0) == 1)
;;;268    				{
;;;269    						/* Clear Timer0 time-out interrupt flag */
;;;270    						TIMER_ClearIntFlag(TIMER0);			
;;;271    					
;;;272    						if(dataReceiving == 0)
000010  4c15              LDR      r4,|L3.104|
000012  69a1              LDR      r1,[r4,#0x18]  ; dataReceiving
000014  2500              MOVS     r5,#0
000016  2900              CMP      r1,#0
000018  d009              BEQ      |L3.46|
;;;273    							{
;;;274    								P07 = 1;
;;;275    								delay(100000);
;;;276    								
;;;277    								for(i = 0; i < 12; i++)
;;;278    									printf("%c", masterCommand[i]);
;;;279    								
;;;280    								arrayIndex = 0;
;;;281    								delay(100000);
;;;282    								P07 = 0;
;;;283    							}	
;;;284    						else
;;;285    							{
;;;286    								seconds = seconds + 1;
00001a  69e0              LDR      r0,[r4,#0x1c]  ; seconds
00001c  1c40              ADDS     r0,r0,#1
00001e  61e0              STR      r0,[r4,#0x1c]  ; seconds
;;;287    								if(seconds >= 5)
000020  69e0              LDR      r0,[r4,#0x1c]  ; seconds
000022  2805              CMP      r0,#5
000024  d302              BCC      |L3.44|
;;;288    									{
;;;289    										seconds = 0;
000026  61e5              STR      r5,[r4,#0x1c]  ; seconds
;;;290    										dataReceiving = 0;
000028  61a5              STR      r5,[r4,#0x18]  ; dataReceiving
;;;291    										arrayIndex = 0;
00002a  6165              STR      r5,[r4,#0x14]  ; arrayIndex
                  |L3.44|
;;;292    									}
;;;293    							}					
;;;294    				}
;;;295    	}
00002c  bdf8              POP      {r3-r7,pc}
                  |L3.46|
00002e  4e0f              LDR      r6,|L3.108|
000030  61f0              STR      r0,[r6,#0x1c]         ;274
000032  480f              LDR      r0,|L3.112|
000034  f7fffffe          BL       delay
000038  6225              STR      r5,[r4,#0x20]         ;277  ; i
00003a  4f0b              LDR      r7,|L3.104|
00003c  3724              ADDS     r7,r7,#0x24           ;278
00003e  e007              B        |L3.80|
                  |L3.64|
000040  6a20              LDR      r0,[r4,#0x20]         ;278  ; i
000042  5c39              LDRB     r1,[r7,r0]            ;278
000044  a00b              ADR      r0,|L3.116|
000046  f7fffffe          BL       __2printf
00004a  6a20              LDR      r0,[r4,#0x20]         ;277  ; i
00004c  1c40              ADDS     r0,r0,#1              ;277
00004e  6220              STR      r0,[r4,#0x20]         ;277  ; i
                  |L3.80|
000050  6a20              LDR      r0,[r4,#0x20]         ;277  ; i
000052  280c              CMP      r0,#0xc               ;277
000054  d3f4              BCC      |L3.64|
000056  6165              STR      r5,[r4,#0x14]         ;280  ; arrayIndex
000058  4805              LDR      r0,|L3.112|
00005a  f7fffffe          BL       delay
00005e  61f5              STR      r5,[r6,#0x1c]         ;282
000060  bdf8              POP      {r3-r7,pc}
;;;296    	
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      0x40010000
                  |L3.104|
                          DCD      ||.data||
                  |L3.108|
                          DCD      0x50004200
                  |L3.112|
                          DCD      0x000186a0
                  |L3.116|
000074  256300            DCB      "%c",0
000077  00                DCB      0

                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART0_IRQHandler PROC
;;;437    
;;;438    void UART0_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;439    {
;;;440    		UART_TEST_HANDLE();
000002  f7fffffe          BL       UART_TEST_HANDLE
;;;441    }
000006  bd00              POP      {pc}
;;;442    	
                          ENDP


                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;343    
;;;344    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;345    {
;;;346        /*---------------------------------------------------------------------------------------------------------*/
;;;347        /* Init UART                                                                                               */
;;;348        /*---------------------------------------------------------------------------------------------------------*/
;;;349        /* Reset IP */
;;;350        SYS_ResetModule(UART0_RST);
000002  4804              LDR      r0,|L5.20|
000004  f7fffffe          BL       SYS_ResetModule
;;;351    
;;;352        /* Configure UART0 and set UART0 Baudrate */
;;;353        UART_Open(UART0, 38400);
000008  214b              MOVS     r1,#0x4b
00000a  0249              LSLS     r1,r1,#9
00000c  4802              LDR      r0,|L5.24|
00000e  f7fffffe          BL       UART_Open
;;;354    }
000012  bd10              POP      {r4,pc}
;;;355    
                          ENDP

                  |L5.20|
                          DCD      0x04000010
                  |L5.24|
                          DCD      0x40050000

                          AREA ||i.UART_TEST_HANDLE||, CODE, READONLY, ALIGN=2

                  UART_TEST_HANDLE PROC
;;;358    /*---------------------------------------------------------------------------------------------------------*/
;;;359    void UART_TEST_HANDLE()
000000  b5f8              PUSH     {r3-r7,lr}
;;;360    {
;;;361    	uint8_t u8InChar = 0xFF;
;;;362    	uint32_t u32IntSts = UART0->ISR;
000002  4844              LDR      r0,|L6.276|
000004  69c0              LDR      r0,[r0,#0x1c]
;;;363    
;;;364    	if(u32IntSts & UART_ISR_RDA_INT_Msk)
;;;365    		{
;;;366    			/* Get all the input characters */
;;;367    			while(UART_IS_RX_READY(UART0))
;;;368    				{
;;;369    					/* Get the character from UART Buffer */
;;;370    					u8InChar = UART_READ(UART0);
;;;371    					if(dataReceiving == 1)
;;;372    						{
;;;373    							responce[arrayIndex] = u8InChar;					
000006  4e44              LDR      r6,|L6.280|
000008  9000              STR      r0,[sp,#0]            ;364
00000a  4634              MOV      r4,r6                 ;371
00000c  05c0              LSLS     r0,r0,#23             ;364
00000e  2700              MOVS     r7,#0                 ;364
000010  3c30              SUBS     r4,r4,#0x30           ;371
000012  2800              CMP      r0,#0                 ;364
000014  db60              BLT      |L6.216|
000016  e063              B        |L6.224|
                  |L6.24|
000018  6800              LDR      r0,[r0,#0]            ;370
00001a  b2c5              UXTB     r5,r0                 ;370
00001c  69a0              LDR      r0,[r4,#0x18]         ;371  ; dataReceiving
00001e  2801              CMP      r0,#1                 ;371
000020  d13a              BNE      |L6.152|
000022  6960              LDR      r0,[r4,#0x14]  ; arrayIndex
000024  5435              STRB     r5,[r6,r0]
;;;374    							if(arrayIndex == 1)
000026  6960              LDR      r0,[r4,#0x14]  ; arrayIndex
000028  2801              CMP      r0,#1
00002a  d103              BNE      |L6.52|
;;;375    								{
;;;376    									if(u8InChar != 0x03)
00002c  2d03              CMP      r5,#3
00002e  d001              BEQ      |L6.52|
;;;377    										{											
;;;378    											dataReceiving = 0;
000030  61a7              STR      r7,[r4,#0x18]  ; dataReceiving
;;;379    											arrayIndex = 0;
000032  6167              STR      r7,[r4,#0x14]  ; arrayIndex
                  |L6.52|
;;;380    										}
;;;381    								}
;;;382    							if(arrayIndex == 2)
000034  6960              LDR      r0,[r4,#0x14]  ; arrayIndex
000036  2802              CMP      r0,#2
000038  d103              BNE      |L6.66|
;;;383    								{
;;;384    									if(u8InChar != 12)
00003a  2d0c              CMP      r5,#0xc
00003c  d001              BEQ      |L6.66|
;;;385    										{
;;;386    											dataReceiving = 0;
00003e  61a7              STR      r7,[r4,#0x18]  ; dataReceiving
;;;387    											arrayIndex = 0;
000040  6167              STR      r7,[r4,#0x14]  ; arrayIndex
                  |L6.66|
;;;388    										}
;;;389    								}
;;;390    							if(dataReceiving == 1)
000042  69a0              LDR      r0,[r4,#0x18]  ; dataReceiving
000044  2801              CMP      r0,#1
000046  d102              BNE      |L6.78|
;;;391    								arrayIndex = arrayIndex + 1;
000048  6960              LDR      r0,[r4,#0x14]  ; arrayIndex
00004a  1c40              ADDS     r0,r0,#1
00004c  6160              STR      r0,[r4,#0x14]  ; arrayIndex
                  |L6.78|
;;;392    							if(arrayIndex == 15)
00004e  6960              LDR      r0,[r4,#0x14]  ; arrayIndex
000050  280f              CMP      r0,#0xf
000052  d121              BNE      |L6.152|
;;;393    								{
;;;394    									dataReceiving = 0;
000054  61a7              STR      r7,[r4,#0x18]  ; dataReceiving
;;;395    									arrayIndex = 0;
000056  6167              STR      r7,[r4,#0x14]  ; arrayIndex
;;;396    									First_Reg_L = (3 * boardID) + (boardID - 1);
000058  7820              LDRB     r0,[r4,#0]  ; boardID
00005a  0041              LSLS     r1,r0,#1
00005c  1840              ADDS     r0,r0,r1
00005e  7821              LDRB     r1,[r4,#0]  ; boardID
000060  1840              ADDS     r0,r0,r1
000062  1e40              SUBS     r0,r0,#1
000064  7060              STRB     r0,[r4,#1]
;;;397    									First_Reg_H = First_Reg_L + 1;
000066  7860              LDRB     r0,[r4,#1]  ; First_Reg_L
000068  1c40              ADDS     r0,r0,#1
00006a  70a0              STRB     r0,[r4,#2]
;;;398    									Second_Reg_L = First_Reg_H + 1;
00006c  78a0              LDRB     r0,[r4,#2]  ; First_Reg_H
00006e  1c40              ADDS     r0,r0,#1
000070  70e0              STRB     r0,[r4,#3]
;;;399    									Second_Reg_H = Second_Reg_L + 1;
000072  78e0              LDRB     r0,[r4,#3]  ; Second_Reg_L
000074  1c40              ADDS     r0,r0,#1
000076  7120              STRB     r0,[r4,#4]
;;;400    									setPort_4(responce[First_Reg_H]);
000078  78a0              LDRB     r0,[r4,#2]  ; First_Reg_H
00007a  5c30              LDRB     r0,[r6,r0]
00007c  f7fffffe          BL       setPort_4
;;;401    									setPort_2(responce[First_Reg_L]);
000080  7860              LDRB     r0,[r4,#1]  ; First_Reg_L
000082  5c30              LDRB     r0,[r6,r0]
000084  f7fffffe          BL       setPort_2
;;;402    									setPort_3(responce[Second_Reg_H]);
000088  7920              LDRB     r0,[r4,#4]  ; Second_Reg_H
00008a  5c30              LDRB     r0,[r6,r0]
00008c  f7fffffe          BL       setPort_3
;;;403    									setPort_1(responce[Second_Reg_L]);
000090  78e0              LDRB     r0,[r4,#3]  ; Second_Reg_L
000092  5c30              LDRB     r0,[r6,r0]
000094  f7fffffe          BL       setPort_1
                  |L6.152|
;;;404    								}
;;;405    						}
;;;406    					if(u8InChar == 0x01 && dataReceiving == 0)
000098  2d01              CMP      r5,#1
00009a  d109              BNE      |L6.176|
00009c  69a0              LDR      r0,[r4,#0x18]  ; dataReceiving
00009e  2800              CMP      r0,#0
0000a0  d106              BNE      |L6.176|
;;;407    						{
;;;408    							responce[arrayIndex] = u8InChar;
0000a2  6960              LDR      r0,[r4,#0x14]  ; arrayIndex
0000a4  5435              STRB     r5,[r6,r0]
;;;409    							dataReceiving = 1;
0000a6  2001              MOVS     r0,#1
0000a8  61a0              STR      r0,[r4,#0x18]  ; dataReceiving
;;;410    							arrayIndex = arrayIndex + 1;
0000aa  6960              LDR      r0,[r4,#0x14]  ; arrayIndex
0000ac  1c40              ADDS     r0,r0,#1
0000ae  6160              STR      r0,[r4,#0x14]  ; arrayIndex
                  |L6.176|
;;;411    						}
;;;412    
;;;413    					/* Check if buffer full */
;;;414    					if(g_u32comRbytes < RXBUFSIZE)
0000b0  68a0              LDR      r0,[r4,#8]  ; g_u32comRbytes
0000b2  2101              MOVS     r1,#1
0000b4  0289              LSLS     r1,r1,#10
0000b6  4288              CMP      r0,r1
0000b8  d20e              BCS      |L6.216|
;;;415    						{
;;;416    								/* Enqueue the character */
;;;417    								g_u8RecData[g_u32comRtail] = u8InChar;
0000ba  4818              LDR      r0,|L6.284|
0000bc  6921              LDR      r1,[r4,#0x10]  ; g_u32comRtail
0000be  5445              STRB     r5,[r0,r1]
;;;418    								g_u32comRtail = (g_u32comRtail == (RXBUFSIZE - 1)) ? 0 : (g_u32comRtail + 1);
0000c0  6921              LDR      r1,[r4,#0x10]  ; g_u32comRtail
0000c2  4817              LDR      r0,|L6.288|
0000c4  4281              CMP      r1,r0
0000c6  d101              BNE      |L6.204|
0000c8  2000              MOVS     r0,#0
0000ca  e001              B        |L6.208|
                  |L6.204|
0000cc  6920              LDR      r0,[r4,#0x10]  ; g_u32comRtail
0000ce  1c40              ADDS     r0,r0,#1
                  |L6.208|
0000d0  6120              STR      r0,[r4,#0x10]  ; g_u32comRtail
;;;419    								g_u32comRbytes++;
0000d2  68a0              LDR      r0,[r4,#8]  ; g_u32comRbytes
0000d4  1c40              ADDS     r0,r0,#1
0000d6  60a0              STR      r0,[r4,#8]  ; g_u32comRbytes
                  |L6.216|
0000d8  480e              LDR      r0,|L6.276|
0000da  69c1              LDR      r1,[r0,#0x1c]         ;367
0000dc  07c9              LSLS     r1,r1,#31             ;367
0000de  d19b              BNE      |L6.24|
                  |L6.224|
;;;420    						}
;;;421    				}
;;;422    		}
;;;423    
;;;424    	if(u32IntSts & UART_ISR_THRE_INT_Msk)
0000e0  9800              LDR      r0,[sp,#0]
0000e2  0580              LSLS     r0,r0,#22
0000e4  d515              BPL      |L6.274|
;;;425    		{
;;;426    			uint16_t tmp;
;;;427    			tmp = g_u32comRtail;
0000e6  6920              LDR      r0,[r4,#0x10]  ; g_u32comRtail
;;;428    			if(g_u32comRhead != tmp)
0000e8  68e1              LDR      r1,[r4,#0xc]  ; g_u32comRhead
0000ea  b280              UXTH     r0,r0                 ;427
0000ec  4281              CMP      r1,r0
0000ee  d010              BEQ      |L6.274|
;;;429    				{
;;;430    						u8InChar = g_u8RecData[g_u32comRhead];
0000f0  68e0              LDR      r0,[r4,#0xc]  ; g_u32comRhead
0000f2  4808              LDR      r0,|L6.276|
                  |L6.244|
;;;431    						while(UART_IS_TX_FULL(UART0));  /* Wait Tx is not full to transmit data */
0000f4  6981              LDR      r1,[r0,#0x18]
0000f6  0209              LSLS     r1,r1,#8
0000f8  d4fc              BMI      |L6.244|
;;;432    						g_u32comRhead = (g_u32comRhead == (RXBUFSIZE - 1)) ? 0 : (g_u32comRhead + 1);
0000fa  68e1              LDR      r1,[r4,#0xc]  ; g_u32comRhead
0000fc  4808              LDR      r0,|L6.288|
0000fe  4281              CMP      r1,r0
000100  d101              BNE      |L6.262|
000102  2000              MOVS     r0,#0
000104  e001              B        |L6.266|
                  |L6.262|
000106  68e0              LDR      r0,[r4,#0xc]  ; g_u32comRhead
000108  1c40              ADDS     r0,r0,#1
                  |L6.266|
00010a  60e0              STR      r0,[r4,#0xc]  ; g_u32comRhead
;;;433    						g_u32comRbytes--;
00010c  68a0              LDR      r0,[r4,#8]  ; g_u32comRbytes
00010e  1e40              SUBS     r0,r0,#1
000110  60a0              STR      r0,[r4,#8]  ; g_u32comRbytes
                  |L6.274|
;;;434    				}
;;;435    		}
;;;436    }
000112  bdf8              POP      {r3-r7,pc}
;;;437    
                          ENDP

                  |L6.276|
                          DCD      0x40050000
                  |L6.280|
                          DCD      ||.data||+0x30
                  |L6.284|
                          DCD      ||.bss||
                  |L6.288|
                          DCD      0x000003ff

                          AREA ||i.delay||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;46     
;;;47     void delay(uint32_t count)
000000  4904              LDR      r1,|L7.20|
;;;48     {
;;;49     	for(i = 0; i < count; i++);
000002  2200              MOVS     r2,#0
                  |L7.4|
000004  620a              STR      r2,[r1,#0x20]  ; i
000006  6a0a              LDR      r2,[r1,#0x20]  ; i
000008  4282              CMP      r2,r0
00000a  d202              BCS      |L7.18|
00000c  6a0a              LDR      r2,[r1,#0x20]  ; i
00000e  1c52              ADDS     r2,r2,#1
000010  e7f8              B        |L7.4|
                  |L7.18|
;;;50     }
000012  4770              BX       lr
;;;51     
                          ENDP

                  |L7.20|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;459    /*---------------------------------------------------------------------------------------------------------*/
;;;460    int main(void)
000000  2159              MOVS     r1,#0x59
000002  2216              MOVS     r2,#0x16
000004  4c2c              LDR      r4,|L8.184|
000006  2088              MOVS     r0,#0x88
000008  e002              B        |L8.16|
                  |L8.10|
00000a  6021              STR      r1,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6020              STR      r0,[r4,#0]
                  |L8.16|
000010  6823              LDR      r3,[r4,#0]
000012  2b01              CMP      r3,#1
000014  d1f9              BNE      |L8.10|
;;;461    	{
;;;462    			/* Unlock protected registers */
;;;463    			SYS_UnlockReg();
;;;464    
;;;465    			/* Init System, peripheral clock and multi-function I/O */
;;;466    			SYS_Init();
000016  f7fffffe          BL       SYS_Init
00001a  2000              MOVS     r0,#0
00001c  6020              STR      r0,[r4,#0]
;;;467    
;;;468    			/* Lock protected registers */
;;;469    			SYS_LockReg();
;;;470    		
;;;471    			/* Init UART0 for printf */
;;;472    			UART0_Init();	
00001e  f7fffffe          BL       UART0_Init
;;;473    			
;;;474    			/* Open Timer0 frequency to 0.5 Hz in periodic mode, and enable interrupt */
;;;475    			TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 1);
000022  4c26              LDR      r4,|L8.188|
000024  2201              MOVS     r2,#1
000026  06d1              LSLS     r1,r2,#27
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       TIMER_Open
00002e  6820              LDR      r0,[r4,#0]
000030  0361              LSLS     r1,r4,#13
000032  4308              ORRS     r0,r0,r1
000034  6020              STR      r0,[r4,#0]
000036  4d22              LDR      r5,|L8.192|
000038  1548              ASRS     r0,r1,#21
00003a  6028              STR      r0,[r5,#0]
00003c  6820              LDR      r0,[r4,#0]
00003e  0049              LSLS     r1,r1,#1
000040  4308              ORRS     r0,r0,r1
000042  6020              STR      r0,[r4,#0]
;;;476    			TIMER_EnableInt(TIMER0);
;;;477    
;;;478    			/* Enable Timer0 ~ Timer3 NVIC */
;;;479    			NVIC_EnableIRQ(TMR0_IRQn);
;;;480    
;;;481    			/* Start Timer0 ~ Timer3 counting */
;;;482    			TIMER_Start(TIMER0);
;;;483    
;;;484    			GPIO_SetMode(P0, BIT0 | BIT1 | BIT4 | BIT5 | BIT6, GPIO_PMD_INPUT);
000044  4c1f              LDR      r4,|L8.196|
000046  2200              MOVS     r2,#0
000048  2173              MOVS     r1,#0x73
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_SetMode
;;;485    			GPIO_SetMode(P0, BIT7, GPIO_PMD_OUTPUT);
000050  2201              MOVS     r2,#1
000052  2180              MOVS     r1,#0x80
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       GPIO_SetMode
;;;486    			GPIO_SetMode(P1, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
00005a  481a              LDR      r0,|L8.196|
00005c  2201              MOVS     r2,#1
00005e  21ff              MOVS     r1,#0xff
000060  3040              ADDS     r0,r0,#0x40
000062  f7fffffe          BL       GPIO_SetMode
;;;487    			GPIO_SetMode(P2, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000066  4817              LDR      r0,|L8.196|
000068  2201              MOVS     r2,#1
00006a  21ff              MOVS     r1,#0xff
00006c  3080              ADDS     r0,r0,#0x80
00006e  f7fffffe          BL       GPIO_SetMode
;;;488    			GPIO_SetMode(P3, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000072  4814              LDR      r0,|L8.196|
000074  2201              MOVS     r2,#1
000076  21ff              MOVS     r1,#0xff
000078  30c0              ADDS     r0,r0,#0xc0
00007a  f7fffffe          BL       GPIO_SetMode
;;;489    			GPIO_SetMode(P4, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
00007e  2201              MOVS     r2,#1
000080  21ff              MOVS     r1,#0xff
000082  4811              LDR      r0,|L8.200|
000084  f7fffffe          BL       GPIO_SetMode
;;;490    		
;;;491    			GetBoardID();
000088  f7fffffe          BL       GetBoardID
;;;492    			
;;;493    			setPort_4(0x00);
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       setPort_4
;;;494    			setPort_2(0x00);
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       setPort_2
;;;495    			setPort_3(0x00);
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       setPort_3
;;;496    			setPort_1(0x00);
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       setPort_1
;;;497    			
;;;498    			/* Enable Interrupt and install the call back function */
;;;499    			UART_ENABLE_INT(UART0, (UART_IER_RDA_IEN_Msk | UART_IER_THRE_IEN_Msk | UART_IER_RTO_IEN_Msk));
0000a4  4809              LDR      r0,|L8.204|
0000a6  6841              LDR      r1,[r0,#4]
0000a8  2213              MOVS     r2,#0x13
0000aa  4311              ORRS     r1,r1,r2
0000ac  6041              STR      r1,[r0,#4]
0000ae  2001              MOVS     r0,#1
0000b0  0300              LSLS     r0,r0,#12
0000b2  6028              STR      r0,[r5,#0]
                  |L8.180|
;;;500    			NVIC_EnableIRQ(UART0_IRQn);
;;;501    			
;;;502    			while(1)
0000b4  e7fe              B        |L8.180|
;;;503    				{
;;;504    					
;;;505    				}
;;;506    	}
;;;507    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L8.184|
                          DCD      0x50000100
                  |L8.188|
                          DCD      0x40010000
                  |L8.192|
                          DCD      0xe000e100
                  |L8.196|
                          DCD      0x50004000
                  |L8.200|
                          DCD      0x50004100
                  |L8.204|
                          DCD      0x40050000

                          AREA ||i.setPort_1||, CODE, READONLY, ALIGN=2

                  setPort_1 PROC
;;;51     
;;;52     void setPort_1(char value)
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54     	char res = value & 0x01;
000002  07c4              LSLS     r4,r0,#31
000004  0fe4              LSRS     r4,r4,#31
;;;55     	if(res != 0)
;;;56     		P10 = 1;
000006  2201              MOVS     r2,#1
000008  2300              MOVS     r3,#0
00000a  4918              LDR      r1,|L9.108|
00000c  2c00              CMP      r4,#0                 ;55
00000e  d001              BEQ      |L9.20|
000010  620a              STR      r2,[r1,#0x20]
000012  e000              B        |L9.22|
                  |L9.20|
;;;57     	else
;;;58     		P10 = 0;
000014  620b              STR      r3,[r1,#0x20]
                  |L9.22|
;;;59     	
;;;60     	res = value & 0x02;
000016  2402              MOVS     r4,#2
000018  4220              TST      r0,r4
;;;61     	if(res != 0)
00001a  d001              BEQ      |L9.32|
;;;62     		P11 = 1;
00001c  624a              STR      r2,[r1,#0x24]
00001e  e000              B        |L9.34|
                  |L9.32|
;;;63     	else
;;;64     		P11 = 0;
000020  624b              STR      r3,[r1,#0x24]
                  |L9.34|
;;;65     	
;;;66     	res = value & 0x04;
000022  2404              MOVS     r4,#4
000024  4220              TST      r0,r4
;;;67     	if(res != 0)
000026  d001              BEQ      |L9.44|
;;;68     		P12 = 1;
000028  628a              STR      r2,[r1,#0x28]
00002a  e000              B        |L9.46|
                  |L9.44|
;;;69     	else
;;;70     		P12 = 0;
00002c  628b              STR      r3,[r1,#0x28]
                  |L9.46|
;;;71     	
;;;72     	res = value & 0x08;
00002e  2408              MOVS     r4,#8
000030  4220              TST      r0,r4
;;;73     	if(res != 0)
000032  d001              BEQ      |L9.56|
;;;74     		P13 = 1;
000034  62ca              STR      r2,[r1,#0x2c]
000036  e000              B        |L9.58|
                  |L9.56|
;;;75     	else
;;;76     		P13 = 0;
000038  62cb              STR      r3,[r1,#0x2c]
                  |L9.58|
;;;77     	
;;;78     	res = value & 0x10;
00003a  2410              MOVS     r4,#0x10
00003c  4220              TST      r0,r4
;;;79     	if(res != 0)
00003e  d001              BEQ      |L9.68|
;;;80     		P14 = 1;
000040  630a              STR      r2,[r1,#0x30]
000042  e000              B        |L9.70|
                  |L9.68|
;;;81     	else
;;;82     		P14 = 0;
000044  630b              STR      r3,[r1,#0x30]
                  |L9.70|
;;;83     	
;;;84     	res = value & 0x20;
000046  2420              MOVS     r4,#0x20
000048  4220              TST      r0,r4
;;;85     	if(res != 0)
00004a  d001              BEQ      |L9.80|
;;;86     		P15 = 1;
00004c  634a              STR      r2,[r1,#0x34]
00004e  e000              B        |L9.82|
                  |L9.80|
;;;87     	else
;;;88     		P15 = 0;
000050  634b              STR      r3,[r1,#0x34]
                  |L9.82|
;;;89     	
;;;90     	res = value & 0x40;
000052  2440              MOVS     r4,#0x40
000054  4220              TST      r0,r4
;;;91     	if(res != 0)
000056  d001              BEQ      |L9.92|
;;;92     		P16 = 1;
000058  638a              STR      r2,[r1,#0x38]
00005a  e000              B        |L9.94|
                  |L9.92|
;;;93     	else
;;;94     		P16 = 0;
00005c  638b              STR      r3,[r1,#0x38]
                  |L9.94|
;;;95     	
;;;96     	res = value & 0x80;
00005e  09c0              LSRS     r0,r0,#7
000060  01c0              LSLS     r0,r0,#7
;;;97     	if(res != 0)
000062  d001              BEQ      |L9.104|
;;;98     		P17 = 1;
000064  63ca              STR      r2,[r1,#0x3c]
;;;99     	else
;;;100    		P17 = 0;
;;;101    }
000066  bd10              POP      {r4,pc}
                  |L9.104|
000068  63cb              STR      r3,[r1,#0x3c]         ;100
00006a  bd10              POP      {r4,pc}
;;;102    
                          ENDP

                  |L9.108|
                          DCD      0x50004200

                          AREA ||i.setPort_2||, CODE, READONLY, ALIGN=2

                  setPort_2 PROC
;;;102    
;;;103    void setPort_2(char value)
000000  b510              PUSH     {r4,lr}
;;;104    {
;;;105    	char res = value & 0x01;
000002  07c4              LSLS     r4,r0,#31
000004  0fe4              LSRS     r4,r4,#31
;;;106    	if(res != 0)
;;;107    		P20 = 1;
000006  2201              MOVS     r2,#1
000008  2300              MOVS     r3,#0
00000a  4918              LDR      r1,|L10.108|
00000c  2c00              CMP      r4,#0                 ;106
00000e  d001              BEQ      |L10.20|
000010  600a              STR      r2,[r1,#0]
000012  e000              B        |L10.22|
                  |L10.20|
;;;108    	else
;;;109    		P20 = 0;
000014  600b              STR      r3,[r1,#0]
                  |L10.22|
;;;110    	
;;;111    	res = value & 0x02;
000016  2402              MOVS     r4,#2
000018  4220              TST      r0,r4
;;;112    	if(res != 0)
00001a  d001              BEQ      |L10.32|
;;;113    		P21 = 1;
00001c  604a              STR      r2,[r1,#4]
00001e  e000              B        |L10.34|
                  |L10.32|
;;;114    	else
;;;115    		P21 = 0;
000020  604b              STR      r3,[r1,#4]
                  |L10.34|
;;;116    	
;;;117    	res = value & 0x04;
000022  2404              MOVS     r4,#4
000024  4220              TST      r0,r4
;;;118    	if(res != 0)
000026  d001              BEQ      |L10.44|
;;;119    		P22 = 1;
000028  608a              STR      r2,[r1,#8]
00002a  e000              B        |L10.46|
                  |L10.44|
;;;120    	else
;;;121    		P22 = 0;
00002c  608b              STR      r3,[r1,#8]
                  |L10.46|
;;;122    	
;;;123    	res = value & 0x08;
00002e  2408              MOVS     r4,#8
000030  4220              TST      r0,r4
;;;124    	if(res != 0)
000032  d001              BEQ      |L10.56|
;;;125    		P23 = 1;
000034  60ca              STR      r2,[r1,#0xc]
000036  e000              B        |L10.58|
                  |L10.56|
;;;126    	else
;;;127    		P23 = 0;
000038  60cb              STR      r3,[r1,#0xc]
                  |L10.58|
;;;128    	
;;;129    	res = value & 0x10;
00003a  2410              MOVS     r4,#0x10
00003c  4220              TST      r0,r4
;;;130    	if(res != 0)
00003e  d001              BEQ      |L10.68|
;;;131    		P24 = 1;
000040  610a              STR      r2,[r1,#0x10]
000042  e000              B        |L10.70|
                  |L10.68|
;;;132    	else
;;;133    		P24 = 0;
000044  610b              STR      r3,[r1,#0x10]
                  |L10.70|
;;;134    	
;;;135    	res = value & 0x20;
000046  2420              MOVS     r4,#0x20
000048  4220              TST      r0,r4
;;;136    	if(res != 0)
00004a  d001              BEQ      |L10.80|
;;;137    		P25 = 1;
00004c  614a              STR      r2,[r1,#0x14]
00004e  e000              B        |L10.82|
                  |L10.80|
;;;138    	else
;;;139    		P25 = 0;
000050  614b              STR      r3,[r1,#0x14]
                  |L10.82|
;;;140    	
;;;141    	res = value & 0x40;
000052  2440              MOVS     r4,#0x40
000054  4220              TST      r0,r4
;;;142    	if(res != 0)
000056  d001              BEQ      |L10.92|
;;;143    		P26 = 1;
000058  618a              STR      r2,[r1,#0x18]
00005a  e000              B        |L10.94|
                  |L10.92|
;;;144    	else
;;;145    		P26 = 0;
00005c  618b              STR      r3,[r1,#0x18]
                  |L10.94|
;;;146    	
;;;147    	res = value & 0x80;
00005e  09c0              LSRS     r0,r0,#7
000060  01c0              LSLS     r0,r0,#7
;;;148    	if(res != 0)
000062  d001              BEQ      |L10.104|
;;;149    		P27 = 1;
000064  61ca              STR      r2,[r1,#0x1c]
;;;150    	else
;;;151    		P27 = 0;
;;;152    }
000066  bd10              POP      {r4,pc}
                  |L10.104|
000068  61cb              STR      r3,[r1,#0x1c]         ;151
00006a  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L10.108|
                          DCD      0x50004240

                          AREA ||i.setPort_3||, CODE, READONLY, ALIGN=2

                  setPort_3 PROC
;;;153    
;;;154    void setPort_3(char value)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156    	char res = value & 0x01;
000002  07c4              LSLS     r4,r0,#31
000004  0fe4              LSRS     r4,r4,#31
;;;157    	if(res != 0)
;;;158    		P30 = 1;
000006  2201              MOVS     r2,#1
000008  2300              MOVS     r3,#0
00000a  4918              LDR      r1,|L11.108|
00000c  2c00              CMP      r4,#0                 ;157
00000e  d001              BEQ      |L11.20|
000010  620a              STR      r2,[r1,#0x20]
000012  e000              B        |L11.22|
                  |L11.20|
;;;159    	else
;;;160    		P30 = 0;
000014  620b              STR      r3,[r1,#0x20]
                  |L11.22|
;;;161    	
;;;162    	res = value & 0x02;
000016  2402              MOVS     r4,#2
000018  4220              TST      r0,r4
;;;163    	if(res != 0)
00001a  d001              BEQ      |L11.32|
;;;164    		P31 = 1;
00001c  624a              STR      r2,[r1,#0x24]
00001e  e000              B        |L11.34|
                  |L11.32|
;;;165    	else
;;;166    		P31 = 0;
000020  624b              STR      r3,[r1,#0x24]
                  |L11.34|
;;;167    	
;;;168    	res = value & 0x04;
000022  2404              MOVS     r4,#4
000024  4220              TST      r0,r4
;;;169    	if(res != 0)
000026  d001              BEQ      |L11.44|
;;;170    		P32 = 1;
000028  628a              STR      r2,[r1,#0x28]
00002a  e000              B        |L11.46|
                  |L11.44|
;;;171    	else
;;;172    		P32 = 0;
00002c  628b              STR      r3,[r1,#0x28]
                  |L11.46|
;;;173    	
;;;174    	res = value & 0x08;
00002e  2408              MOVS     r4,#8
000030  4220              TST      r0,r4
;;;175    	if(res != 0)
000032  d001              BEQ      |L11.56|
;;;176    		P33 = 1;
000034  62ca              STR      r2,[r1,#0x2c]
000036  e000              B        |L11.58|
                  |L11.56|
;;;177    	else
;;;178    		P33 = 0;
000038  62cb              STR      r3,[r1,#0x2c]
                  |L11.58|
;;;179    	
;;;180    	res = value & 0x10;
00003a  2410              MOVS     r4,#0x10
00003c  4220              TST      r0,r4
;;;181    	if(res != 0)
00003e  d001              BEQ      |L11.68|
;;;182    		P34 = 1;
000040  630a              STR      r2,[r1,#0x30]
000042  e000              B        |L11.70|
                  |L11.68|
;;;183    	else
;;;184    		P34 = 0;
000044  630b              STR      r3,[r1,#0x30]
                  |L11.70|
;;;185    	
;;;186    	res = value & 0x20;
000046  2420              MOVS     r4,#0x20
000048  4220              TST      r0,r4
;;;187    	if(res != 0)
00004a  d001              BEQ      |L11.80|
;;;188    		P35 = 1;
00004c  634a              STR      r2,[r1,#0x34]
00004e  e000              B        |L11.82|
                  |L11.80|
;;;189    	else
;;;190    		P35 = 0;
000050  634b              STR      r3,[r1,#0x34]
                  |L11.82|
;;;191    	
;;;192    	res = value & 0x40;
000052  2440              MOVS     r4,#0x40
000054  4220              TST      r0,r4
;;;193    	if(res != 0)
000056  d001              BEQ      |L11.92|
;;;194    		P36 = 1;
000058  638a              STR      r2,[r1,#0x38]
00005a  e000              B        |L11.94|
                  |L11.92|
;;;195    	else
;;;196    		P36 = 0;
00005c  638b              STR      r3,[r1,#0x38]
                  |L11.94|
;;;197    	
;;;198    	res = value & 0x80;
00005e  09c0              LSRS     r0,r0,#7
000060  01c0              LSLS     r0,r0,#7
;;;199    	if(res != 0)
000062  d001              BEQ      |L11.104|
;;;200    		P37 = 1;
000064  63ca              STR      r2,[r1,#0x3c]
;;;201    	else
;;;202    		P37 = 0;
;;;203    }
000066  bd10              POP      {r4,pc}
                  |L11.104|
000068  63cb              STR      r3,[r1,#0x3c]         ;202
00006a  bd10              POP      {r4,pc}
;;;204    
                          ENDP

                  |L11.108|
                          DCD      0x50004240

                          AREA ||i.setPort_4||, CODE, READONLY, ALIGN=2

                  setPort_4 PROC
;;;204    
;;;205    void setPort_4(char value)
000000  b510              PUSH     {r4,lr}
;;;206    {
;;;207    	char res = value & 0x01;
000002  07c4              LSLS     r4,r0,#31
000004  0fe4              LSRS     r4,r4,#31
;;;208    	if(res != 0)
;;;209    		P40 = 1;
000006  2201              MOVS     r2,#1
000008  2300              MOVS     r3,#0
00000a  4918              LDR      r1,|L12.108|
00000c  2c00              CMP      r4,#0                 ;208
00000e  d001              BEQ      |L12.20|
000010  600a              STR      r2,[r1,#0]
000012  e000              B        |L12.22|
                  |L12.20|
;;;210    	else
;;;211    		P40 = 0;
000014  600b              STR      r3,[r1,#0]
                  |L12.22|
;;;212    	
;;;213    	res = value & 0x02;
000016  2402              MOVS     r4,#2
000018  4220              TST      r0,r4
;;;214    	if(res != 0)
00001a  d001              BEQ      |L12.32|
;;;215    		P41 = 1;
00001c  604a              STR      r2,[r1,#4]
00001e  e000              B        |L12.34|
                  |L12.32|
;;;216    	else
;;;217    		P41 = 0;
000020  604b              STR      r3,[r1,#4]
                  |L12.34|
;;;218    	
;;;219    	res = value & 0x04;
000022  2404              MOVS     r4,#4
000024  4220              TST      r0,r4
;;;220    	if(res != 0)
000026  d001              BEQ      |L12.44|
;;;221    		P42 = 1;
000028  608a              STR      r2,[r1,#8]
00002a  e000              B        |L12.46|
                  |L12.44|
;;;222    	else
;;;223    		P42 = 0;
00002c  608b              STR      r3,[r1,#8]
                  |L12.46|
;;;224    	
;;;225    	res = value & 0x08;
00002e  2408              MOVS     r4,#8
000030  4220              TST      r0,r4
;;;226    	if(res != 0)
000032  d001              BEQ      |L12.56|
;;;227    		P43 = 1;
000034  60ca              STR      r2,[r1,#0xc]
000036  e000              B        |L12.58|
                  |L12.56|
;;;228    	else
;;;229    		P43 = 0;
000038  60cb              STR      r3,[r1,#0xc]
                  |L12.58|
;;;230    	
;;;231    	res = value & 0x10;
00003a  2410              MOVS     r4,#0x10
00003c  4220              TST      r0,r4
;;;232    	if(res != 0)
00003e  d001              BEQ      |L12.68|
;;;233    		P44 = 1;
000040  610a              STR      r2,[r1,#0x10]
000042  e000              B        |L12.70|
                  |L12.68|
;;;234    	else
;;;235    		P44 = 0;
000044  610b              STR      r3,[r1,#0x10]
                  |L12.70|
;;;236    	
;;;237    	res = value & 0x20;
000046  2420              MOVS     r4,#0x20
000048  4220              TST      r0,r4
;;;238    	if(res != 0)
00004a  d001              BEQ      |L12.80|
;;;239    		P45 = 1;
00004c  614a              STR      r2,[r1,#0x14]
00004e  e000              B        |L12.82|
                  |L12.80|
;;;240    	else
;;;241    		P45 = 0;
000050  614b              STR      r3,[r1,#0x14]
                  |L12.82|
;;;242    	
;;;243    	res = value & 0x40;
000052  2440              MOVS     r4,#0x40
000054  4220              TST      r0,r4
;;;244    	if(res != 0)
000056  d001              BEQ      |L12.92|
;;;245    		P46 = 1;
000058  618a              STR      r2,[r1,#0x18]
00005a  e000              B        |L12.94|
                  |L12.92|
;;;246    	else
;;;247    		P46 = 0;
00005c  618b              STR      r3,[r1,#0x18]
                  |L12.94|
;;;248    	
;;;249    	res = value & 0x80;
00005e  09c0              LSRS     r0,r0,#7
000060  01c0              LSLS     r0,r0,#7
;;;250    	if(res != 0)
000062  d001              BEQ      |L12.104|
;;;251    		P47 = 1;
000064  61ca              STR      r2,[r1,#0x1c]
;;;252    	else
;;;253    		P47 = 0;
;;;254    }
000066  bd10              POP      {r4,pc}
                  |L12.104|
000068  61cb              STR      r3,[r1,#0x1c]         ;253
00006a  bd10              POP      {r4,pc}
;;;255    
                          ENDP

                  |L12.108|
                          DCD      0x50004280

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_u8RecData
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  boardID
000000  00                DCB      0x00
                  First_Reg_L
000001  00                DCB      0x00
                  First_Reg_H
000002  00                DCB      0x00
                  Second_Reg_L
000003  00                DCB      0x00
                  Second_Reg_H
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_u32comRbytes
                          DCD      0x00000000
                  g_u32comRhead
                          DCD      0x00000000
                  g_u32comRtail
                          DCD      0x00000000
                  arrayIndex
                          DCD      0x00000000
                  dataReceiving
                          DCD      0x00000000
                  seconds
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  masterCommand
000024  00010000          DCB      0x00,0x01,0x00,0x00
000028  00060103          DCB      0x00,0x06,0x01,0x03
00002c  00000006          DCB      0x00,0x00,0x00,0x06
                  responce
000030  01030c00          DCB      0x01,0x03,0x0c,0x00
000034  01000200          DCB      0x01,0x00,0x02,0x00
000038  03000400          DCB      0x03,0x00,0x04,0x00
00003c  05000a            DCB      0x05,0x00,0x0a

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a80fc96b____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_a80fc96b____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a80fc96b____REVSH|
#line 132
|__asm___6_main_c_a80fc96b____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
