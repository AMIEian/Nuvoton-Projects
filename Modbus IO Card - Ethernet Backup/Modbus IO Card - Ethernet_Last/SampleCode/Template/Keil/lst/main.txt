; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xAN\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GetBoardID||, CODE, READONLY, ALIGN=2

                  GetBoardID PROC
;;;456    	
;;;457    void GetBoardID()
000000  4912              LDR      r1,|L1.76|
;;;458    {
;;;459    	if(P00 == 0)
000002  680a              LDR      r2,[r1,#0]
;;;460    		boardID = boardID | 0x01;
000004  4812              LDR      r0,|L1.80|
000006  2a00              CMP      r2,#0                 ;459
000008  d103              BNE      |L1.18|
00000a  78c2              LDRB     r2,[r0,#3]  ; boardID
00000c  2301              MOVS     r3,#1
00000e  431a              ORRS     r2,r2,r3
000010  70c2              STRB     r2,[r0,#3]
                  |L1.18|
;;;461    	if(P01 == 0)
000012  684a              LDR      r2,[r1,#4]
000014  2a00              CMP      r2,#0
000016  d103              BNE      |L1.32|
;;;462    		boardID = boardID | 0x02;
000018  78c2              LDRB     r2,[r0,#3]  ; boardID
00001a  2302              MOVS     r3,#2
00001c  431a              ORRS     r2,r2,r3
00001e  70c2              STRB     r2,[r0,#3]
                  |L1.32|
;;;463    	if(P04 == 0)
000020  690a              LDR      r2,[r1,#0x10]
000022  2a00              CMP      r2,#0
000024  d103              BNE      |L1.46|
;;;464    		boardID = boardID | 0x04;
000026  78c2              LDRB     r2,[r0,#3]  ; boardID
000028  2304              MOVS     r3,#4
00002a  431a              ORRS     r2,r2,r3
00002c  70c2              STRB     r2,[r0,#3]
                  |L1.46|
;;;465    	if(P05 == 0)
00002e  694a              LDR      r2,[r1,#0x14]
000030  2a00              CMP      r2,#0
000032  d103              BNE      |L1.60|
;;;466    		boardID = boardID | 0x08;
000034  78c2              LDRB     r2,[r0,#3]  ; boardID
000036  2308              MOVS     r3,#8
000038  431a              ORRS     r2,r2,r3
00003a  70c2              STRB     r2,[r0,#3]
                  |L1.60|
;;;467    	if(P06 == 0)
00003c  6989              LDR      r1,[r1,#0x18]
00003e  2900              CMP      r1,#0
000040  d103              BNE      |L1.74|
;;;468    		boardID = boardID | 0x10;
000042  78c1              LDRB     r1,[r0,#3]  ; boardID
000044  2210              MOVS     r2,#0x10
000046  4311              ORRS     r1,r1,r2
000048  70c1              STRB     r1,[r0,#3]
                  |L1.74|
;;;469    }
00004a  4770              BX       lr
;;;470    
                          ENDP

                  |L1.76|
                          DCD      0x50004200
                  |L1.80|
                          DCD      ||.data||

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;303    	
;;;304    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;305    {
;;;306        /*---------------------------------------------------------------------------------------------------------*/
;;;307        /* Init System Clock                                                                                       */
;;;308        /*---------------------------------------------------------------------------------------------------------*/
;;;309        /* Enable IRC22M clock */
;;;310        CLK->PWRCON |= CLK_PWRCON_IRC22M_EN_Msk;
000002  4c16              LDR      r4,|L2.92|
000004  6820              LDR      r0,[r4,#0]
000006  2104              MOVS     r1,#4
000008  4308              ORRS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;311    
;;;312        /* Waiting for IRC22M clock ready */
;;;313        CLK_WaitClockReady(CLK_CLKSTATUS_IRC22M_STB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;314    
;;;315        /* Switch HCLK clock source to HIRC */
;;;316        CLK->CLKSEL0 = CLK_CLKSEL0_HCLK_S_HIRC;
000012  2007              MOVS     r0,#7
000014  6120              STR      r0,[r4,#0x10]
;;;317    
;;;318        /* Set PLL to Power-down mode and PLL_STB bit in CLKSTATUS register will be cleared by hardware.*/
;;;319        CLK->PLLCON |= CLK_PLLCON_PD_Msk;
000016  6a20              LDR      r0,[r4,#0x20]
000018  01e1              LSLS     r1,r4,#7
00001a  4308              ORRS     r0,r0,r1
00001c  6220              STR      r0,[r4,#0x20]
;;;320    
;;;321        /* Enable PLL and Set PLL frequency */
;;;322        CLK->PLLCON = PLLCON_SETTING;
00001e  4810              LDR      r0,|L2.96|
000020  6220              STR      r0,[r4,#0x20]
;;;323    
;;;324        /* Waiting for clock ready */
;;;325        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk | CLK_CLKSTATUS_XTL12M_STB_Msk | CLK_CLKSTATUS_IRC10K_STB_Msk);
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       CLK_WaitClockReady
;;;326    
;;;327        /* Switch HCLK clock source to PLL, STCLK to HCLK/2 */
;;;328        CLK->CLKSEL0 = CLK_CLKSEL0_STCLK_S_HCLK_DIV2 | CLK_CLKSEL0_HCLK_S_PLL;
000028  201a              MOVS     r0,#0x1a
00002a  6120              STR      r0,[r4,#0x10]
;;;329    
;;;330        /* Enable peripheral clock */
;;;331        CLK->APBCLK = CLK_APBCLK_UART0_EN_Msk | CLK_APBCLK_TMR0_EN_Msk;
00002c  480d              LDR      r0,|L2.100|
00002e  60a0              STR      r0,[r4,#8]
;;;332    
;;;333        /* Peripheral clock source */
;;;334        CLK->CLKSEL1 = CLK_CLKSEL1_UART_S_PLL | CLK_CLKSEL1_TMR0_S_HIRC;
000030  480d              LDR      r0,|L2.104|
000032  6160              STR      r0,[r4,#0x14]
;;;335    
;;;336        /* Update System Core Clock */
;;;337        /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;338        SystemCoreClockUpdate();
000034  f7fffffe          BL       SystemCoreClockUpdate
;;;339    
;;;340        /*---------------------------------------------------------------------------------------------------------*/
;;;341        /* Init I/O Multi-function                                                                                 */
;;;342        /*---------------------------------------------------------------------------------------------------------*/
;;;343        /* Set P3 multi-function pins for UART0 RXD, TXD */
;;;344        SYS->P0_MFP &= ~(SYS_MFP_P03_Msk | SYS_MFP_P02_Msk);
000038  2005              MOVS     r0,#5
00003a  0700              LSLS     r0,r0,#28
00003c  6b01              LDR      r1,[r0,#0x30]
00003e  4a0b              LDR      r2,|L2.108|
000040  4011              ANDS     r1,r1,r2
000042  6301              STR      r1,[r0,#0x30]
;;;345        SYS->P0_MFP |= (SYS_MFP_P03_RXD0 | SYS_MFP_P02_TXD0);
000044  6b01              LDR      r1,[r0,#0x30]
000046  43d2              MVNS     r2,r2
000048  4311              ORRS     r1,r1,r2
00004a  6301              STR      r1,[r0,#0x30]
;;;346    		
;;;347    		SYS->P4_MFP &= ~(SYS_MFP_P46_Msk | SYS_MFP_P47_Msk);
00004c  4808              LDR      r0,|L2.112|
00004e  6801              LDR      r1,[r0,#0]
000050  4a08              LDR      r2,|L2.116|
000052  4011              ANDS     r1,r1,r2
000054  6001              STR      r1,[r0,#0]
;;;348        SYS->P4_MFP |= (SYS_MFP_P46_GPIO | SYS_MFP_P47_GPIO);
000056  6801              LDR      r1,[r0,#0]
000058  6001              STR      r1,[r0,#0]
;;;349    }
00005a  bd10              POP      {r4,pc}
;;;350    
                          ENDP

                  |L2.92|
                          DCD      0x50000200
                  |L2.96|
                          DCD      0x00085639
                  |L2.100|
                          DCD      0x00010004
                  |L2.104|
                          DCD      0x01000700
                  |L2.108|
                          DCD      0xfffff3f3
                  |L2.112|
                          DCD      0x50000040
                  |L2.116|
                          DCD      0xffff3f3f

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  TMR0_IRQHandler PROC
;;;268     */
;;;269    void TMR0_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  491e              LDR      r1,|L3.124|
000004  6888              LDR      r0,[r1,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;270    	{
00000a  d00f              BEQ      |L3.44|
00000c  2001              MOVS     r0,#1
00000e  6088              STR      r0,[r1,#8]
;;;271    			if(TIMER_GetIntFlag(TIMER0) == 1)
;;;272    				{
;;;273    						/* Clear Timer0 time-out interrupt flag */
;;;274    						TIMER_ClearIntFlag(TIMER0);								
;;;275    						
;;;276    						if(dataReceiving == 0)
000010  4c1b              LDR      r4,|L3.128|
000012  69a1              LDR      r1,[r4,#0x18]  ; dataReceiving
000014  2500              MOVS     r5,#0
000016  2900              CMP      r1,#0
000018  d009              BEQ      |L3.46|
;;;277    							{
;;;278    								if(boardID == 1 || boardID == 11 || boardID == 21 || boardID == 31)
;;;279    									{
;;;280    										P07 = 1;
;;;281    										delay(100000);
;;;282    										
;;;283    										for(i = 0; i < 12; i++)
;;;284    											printf("%c", masterCommand[i]);
;;;285    										
;;;286    										arrayIndex = 0;
;;;287    										delay(100000);
;;;288    										P07 = 0;
;;;289    									}
;;;290    							}	
;;;291    						else
;;;292    							{
;;;293    								seconds = seconds + 1;
00001a  69e0              LDR      r0,[r4,#0x1c]  ; seconds
00001c  1c40              ADDS     r0,r0,#1
00001e  61e0              STR      r0,[r4,#0x1c]  ; seconds
;;;294    								if(seconds >= 16)
000020  69e0              LDR      r0,[r4,#0x1c]  ; seconds
000022  2810              CMP      r0,#0x10
000024  d302              BCC      |L3.44|
;;;295    									{
;;;296    										seconds = 0;
000026  61e5              STR      r5,[r4,#0x1c]  ; seconds
;;;297    										dataReceiving = 0;
000028  61a5              STR      r5,[r4,#0x18]  ; dataReceiving
;;;298    										arrayIndex = 0;
00002a  6165              STR      r5,[r4,#0x14]  ; arrayIndex
                  |L3.44|
;;;299    									}
;;;300    							}										
;;;301    				}
;;;302    	}
00002c  bdf8              POP      {r3-r7,pc}
                  |L3.46|
00002e  78e1              LDRB     r1,[r4,#3]            ;278  ; boardID
000030  2901              CMP      r1,#1                 ;278
000032  d008              BEQ      |L3.70|
000034  78e1              LDRB     r1,[r4,#3]            ;278  ; boardID
000036  290b              CMP      r1,#0xb               ;278
000038  d005              BEQ      |L3.70|
00003a  78e1              LDRB     r1,[r4,#3]            ;278  ; boardID
00003c  2915              CMP      r1,#0x15              ;278
00003e  d002              BEQ      |L3.70|
000040  78e1              LDRB     r1,[r4,#3]            ;278  ; boardID
000042  291f              CMP      r1,#0x1f              ;278
000044  d1f2              BNE      |L3.44|
                  |L3.70|
000046  4e0f              LDR      r6,|L3.132|
000048  61f0              STR      r0,[r6,#0x1c]         ;280
00004a  480f              LDR      r0,|L3.136|
00004c  f7fffffe          BL       delay
000050  6225              STR      r5,[r4,#0x20]         ;283  ; i
000052  4f0b              LDR      r7,|L3.128|
000054  3724              ADDS     r7,r7,#0x24           ;284
000056  e007              B        |L3.104|
                  |L3.88|
000058  6a20              LDR      r0,[r4,#0x20]         ;284  ; i
00005a  5c39              LDRB     r1,[r7,r0]            ;284
00005c  a00b              ADR      r0,|L3.140|
00005e  f7fffffe          BL       __2printf
000062  6a20              LDR      r0,[r4,#0x20]         ;283  ; i
000064  1c40              ADDS     r0,r0,#1              ;283
000066  6220              STR      r0,[r4,#0x20]         ;283  ; i
                  |L3.104|
000068  6a20              LDR      r0,[r4,#0x20]         ;283  ; i
00006a  280c              CMP      r0,#0xc               ;283
00006c  d3f4              BCC      |L3.88|
00006e  6165              STR      r5,[r4,#0x14]         ;286  ; arrayIndex
000070  4805              LDR      r0,|L3.136|
000072  f7fffffe          BL       delay
000076  61f5              STR      r5,[r6,#0x1c]         ;288
000078  bdf8              POP      {r3-r7,pc}
;;;303    	
                          ENDP

00007a  0000              DCW      0x0000
                  |L3.124|
                          DCD      0x40010000
                  |L3.128|
                          DCD      ||.data||
                  |L3.132|
                          DCD      0x50004200
                  |L3.136|
                          DCD      0x000186a0
                  |L3.140|
00008c  256300            DCB      "%c",0
00008f  00                DCB      0

                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART0_IRQHandler PROC
;;;451    
;;;452    void UART0_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;453    {
;;;454    		UART_TEST_HANDLE();
000002  f7fffffe          BL       UART_TEST_HANDLE
;;;455    }
000006  bd00              POP      {pc}
;;;456    	
                          ENDP


                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;350    
;;;351    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;352    {
;;;353        /*---------------------------------------------------------------------------------------------------------*/
;;;354        /* Init UART                                                                                               */
;;;355        /*---------------------------------------------------------------------------------------------------------*/
;;;356        /* Reset IP */
;;;357        SYS_ResetModule(UART0_RST);
000002  4804              LDR      r0,|L5.20|
000004  f7fffffe          BL       SYS_ResetModule
;;;358    
;;;359        /* Configure UART0 and set UART0 Baudrate */
;;;360        UART_Open(UART0, 38400);
000008  214b              MOVS     r1,#0x4b
00000a  0249              LSLS     r1,r1,#9
00000c  4802              LDR      r0,|L5.24|
00000e  f7fffffe          BL       UART_Open
;;;361    }
000012  bd10              POP      {r4,pc}
;;;362    
                          ENDP

                  |L5.20|
                          DCD      0x04000010
                  |L5.24|
                          DCD      0x40050000

                          AREA ||i.UART_TEST_HANDLE||, CODE, READONLY, ALIGN=2

                  UART_TEST_HANDLE PROC
;;;365    /*---------------------------------------------------------------------------------------------------------*/
;;;366    void UART_TEST_HANDLE()
000000  b5f8              PUSH     {r3-r7,lr}
;;;367    {
;;;368    	uint8_t u8InChar = 0xFF;
;;;369    	uint32_t u32IntSts = UART0->ISR;
000002  484c              LDR      r0,|L6.308|
000004  69c0              LDR      r0,[r0,#0x1c]
;;;370    
;;;371    	if(u32IntSts & UART_ISR_RDA_INT_Msk)
000006  9000              STR      r0,[sp,#0]
000008  05c0              LSLS     r0,r0,#23
00000a  2700              MOVS     r7,#0
;;;372    		{
;;;373    			/* Get all the input characters */
;;;374    			while(UART_IS_RX_READY(UART0))
;;;375    				{
;;;376    					/* Get the character from UART Buffer */
;;;377    					u8InChar = UART_READ(UART0);
;;;378    					if(dataReceiving == 1)
;;;379    						{
;;;380    							responce[arrayIndex] = u8InChar;					
00000c  4e4a              LDR      r6,|L6.312|
00000e  4d4b              LDR      r5,|L6.316|
000010  2800              CMP      r0,#0                 ;371
000012  db71              BLT      |L6.248|
000014  e074              B        |L6.256|
                  |L6.22|
000016  6800              LDR      r0,[r0,#0]            ;377
000018  b2c4              UXTB     r4,r0                 ;377
00001a  69a8              LDR      r0,[r5,#0x18]         ;378  ; dataReceiving
00001c  2801              CMP      r0,#1                 ;378
00001e  d14b              BNE      |L6.184|
000020  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000022  5434              STRB     r4,[r6,r0]
;;;381    							if(arrayIndex == 1)
000024  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000026  2801              CMP      r0,#1
000028  d112              BNE      |L6.80|
;;;382    								{
;;;383    									if(u8InChar != 0x03)
00002a  2c03              CMP      r4,#3
00002c  d010              BEQ      |L6.80|
;;;384    										{
;;;385    											if(u8InChar == 0x83)
00002e  2c83              CMP      r4,#0x83
000030  d10c              BNE      |L6.76|
;;;386    											{
;;;387    												totalRegsToRead = totalRegsToRead - 1;
000032  7828              LDRB     r0,[r5,#0]  ; totalRegsToRead
000034  1e40              SUBS     r0,r0,#1
000036  7028              STRB     r0,[r5,#0]
;;;388    												toatalDataBytesToReceived = 2 * totalRegsToRead;
000038  7828              LDRB     r0,[r5,#0]  ; totalRegsToRead
00003a  0040              LSLS     r0,r0,#1
00003c  7068              STRB     r0,[r5,#1]
;;;389    												responceSize = toatalDataBytesToReceived + 3;
00003e  7868              LDRB     r0,[r5,#1]  ; toatalDataBytesToReceived
000040  1cc0              ADDS     r0,r0,#3
000042  70a8              STRB     r0,[r5,#2]
;;;390    												masterCommand[11] = totalRegsToRead;
000044  7828              LDRB     r0,[r5,#0]  ; totalRegsToRead
000046  493d              LDR      r1,|L6.316|
000048  3124              ADDS     r1,r1,#0x24
00004a  72c8              STRB     r0,[r1,#0xb]
                  |L6.76|
;;;391    											}
;;;392    											dataReceiving = 0;
00004c  61af              STR      r7,[r5,#0x18]  ; dataReceiving
;;;393    											arrayIndex = 0;
00004e  616f              STR      r7,[r5,#0x14]  ; arrayIndex
                  |L6.80|
;;;394    										}
;;;395    								}
;;;396    							if(arrayIndex == 2)
000050  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000052  2802              CMP      r0,#2
000054  d104              BNE      |L6.96|
;;;397    								{
;;;398    									if(u8InChar != toatalDataBytesToReceived)
000056  7868              LDRB     r0,[r5,#1]  ; toatalDataBytesToReceived
000058  4284              CMP      r4,r0
00005a  d001              BEQ      |L6.96|
;;;399    										{
;;;400    											dataReceiving = 0;
00005c  61af              STR      r7,[r5,#0x18]  ; dataReceiving
;;;401    											arrayIndex = 0;
00005e  616f              STR      r7,[r5,#0x14]  ; arrayIndex
                  |L6.96|
;;;402    										}
;;;403    								}
;;;404    							if(dataReceiving == 1)
000060  69a8              LDR      r0,[r5,#0x18]  ; dataReceiving
000062  2801              CMP      r0,#1
000064  d102              BNE      |L6.108|
;;;405    								arrayIndex = arrayIndex + 1;
000066  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000068  1c40              ADDS     r0,r0,#1
00006a  6168              STR      r0,[r5,#0x14]  ; arrayIndex
                  |L6.108|
;;;406    							if(arrayIndex == responceSize)
00006c  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
00006e  78a9              LDRB     r1,[r5,#2]  ; responceSize
000070  4288              CMP      r0,r1
000072  d121              BNE      |L6.184|
;;;407    								{
;;;408    									dataReceiving = 0;
000074  61af              STR      r7,[r5,#0x18]  ; dataReceiving
;;;409    									arrayIndex = 0;
000076  616f              STR      r7,[r5,#0x14]  ; arrayIndex
;;;410    									First_Reg_L = (3 * boardID) + (boardID - 1);
000078  78e8              LDRB     r0,[r5,#3]  ; boardID
00007a  0041              LSLS     r1,r0,#1
00007c  1840              ADDS     r0,r0,r1
00007e  78e9              LDRB     r1,[r5,#3]  ; boardID
000080  1840              ADDS     r0,r0,r1
000082  1e40              SUBS     r0,r0,#1
000084  7128              STRB     r0,[r5,#4]
;;;411    									First_Reg_H = First_Reg_L + 1;
000086  7928              LDRB     r0,[r5,#4]  ; First_Reg_L
000088  1c40              ADDS     r0,r0,#1
00008a  7168              STRB     r0,[r5,#5]
;;;412    									Second_Reg_L = First_Reg_H + 1;
00008c  7968              LDRB     r0,[r5,#5]  ; First_Reg_H
00008e  1c40              ADDS     r0,r0,#1
000090  71a8              STRB     r0,[r5,#6]
;;;413    									Second_Reg_H = Second_Reg_L + 1;
000092  79a8              LDRB     r0,[r5,#6]  ; Second_Reg_L
000094  1c40              ADDS     r0,r0,#1
000096  71e8              STRB     r0,[r5,#7]
;;;414    									setPort_4(responce[First_Reg_H]);
000098  7968              LDRB     r0,[r5,#5]  ; First_Reg_H
00009a  5c30              LDRB     r0,[r6,r0]
00009c  f7fffffe          BL       setPort_4
;;;415    									setPort_2(responce[First_Reg_L]);
0000a0  7928              LDRB     r0,[r5,#4]  ; First_Reg_L
0000a2  5c30              LDRB     r0,[r6,r0]
0000a4  f7fffffe          BL       setPort_2
;;;416    									setPort_3(responce[Second_Reg_H]);
0000a8  79e8              LDRB     r0,[r5,#7]  ; Second_Reg_H
0000aa  5c30              LDRB     r0,[r6,r0]
0000ac  f7fffffe          BL       setPort_3
;;;417    									setPort_1(responce[Second_Reg_L]);
0000b0  79a8              LDRB     r0,[r5,#6]  ; Second_Reg_L
0000b2  5c30              LDRB     r0,[r6,r0]
0000b4  f7fffffe          BL       setPort_1
                  |L6.184|
;;;418    								}
;;;419    						}
;;;420    					if(u8InChar == 0x01 && dataReceiving == 0)
0000b8  2c01              CMP      r4,#1
0000ba  d109              BNE      |L6.208|
0000bc  69a8              LDR      r0,[r5,#0x18]  ; dataReceiving
0000be  2800              CMP      r0,#0
0000c0  d106              BNE      |L6.208|
;;;421    						{
;;;422    							responce[arrayIndex] = u8InChar;
0000c2  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
0000c4  5434              STRB     r4,[r6,r0]
;;;423    							dataReceiving = 1;
0000c6  2001              MOVS     r0,#1
0000c8  61a8              STR      r0,[r5,#0x18]  ; dataReceiving
;;;424    							arrayIndex = arrayIndex + 1;
0000ca  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
0000cc  1c40              ADDS     r0,r0,#1
0000ce  6168              STR      r0,[r5,#0x14]  ; arrayIndex
                  |L6.208|
;;;425    						}
;;;426    
;;;427    					/* Check if buffer full */
;;;428    					if(g_u32comRbytes < RXBUFSIZE)
0000d0  68a8              LDR      r0,[r5,#8]  ; g_u32comRbytes
0000d2  2101              MOVS     r1,#1
0000d4  0289              LSLS     r1,r1,#10
0000d6  4288              CMP      r0,r1
0000d8  d20e              BCS      |L6.248|
;;;429    						{
;;;430    								/* Enqueue the character */
;;;431    								g_u8RecData[g_u32comRtail] = u8InChar;
0000da  4819              LDR      r0,|L6.320|
0000dc  6929              LDR      r1,[r5,#0x10]  ; g_u32comRtail
0000de  5444              STRB     r4,[r0,r1]
;;;432    								g_u32comRtail = (g_u32comRtail == (RXBUFSIZE - 1)) ? 0 : (g_u32comRtail + 1);
0000e0  6929              LDR      r1,[r5,#0x10]  ; g_u32comRtail
0000e2  4818              LDR      r0,|L6.324|
0000e4  4281              CMP      r1,r0
0000e6  d101              BNE      |L6.236|
0000e8  2000              MOVS     r0,#0
0000ea  e001              B        |L6.240|
                  |L6.236|
0000ec  6928              LDR      r0,[r5,#0x10]  ; g_u32comRtail
0000ee  1c40              ADDS     r0,r0,#1
                  |L6.240|
0000f0  6128              STR      r0,[r5,#0x10]  ; g_u32comRtail
;;;433    								g_u32comRbytes++;
0000f2  68a8              LDR      r0,[r5,#8]  ; g_u32comRbytes
0000f4  1c40              ADDS     r0,r0,#1
0000f6  60a8              STR      r0,[r5,#8]  ; g_u32comRbytes
                  |L6.248|
0000f8  480e              LDR      r0,|L6.308|
0000fa  69c1              LDR      r1,[r0,#0x1c]         ;374
0000fc  07c9              LSLS     r1,r1,#31             ;374
0000fe  d18a              BNE      |L6.22|
                  |L6.256|
;;;434    						}
;;;435    				}
;;;436    		}
;;;437    
;;;438    	if(u32IntSts & UART_ISR_THRE_INT_Msk)
000100  9800              LDR      r0,[sp,#0]
000102  0580              LSLS     r0,r0,#22
000104  d515              BPL      |L6.306|
;;;439    		{
;;;440    			uint16_t tmp;
;;;441    			tmp = g_u32comRtail;
000106  6928              LDR      r0,[r5,#0x10]  ; g_u32comRtail
;;;442    			if(g_u32comRhead != tmp)
000108  68e9              LDR      r1,[r5,#0xc]  ; g_u32comRhead
00010a  b280              UXTH     r0,r0                 ;441
00010c  4281              CMP      r1,r0
00010e  d010              BEQ      |L6.306|
;;;443    				{
;;;444    						u8InChar = g_u8RecData[g_u32comRhead];
000110  68e8              LDR      r0,[r5,#0xc]  ; g_u32comRhead
000112  4808              LDR      r0,|L6.308|
                  |L6.276|
;;;445    						while(UART_IS_TX_FULL(UART0));  /* Wait Tx is not full to transmit data */
000114  6981              LDR      r1,[r0,#0x18]
000116  0209              LSLS     r1,r1,#8
000118  d4fc              BMI      |L6.276|
;;;446    						g_u32comRhead = (g_u32comRhead == (RXBUFSIZE - 1)) ? 0 : (g_u32comRhead + 1);
00011a  68e9              LDR      r1,[r5,#0xc]  ; g_u32comRhead
00011c  4809              LDR      r0,|L6.324|
00011e  4281              CMP      r1,r0
000120  d101              BNE      |L6.294|
000122  2000              MOVS     r0,#0
000124  e001              B        |L6.298|
                  |L6.294|
000126  68e8              LDR      r0,[r5,#0xc]  ; g_u32comRhead
000128  1c40              ADDS     r0,r0,#1
                  |L6.298|
00012a  60e8              STR      r0,[r5,#0xc]  ; g_u32comRhead
;;;447    						g_u32comRbytes--;
00012c  68a8              LDR      r0,[r5,#8]  ; g_u32comRbytes
00012e  1e40              SUBS     r0,r0,#1
000130  60a8              STR      r0,[r5,#8]  ; g_u32comRbytes
                  |L6.306|
;;;448    				}
;;;449    		}
;;;450    }
000132  bdf8              POP      {r3-r7,pc}
;;;451    
                          ENDP

                  |L6.308|
                          DCD      0x40050000
                  |L6.312|
                          DCD      ||.bss||+0x400
                  |L6.316|
                          DCD      ||.data||
                  |L6.320|
                          DCD      ||.bss||
                  |L6.324|
                          DCD      0x000003ff

                          AREA ||i.delay||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;50     
;;;51     void delay(uint32_t count)
000000  4904              LDR      r1,|L7.20|
;;;52     {
;;;53     	for(i = 0; i < count; i++);
000002  2200              MOVS     r2,#0
                  |L7.4|
000004  620a              STR      r2,[r1,#0x20]  ; i
000006  6a0a              LDR      r2,[r1,#0x20]  ; i
000008  4282              CMP      r2,r0
00000a  d202              BCS      |L7.18|
00000c  6a0a              LDR      r2,[r1,#0x20]  ; i
00000e  1c52              ADDS     r2,r2,#1
000010  e7f8              B        |L7.4|
                  |L7.18|
;;;54     }
000012  4770              BX       lr
;;;55     
                          ENDP

                  |L7.20|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;473    /*---------------------------------------------------------------------------------------------------------*/
;;;474    int main(void)
000000  2059              MOVS     r0,#0x59
000002  2116              MOVS     r1,#0x16
000004  4c32              LDR      r4,|L8.208|
000006  2288              MOVS     r2,#0x88
000008  e002              B        |L8.16|
                  |L8.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6021              STR      r1,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
                  |L8.16|
000010  6823              LDR      r3,[r4,#0]
000012  2b01              CMP      r3,#1
000014  d1f9              BNE      |L8.10|
;;;475    	{
;;;476    			/* Unlock protected registers */
;;;477    			SYS_UnlockReg();
;;;478    
;;;479    			/* Init System, peripheral clock and multi-function I/O */
;;;480    			SYS_Init();
000016  f7fffffe          BL       SYS_Init
00001a  2600              MOVS     r6,#0
00001c  6026              STR      r6,[r4,#0]
;;;481    
;;;482    			/* Lock protected registers */
;;;483    			SYS_LockReg();
;;;484    		
;;;485    			/* Init UART0 for printf */
;;;486    			UART0_Init();	
00001e  f7fffffe          BL       UART0_Init
;;;487    			
;;;488    			/* Open Timer0 frequency to 8 Hz in periodic mode, and enable interrupt */
;;;489    			TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 8);
000022  4c2c              LDR      r4,|L8.212|
000024  2208              MOVS     r2,#8
000026  0611              LSLS     r1,r2,#24
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       TIMER_Open
00002e  6820              LDR      r0,[r4,#0]
000030  0361              LSLS     r1,r4,#13
000032  4308              ORRS     r0,r0,r1
000034  6020              STR      r0,[r4,#0]
000036  4d28              LDR      r5,|L8.216|
000038  1548              ASRS     r0,r1,#21
00003a  6028              STR      r0,[r5,#0]
00003c  6820              LDR      r0,[r4,#0]
00003e  0049              LSLS     r1,r1,#1
000040  4308              ORRS     r0,r0,r1
000042  6020              STR      r0,[r4,#0]
;;;490    			TIMER_EnableInt(TIMER0);
;;;491    
;;;492    			/* Enable Timer0 ~ Timer3 NVIC */
;;;493    			NVIC_EnableIRQ(TMR0_IRQn);
;;;494    
;;;495    			/* Start Timer0 ~ Timer3 counting */
;;;496    			TIMER_Start(TIMER0);
;;;497    
;;;498    			GPIO_SetMode(P0, BIT0 | BIT1 | BIT4 | BIT5 | BIT6, GPIO_PMD_INPUT);
000044  4c25              LDR      r4,|L8.220|
000046  2200              MOVS     r2,#0
000048  2173              MOVS     r1,#0x73
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_SetMode
;;;499    			GPIO_SetMode(P0, BIT7, GPIO_PMD_OUTPUT);
000050  2201              MOVS     r2,#1
000052  2180              MOVS     r1,#0x80
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       GPIO_SetMode
;;;500    			GPIO_SetMode(P1, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
00005a  4820              LDR      r0,|L8.220|
00005c  2201              MOVS     r2,#1
00005e  21ff              MOVS     r1,#0xff
000060  3040              ADDS     r0,r0,#0x40
000062  f7fffffe          BL       GPIO_SetMode
;;;501    			GPIO_SetMode(P2, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000066  481d              LDR      r0,|L8.220|
000068  2201              MOVS     r2,#1
00006a  21ff              MOVS     r1,#0xff
00006c  3080              ADDS     r0,r0,#0x80
00006e  f7fffffe          BL       GPIO_SetMode
;;;502    			GPIO_SetMode(P3, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000072  481a              LDR      r0,|L8.220|
000074  2201              MOVS     r2,#1
000076  21ff              MOVS     r1,#0xff
000078  30c0              ADDS     r0,r0,#0xc0
00007a  f7fffffe          BL       GPIO_SetMode
;;;503    			GPIO_SetMode(P4, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
00007e  2201              MOVS     r2,#1
000080  21ff              MOVS     r1,#0xff
000082  4817              LDR      r0,|L8.224|
000084  f7fffffe          BL       GPIO_SetMode
;;;504    			
;;;505    			P07 = 0;
000088  4816              LDR      r0,|L8.228|
00008a  61c6              STR      r6,[r0,#0x1c]
;;;506    			
;;;507    			GetBoardID();
00008c  f7fffffe          BL       GetBoardID
;;;508    			
;;;509    			setPort_4(0x00);
000090  2000              MOVS     r0,#0
000092  f7fffffe          BL       setPort_4
;;;510    			setPort_2(0x00);
000096  2000              MOVS     r0,#0
000098  f7fffffe          BL       setPort_2
;;;511    			setPort_3(0x00);
00009c  2000              MOVS     r0,#0
00009e  f7fffffe          BL       setPort_3
;;;512    			setPort_1(0x00);
0000a2  2000              MOVS     r0,#0
0000a4  f7fffffe          BL       setPort_1
;;;513    			
;;;514    			//Variable Initialization
;;;515    			toatalDataBytesToReceived = 2 * totalRegsToRead;
0000a8  480f              LDR      r0,|L8.232|
0000aa  7801              LDRB     r1,[r0,#0]  ; totalRegsToRead
0000ac  0049              LSLS     r1,r1,#1
0000ae  7041              STRB     r1,[r0,#1]
;;;516    			responceSize = toatalDataBytesToReceived + 3;
0000b0  7841              LDRB     r1,[r0,#1]  ; toatalDataBytesToReceived
0000b2  1cc9              ADDS     r1,r1,#3
0000b4  7081              STRB     r1,[r0,#2]
;;;517    			masterCommand[11] = totalRegsToRead;
0000b6  7800              LDRB     r0,[r0,#0]  ; totalRegsToRead
0000b8  490b              LDR      r1,|L8.232|
0000ba  3124              ADDS     r1,r1,#0x24
0000bc  72c8              STRB     r0,[r1,#0xb]
;;;518    			
;;;519    			/* Enable Interrupt and install the call back function */
;;;520    			UART_ENABLE_INT(UART0, (UART_IER_RDA_IEN_Msk | UART_IER_THRE_IEN_Msk | UART_IER_RTO_IEN_Msk));
0000be  480b              LDR      r0,|L8.236|
0000c0  6841              LDR      r1,[r0,#4]
0000c2  2213              MOVS     r2,#0x13
0000c4  4311              ORRS     r1,r1,r2
0000c6  6041              STR      r1,[r0,#4]
0000c8  2001              MOVS     r0,#1
0000ca  0300              LSLS     r0,r0,#12
0000cc  6028              STR      r0,[r5,#0]
                  |L8.206|
;;;521    			NVIC_EnableIRQ(UART0_IRQn);
;;;522    			
;;;523    			while(1)
0000ce  e7fe              B        |L8.206|
;;;524    				{
;;;525    					
;;;526    				}
;;;527    	}
;;;528    
                          ENDP

                  |L8.208|
                          DCD      0x50000100
                  |L8.212|
                          DCD      0x40010000
                  |L8.216|
                          DCD      0xe000e100
                  |L8.220|
                          DCD      0x50004000
                  |L8.224|
                          DCD      0x50004100
                  |L8.228|
                          DCD      0x50004200
                  |L8.232|
                          DCD      ||.data||
                  |L8.236|
                          DCD      0x40050000

                          AREA ||i.setPort_1||, CODE, READONLY, ALIGN=2

                  setPort_1 PROC
;;;55     
;;;56     void setPort_1(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;57     {
;;;58     	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;59     	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;60     		P10 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L9.160|
000012  2c00              CMP      r4,#0                 ;59
000014  d001              BEQ      |L9.26|
000016  620a              STR      r2,[r1,#0x20]
000018  e000              B        |L9.28|
                  |L9.26|
;;;61     	else
;;;62     		P10 = 0;
00001a  620b              STR      r3,[r1,#0x20]
                  |L9.28|
;;;63     	
;;;64     	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;65     	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L9.46|
;;;66     		P11 = 1;
00002a  624a              STR      r2,[r1,#0x24]
00002c  e000              B        |L9.48|
                  |L9.46|
;;;67     	else
;;;68     		P11 = 0;
00002e  624b              STR      r3,[r1,#0x24]
                  |L9.48|
;;;69     	
;;;70     	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;71     	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L9.64|
;;;72     		P12 = 1;
00003c  628a              STR      r2,[r1,#0x28]
00003e  e000              B        |L9.66|
                  |L9.64|
;;;73     	else
;;;74     		P12 = 0;
000040  628b              STR      r3,[r1,#0x28]
                  |L9.66|
;;;75     	
;;;76     	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;77     	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L9.82|
;;;78     		P13 = 1;
00004e  62ca              STR      r2,[r1,#0x2c]
000050  e000              B        |L9.84|
                  |L9.82|
;;;79     	else
;;;80     		P13 = 0;
000052  62cb              STR      r3,[r1,#0x2c]
                  |L9.84|
;;;81     	
;;;82     	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;83     	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L9.100|
;;;84     		P14 = 1;
000060  630a              STR      r2,[r1,#0x30]
000062  e000              B        |L9.102|
                  |L9.100|
;;;85     	else
;;;86     		P14 = 0;
000064  630b              STR      r3,[r1,#0x30]
                  |L9.102|
;;;87     	
;;;88     	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;89     	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L9.118|
;;;90     		P15 = 1;
000072  634a              STR      r2,[r1,#0x34]
000074  e000              B        |L9.120|
                  |L9.118|
;;;91     	else
;;;92     		P15 = 0;
000076  634b              STR      r3,[r1,#0x34]
                  |L9.120|
;;;93     	
;;;94     	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;95     	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L9.136|
;;;96     		P16 = 1;
000084  638a              STR      r2,[r1,#0x38]
000086  e000              B        |L9.138|
                  |L9.136|
;;;97     	else
;;;98     		P16 = 0;
000088  638b              STR      r3,[r1,#0x38]
                  |L9.138|
;;;99     	
;;;100    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;101    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L9.154|
;;;102    		P17 = 1;
000096  63ca              STR      r2,[r1,#0x3c]
;;;103    	else
;;;104    		P17 = 0;
;;;105    }
000098  bd38              POP      {r3-r5,pc}
                  |L9.154|
00009a  63cb              STR      r3,[r1,#0x3c]         ;104
00009c  bd38              POP      {r3-r5,pc}
;;;106    
                          ENDP

00009e  0000              DCW      0x0000
                  |L9.160|
                          DCD      0x50004200

                          AREA ||i.setPort_2||, CODE, READONLY, ALIGN=2

                  setPort_2 PROC
;;;106    
;;;107    void setPort_2(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;108    {
;;;109    	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;110    	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;111    		P20 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L10.160|
000012  2c00              CMP      r4,#0                 ;110
000014  d001              BEQ      |L10.26|
000016  600a              STR      r2,[r1,#0]
000018  e000              B        |L10.28|
                  |L10.26|
;;;112    	else
;;;113    		P20 = 0;
00001a  600b              STR      r3,[r1,#0]
                  |L10.28|
;;;114    	
;;;115    	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;116    	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L10.46|
;;;117    		P21 = 1;
00002a  604a              STR      r2,[r1,#4]
00002c  e000              B        |L10.48|
                  |L10.46|
;;;118    	else
;;;119    		P21 = 0;
00002e  604b              STR      r3,[r1,#4]
                  |L10.48|
;;;120    	
;;;121    	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;122    	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L10.64|
;;;123    		P22 = 1;
00003c  608a              STR      r2,[r1,#8]
00003e  e000              B        |L10.66|
                  |L10.64|
;;;124    	else
;;;125    		P22 = 0;
000040  608b              STR      r3,[r1,#8]
                  |L10.66|
;;;126    	
;;;127    	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;128    	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L10.82|
;;;129    		P23 = 1;
00004e  60ca              STR      r2,[r1,#0xc]
000050  e000              B        |L10.84|
                  |L10.82|
;;;130    	else
;;;131    		P23 = 0;
000052  60cb              STR      r3,[r1,#0xc]
                  |L10.84|
;;;132    	
;;;133    	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;134    	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L10.100|
;;;135    		P24 = 1;
000060  610a              STR      r2,[r1,#0x10]
000062  e000              B        |L10.102|
                  |L10.100|
;;;136    	else
;;;137    		P24 = 0;
000064  610b              STR      r3,[r1,#0x10]
                  |L10.102|
;;;138    	
;;;139    	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;140    	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L10.118|
;;;141    		P25 = 1;
000072  614a              STR      r2,[r1,#0x14]
000074  e000              B        |L10.120|
                  |L10.118|
;;;142    	else
;;;143    		P25 = 0;
000076  614b              STR      r3,[r1,#0x14]
                  |L10.120|
;;;144    	
;;;145    	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;146    	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L10.136|
;;;147    		P26 = 1;
000084  618a              STR      r2,[r1,#0x18]
000086  e000              B        |L10.138|
                  |L10.136|
;;;148    	else
;;;149    		P26 = 0;
000088  618b              STR      r3,[r1,#0x18]
                  |L10.138|
;;;150    	
;;;151    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;152    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L10.154|
;;;153    		P27 = 1;
000096  61ca              STR      r2,[r1,#0x1c]
;;;154    	else
;;;155    		P27 = 0;
;;;156    }
000098  bd38              POP      {r3-r5,pc}
                  |L10.154|
00009a  61cb              STR      r3,[r1,#0x1c]         ;155
00009c  bd38              POP      {r3-r5,pc}
;;;157    
                          ENDP

00009e  0000              DCW      0x0000
                  |L10.160|
                          DCD      0x50004240

                          AREA ||i.setPort_3||, CODE, READONLY, ALIGN=2

                  setPort_3 PROC
;;;157    
;;;158    void setPort_3(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;159    {
;;;160    	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;161    	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;162    		P30 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L11.160|
000012  2c00              CMP      r4,#0                 ;161
000014  d001              BEQ      |L11.26|
000016  620a              STR      r2,[r1,#0x20]
000018  e000              B        |L11.28|
                  |L11.26|
;;;163    	else
;;;164    		P30 = 0;
00001a  620b              STR      r3,[r1,#0x20]
                  |L11.28|
;;;165    	
;;;166    	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;167    	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L11.46|
;;;168    		P31 = 1;
00002a  624a              STR      r2,[r1,#0x24]
00002c  e000              B        |L11.48|
                  |L11.46|
;;;169    	else
;;;170    		P31 = 0;
00002e  624b              STR      r3,[r1,#0x24]
                  |L11.48|
;;;171    	
;;;172    	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;173    	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L11.64|
;;;174    		P32 = 1;
00003c  628a              STR      r2,[r1,#0x28]
00003e  e000              B        |L11.66|
                  |L11.64|
;;;175    	else
;;;176    		P32 = 0;
000040  628b              STR      r3,[r1,#0x28]
                  |L11.66|
;;;177    	
;;;178    	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;179    	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L11.82|
;;;180    		P33 = 1;
00004e  62ca              STR      r2,[r1,#0x2c]
000050  e000              B        |L11.84|
                  |L11.82|
;;;181    	else
;;;182    		P33 = 0;
000052  62cb              STR      r3,[r1,#0x2c]
                  |L11.84|
;;;183    	
;;;184    	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;185    	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L11.100|
;;;186    		P34 = 1;
000060  630a              STR      r2,[r1,#0x30]
000062  e000              B        |L11.102|
                  |L11.100|
;;;187    	else
;;;188    		P34 = 0;
000064  630b              STR      r3,[r1,#0x30]
                  |L11.102|
;;;189    	
;;;190    	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;191    	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L11.118|
;;;192    		P35 = 1;
000072  634a              STR      r2,[r1,#0x34]
000074  e000              B        |L11.120|
                  |L11.118|
;;;193    	else
;;;194    		P35 = 0;
000076  634b              STR      r3,[r1,#0x34]
                  |L11.120|
;;;195    	
;;;196    	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;197    	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L11.136|
;;;198    		P36 = 1;
000084  638a              STR      r2,[r1,#0x38]
000086  e000              B        |L11.138|
                  |L11.136|
;;;199    	else
;;;200    		P36 = 0;
000088  638b              STR      r3,[r1,#0x38]
                  |L11.138|
;;;201    	
;;;202    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;203    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L11.154|
;;;204    		P37 = 1;
000096  63ca              STR      r2,[r1,#0x3c]
;;;205    	else
;;;206    		P37 = 0;
;;;207    }
000098  bd38              POP      {r3-r5,pc}
                  |L11.154|
00009a  63cb              STR      r3,[r1,#0x3c]         ;206
00009c  bd38              POP      {r3-r5,pc}
;;;208    
                          ENDP

00009e  0000              DCW      0x0000
                  |L11.160|
                          DCD      0x50004240

                          AREA ||i.setPort_4||, CODE, READONLY, ALIGN=2

                  setPort_4 PROC
;;;208    
;;;209    void setPort_4(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;210    {
;;;211    	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;212    	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;213    		P40 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L12.160|
000012  2c00              CMP      r4,#0                 ;212
000014  d001              BEQ      |L12.26|
000016  600a              STR      r2,[r1,#0]
000018  e000              B        |L12.28|
                  |L12.26|
;;;214    	else
;;;215    		P40 = 0;
00001a  600b              STR      r3,[r1,#0]
                  |L12.28|
;;;216    	
;;;217    	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;218    	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L12.46|
;;;219    		P41 = 1;
00002a  604a              STR      r2,[r1,#4]
00002c  e000              B        |L12.48|
                  |L12.46|
;;;220    	else
;;;221    		P41 = 0;
00002e  604b              STR      r3,[r1,#4]
                  |L12.48|
;;;222    	
;;;223    	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;224    	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L12.64|
;;;225    		P42 = 1;
00003c  608a              STR      r2,[r1,#8]
00003e  e000              B        |L12.66|
                  |L12.64|
;;;226    	else
;;;227    		P42 = 0;
000040  608b              STR      r3,[r1,#8]
                  |L12.66|
;;;228    	
;;;229    	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;230    	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L12.82|
;;;231    		P43 = 1;
00004e  60ca              STR      r2,[r1,#0xc]
000050  e000              B        |L12.84|
                  |L12.82|
;;;232    	else
;;;233    		P43 = 0;
000052  60cb              STR      r3,[r1,#0xc]
                  |L12.84|
;;;234    	
;;;235    	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;236    	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L12.100|
;;;237    		P44 = 1;
000060  610a              STR      r2,[r1,#0x10]
000062  e000              B        |L12.102|
                  |L12.100|
;;;238    	else
;;;239    		P44 = 0;
000064  610b              STR      r3,[r1,#0x10]
                  |L12.102|
;;;240    	
;;;241    	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;242    	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L12.118|
;;;243    		P45 = 1;
000072  614a              STR      r2,[r1,#0x14]
000074  e000              B        |L12.120|
                  |L12.118|
;;;244    	else
;;;245    		P45 = 0;
000076  614b              STR      r3,[r1,#0x14]
                  |L12.120|
;;;246    	
;;;247    	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;248    	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L12.136|
;;;249    		P46 = 1;
000084  618a              STR      r2,[r1,#0x18]
000086  e000              B        |L12.138|
                  |L12.136|
;;;250    	else
;;;251    		P46 = 0;
000088  618b              STR      r3,[r1,#0x18]
                  |L12.138|
;;;252    	
;;;253    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;254    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L12.154|
;;;255    		P47 = 1;
000096  61ca              STR      r2,[r1,#0x1c]
;;;256    	else
;;;257    		P47 = 0;
;;;258    }
000098  bd38              POP      {r3-r5,pc}
                  |L12.154|
00009a  61cb              STR      r3,[r1,#0x1c]         ;257
00009c  bd38              POP      {r3-r5,pc}
;;;259    
                          ENDP

00009e  0000              DCW      0x0000
                  |L12.160|
                          DCD      0x50004280

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_u8RecData
                          %        1024
                  responce
                          %        107

                          AREA ||.data||, DATA, ALIGN=2

                  totalRegsToRead
000000  34                DCB      0x34
                  toatalDataBytesToReceived
000001  68                DCB      0x68
                  responceSize
000002  6b                DCB      0x6b
                  boardID
000003  00                DCB      0x00
                  First_Reg_L
000004  00                DCB      0x00
                  First_Reg_H
000005  00                DCB      0x00
                  Second_Reg_L
000006  00                DCB      0x00
                  Second_Reg_H
000007  00                DCB      0x00
                  g_u32comRbytes
                          DCD      0x00000000
                  g_u32comRhead
                          DCD      0x00000000
                  g_u32comRtail
                          DCD      0x00000000
                  arrayIndex
                          DCD      0x00000000
                  dataReceiving
                          DCD      0x00000000
                  seconds
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  masterCommand
000024  00010000          DCB      0x00,0x01,0x00,0x00
000028  00060103          DCB      0x00,0x06,0x01,0x03
00002c  00010034          DCB      0x00,0x01,0x00,0x34

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a80fc96b____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_a80fc96b____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a80fc96b____REVSH|
#line 132
|__asm___6_main_c_a80fc96b____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
