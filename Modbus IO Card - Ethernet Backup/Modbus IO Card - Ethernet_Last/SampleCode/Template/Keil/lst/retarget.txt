; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xAN\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\retarget.crf ..\..\..\Library\StdDriver\src\retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;488     */
;;;489    char GetChar(void)
000000  4803              LDR      r0,|L1.16|
                  |L1.2|
;;;490    {
;;;491    #ifdef DEBUG_ENABLE_SEMIHOST
;;;492    # if defined (__CC_ARM)
;;;493        int nRet;
;;;494        while(SH_DoCommand(0x101, 0, &nRet) != 0)
;;;495        {
;;;496            if(nRet != 0)
;;;497            {
;;;498                SH_DoCommand(0x07, 0, &nRet);
;;;499                return (char)nRet;
;;;500            }
;;;501        }
;;;502    # else
;;;503        int nRet;
;;;504        while(SH_DoCommand(0x7, 0, &nRet) != 0)
;;;505        {
;;;506            if(nRet != 0)
;;;507                return (char)nRet;
;;;508        }
;;;509    # endif
;;;510        return (0);
;;;511    #else
;;;512    
;;;513        while(1)
;;;514        {
;;;515            if((DEBUG_PORT->FSR & UART_FSR_RX_EMPTY_Msk) == 0)
000002  6981              LDR      r1,[r0,#0x18]
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L1.2|
;;;516            {
;;;517                return (DEBUG_PORT->DATA);
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;518            }
;;;519        }
;;;520    
;;;521    #endif
;;;522    }
00000c  4770              BX       lr
;;;523    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40050000

                          AREA ||i.Hard_Fault_Handler||, CODE, READONLY, ALIGN=2

                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;63      */
;;;64     void Hard_Fault_Handler(uint32_t stack[])
000000  4604              MOV      r4,r0
;;;65     {
;;;66         printf("In Hard Fault Handler\n");
000002  a003              ADR      r0,|L2.16|
000004  f7fffffe          BL       __2printf
;;;67     
;;;68         stackDump(stack);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       stackDump
                  |L2.14|
;;;69     
;;;70         // Replace while(1) with chip reset if WDT is not enabled for end product
;;;71         while(1);
00000e  e7fe              B        |L2.14|
;;;72         //SYS->IPRSTC1 = SYS_IPRSTC1_CHIP_RST_Msk;
;;;73     }
;;;74     
                          ENDP

                  |L2.16|
000010  496e2048          DCB      "In Hard Fault Handler\n",0
000014  61726420
000018  4661756c
00001c  74204861
000020  6e646c65
000024  720a00  
000027  00                DCB      0

                          AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

                  IsDebugFifoEmpty PROC
;;;549    
;;;550    int IsDebugFifoEmpty(void)
000000  4802              LDR      r0,|L3.12|
;;;551    {
;;;552        return ((DEBUG_PORT->FSR & UART_FSR_TE_FLAG_Msk) != 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  00c0              LSLS     r0,r0,#3
000006  0fc0              LSRS     r0,r0,#31
;;;553    }
000008  4770              BX       lr
;;;554    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=1

                  SendChar PROC
;;;456     */
;;;457    void SendChar(int ch)
000000  b500              PUSH     {lr}
;;;458    {
;;;459    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;460        g_buf[g_buf_len++] = ch;
;;;461        g_buf[g_buf_len] = '\0';
;;;462        if(g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;463        {
;;;464            /* Send the char */
;;;465            if(SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;466            {
;;;467                g_buf_len = 0;
;;;468                return;
;;;469            }
;;;470            else
;;;471            {
;;;472                g_buf_len = 0;
;;;473            }
;;;474        }
;;;475    #else
;;;476        SendChar_ToUART(ch);
000002  f7fffffe          BL       SendChar_ToUART
;;;477    #endif
;;;478    }
000006  bd00              POP      {pc}
;;;479    
                          ENDP


                          AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

                  SendChar_ToUART PROC
;;;434    
;;;435    void SendChar_ToUART(int ch)
000000  4906              LDR      r1,|L5.28|
                  |L5.2|
;;;436    {
;;;437    
;;;438        while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_Msk);
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L5.2|
;;;439        if(ch == '\n')
000008  280a              CMP      r0,#0xa
00000a  d104              BNE      |L5.22|
;;;440        {
;;;441            DEBUG_PORT->DATA = '\r';
00000c  220d              MOVS     r2,#0xd
00000e  600a              STR      r2,[r1,#0]
                  |L5.16|
;;;442            while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_Msk);
000010  698a              LDR      r2,[r1,#0x18]
000012  0212              LSLS     r2,r2,#8
000014  d4fc              BMI      |L5.16|
                  |L5.22|
;;;443        }
;;;444    
;;;445        DEBUG_PORT->DATA = ch;
000016  6008              STR      r0,[r1,#0]
;;;446    }
000018  4770              BX       lr
;;;447    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;564    
;;;565    void _ttywrch(int ch)
000000  b500              PUSH     {lr}
000002  f7fffffe          BL       SendChar_ToUART
;;;566    {
;;;567        SendChar(ch);
;;;568        return;
;;;569    }
000006  bd00              POP      {pc}
;;;570    
                          ENDP


                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;660    
;;;661    int ferror(FILE *stream)
000000  2000              MOVS     r0,#0
;;;662    {
;;;663        return EOF;
000002  43c0              MVNS     r0,r0
;;;664    }
000004  4770              BX       lr
;;;665    #endif
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;640    
;;;641    int fgetc(FILE *stream)
000000  b500              PUSH     {lr}
;;;642    {
;;;643        return (GetChar());
000002  f7fffffe          BL       GetChar
;;;644    }
000006  bd00              POP      {pc}
;;;645    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;589    
;;;590    int fputc(int ch, FILE *stream)
000000  b500              PUSH     {lr}
;;;591    {
000002  4603              MOV      r3,r0
000004  f7fffffe          BL       SendChar_ToUART
;;;592        SendChar(ch);
;;;593        return ch;
000008  4618              MOV      r0,r3
;;;594    }
00000a  bd00              POP      {pc}
;;;595    
                          ENDP


                          AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

                  kbhit PROC
;;;534    
;;;535    int kbhit(void)
000000  4802              LDR      r0,|L10.12|
;;;536    {
;;;537        return !((DEBUG_PORT->FSR & UART_FSR_RX_EMPTY_Msk) == 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  0440              LSLS     r0,r0,#17
000006  0fc0              LSRS     r0,r0,#31
;;;538    }
000008  4770              BX       lr
;;;539    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x40050000

                          AREA ||i.stackDump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  stackDump PROC
;;;45      */
;;;46     static void stackDump(uint32_t stack[])
000000  b510              PUSH     {r4,lr}
;;;47     {   
000002  4604              MOV      r4,r0
;;;48         printf("r0  = 0x%x\n", stack[r0]);
000004  6801              LDR      r1,[r0,#0]
000006  a010              ADR      r0,|L11.72|
000008  f7fffffe          BL       __2printf
;;;49         printf("r1  = 0x%x\n", stack[r1]);
00000c  a011              ADR      r0,|L11.84|
00000e  6861              LDR      r1,[r4,#4]
000010  f7fffffe          BL       __2printf
;;;50         printf("r2  = 0x%x\n", stack[r2]);
000014  a012              ADR      r0,|L11.96|
000016  68a1              LDR      r1,[r4,#8]
000018  f7fffffe          BL       __2printf
;;;51         printf("r3  = 0x%x\n", stack[r3]);
00001c  a013              ADR      r0,|L11.108|
00001e  68e1              LDR      r1,[r4,#0xc]
000020  f7fffffe          BL       __2printf
;;;52         printf("r12 = 0x%x\n", stack[r12]);
000024  a014              ADR      r0,|L11.120|
000026  6921              LDR      r1,[r4,#0x10]
000028  f7fffffe          BL       __2printf
;;;53         printf("lr  = 0x%x\n", stack[lr]);
00002c  a015              ADR      r0,|L11.132|
00002e  6961              LDR      r1,[r4,#0x14]
000030  f7fffffe          BL       __2printf
;;;54         printf("pc  = 0x%x\n", stack[pc]);
000034  a016              ADR      r0,|L11.144|
000036  69a1              LDR      r1,[r4,#0x18]
000038  f7fffffe          BL       __2printf
;;;55         printf("psr = 0x%x\n", stack[psr]);
00003c  a017              ADR      r0,|L11.156|
00003e  69e1              LDR      r1,[r4,#0x1c]
000040  f7fffffe          BL       __2printf
;;;56     }
000044  bd10              POP      {r4,pc}
;;;57     
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
000048  72302020          DCB      "r0  = 0x%x\n",0
00004c  3d203078
000050  25780a00
                  |L11.84|
000054  72312020          DCB      "r1  = 0x%x\n",0
000058  3d203078
00005c  25780a00
                  |L11.96|
000060  72322020          DCB      "r2  = 0x%x\n",0
000064  3d203078
000068  25780a00
                  |L11.108|
00006c  72332020          DCB      "r3  = 0x%x\n",0
000070  3d203078
000074  25780a00
                  |L11.120|
000078  72313220          DCB      "r12 = 0x%x\n",0
00007c  3d203078
000080  25780a00
                  |L11.132|
000084  6c722020          DCB      "lr  = 0x%x\n",0
000088  3d203078
00008c  25780a00
                  |L11.144|
000090  70632020          DCB      "pc  = 0x%x\n",0
000094  3d203078
000098  25780a00
                  |L11.156|
00009c  70737220          DCB      "psr = 0x%x\n",0
0000a0  3d203078
0000a4  25780a00

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_retarget_c_d5a1b03f____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REVSH|
#line 132
|__asm___10_retarget_c_d5a1b03f____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 402 "..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 403

 IMPORT Hard_Fault_Handler

 MOVS r0, #4
 MOV r1, LR
 TST r0, r1  
 BEQ Stack_Use_MSP  
 MRS R0, PSP  
 B Get_LR_and_Branch
Stack_Use_MSP
 MRS R0, MSP  
Get_LR_and_Branch
 MOV R1, LR  
 LDR R2,= |Hard_Fault_Handler|  
 BX R2
	ENDP

;*** End   embedded assembler ***
