; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xAN\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GetBoardID||, CODE, READONLY, ALIGN=2

                  GetBoardID PROC
;;;495    	
;;;496    void GetBoardID()
000000  4912              LDR      r1,|L1.76|
;;;497    {
;;;498    	if(P00 == 0)
000002  680a              LDR      r2,[r1,#0]
;;;499    		boardID = boardID | 0x01;
000004  4812              LDR      r0,|L1.80|
000006  2a00              CMP      r2,#0                 ;498
000008  d103              BNE      |L1.18|
00000a  78c2              LDRB     r2,[r0,#3]  ; boardID
00000c  2301              MOVS     r3,#1
00000e  431a              ORRS     r2,r2,r3
000010  70c2              STRB     r2,[r0,#3]
                  |L1.18|
;;;500    	if(P01 == 0)
000012  684a              LDR      r2,[r1,#4]
000014  2a00              CMP      r2,#0
000016  d103              BNE      |L1.32|
;;;501    		boardID = boardID | 0x02;
000018  78c2              LDRB     r2,[r0,#3]  ; boardID
00001a  2302              MOVS     r3,#2
00001c  431a              ORRS     r2,r2,r3
00001e  70c2              STRB     r2,[r0,#3]
                  |L1.32|
;;;502    	if(P04 == 0)
000020  690a              LDR      r2,[r1,#0x10]
000022  2a00              CMP      r2,#0
000024  d103              BNE      |L1.46|
;;;503    		boardID = boardID | 0x04;
000026  78c2              LDRB     r2,[r0,#3]  ; boardID
000028  2304              MOVS     r3,#4
00002a  431a              ORRS     r2,r2,r3
00002c  70c2              STRB     r2,[r0,#3]
                  |L1.46|
;;;504    	if(P05 == 0)
00002e  694a              LDR      r2,[r1,#0x14]
000030  2a00              CMP      r2,#0
000032  d103              BNE      |L1.60|
;;;505    		boardID = boardID | 0x08;
000034  78c2              LDRB     r2,[r0,#3]  ; boardID
000036  2308              MOVS     r3,#8
000038  431a              ORRS     r2,r2,r3
00003a  70c2              STRB     r2,[r0,#3]
                  |L1.60|
;;;506    	if(P06 == 0)
00003c  6989              LDR      r1,[r1,#0x18]
00003e  2900              CMP      r1,#0
000040  d103              BNE      |L1.74|
;;;507    		boardID = boardID | 0x10;
000042  78c1              LDRB     r1,[r0,#3]  ; boardID
000044  2210              MOVS     r2,#0x10
000046  4311              ORRS     r1,r1,r2
000048  70c1              STRB     r1,[r0,#3]
                  |L1.74|
;;;508    }
00004a  4770              BX       lr
;;;509    
                          ENDP

                  |L1.76|
                          DCD      0x50004200
                  |L1.80|
                          DCD      ||.data||

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;324    
;;;325    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;326    {
;;;327        /*---------------------------------------------------------------------------------------------------------*/
;;;328        /* Init System Clock                                                                                       */
;;;329        /*---------------------------------------------------------------------------------------------------------*/
;;;330        /* Enable IRC22M clock */
;;;331        CLK->PWRCON |= CLK_PWRCON_IRC22M_EN_Msk;
000002  4c16              LDR      r4,|L2.92|
000004  6820              LDR      r0,[r4,#0]
000006  2104              MOVS     r1,#4
000008  4308              ORRS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;332    
;;;333        /* Waiting for IRC22M clock ready */
;;;334        CLK_WaitClockReady(CLK_CLKSTATUS_IRC22M_STB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;335    
;;;336        /* Switch HCLK clock source to HIRC */
;;;337        CLK->CLKSEL0 = CLK_CLKSEL0_HCLK_S_HIRC;
000012  2007              MOVS     r0,#7
000014  6120              STR      r0,[r4,#0x10]
;;;338    
;;;339        /* Set PLL to Power-down mode and PLL_STB bit in CLKSTATUS register will be cleared by hardware.*/
;;;340        CLK->PLLCON |= CLK_PLLCON_PD_Msk;
000016  6a20              LDR      r0,[r4,#0x20]
000018  01e1              LSLS     r1,r4,#7
00001a  4308              ORRS     r0,r0,r1
00001c  6220              STR      r0,[r4,#0x20]
;;;341    
;;;342        /* Enable PLL and Set PLL frequency */
;;;343        CLK->PLLCON = PLLCON_SETTING;
00001e  4810              LDR      r0,|L2.96|
000020  6220              STR      r0,[r4,#0x20]
;;;344    
;;;345        /* Waiting for clock ready */
;;;346        CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk | CLK_CLKSTATUS_XTL12M_STB_Msk | CLK_CLKSTATUS_IRC10K_STB_Msk);
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       CLK_WaitClockReady
;;;347    
;;;348        /* Switch HCLK clock source to PLL, STCLK to HCLK/2 */
;;;349        CLK->CLKSEL0 = CLK_CLKSEL0_STCLK_S_HCLK_DIV2 | CLK_CLKSEL0_HCLK_S_PLL;
000028  201a              MOVS     r0,#0x1a
00002a  6120              STR      r0,[r4,#0x10]
;;;350    
;;;351        /* Enable peripheral clock */
;;;352        CLK->APBCLK = CLK_APBCLK_UART0_EN_Msk | CLK_APBCLK_TMR0_EN_Msk;
00002c  480d              LDR      r0,|L2.100|
00002e  60a0              STR      r0,[r4,#8]
;;;353    
;;;354        /* Peripheral clock source */
;;;355        CLK->CLKSEL1 = CLK_CLKSEL1_UART_S_PLL | CLK_CLKSEL1_TMR0_S_HIRC;
000030  480d              LDR      r0,|L2.104|
000032  6160              STR      r0,[r4,#0x14]
;;;356    
;;;357        /* Update System Core Clock */
;;;358        /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;359        SystemCoreClockUpdate();
000034  f7fffffe          BL       SystemCoreClockUpdate
;;;360    
;;;361        /*---------------------------------------------------------------------------------------------------------*/
;;;362        /* Init I/O Multi-function                                                                                 */
;;;363        /*---------------------------------------------------------------------------------------------------------*/
;;;364        /* Set P3 multi-function pins for UART0 RXD, TXD */
;;;365        SYS->P0_MFP &= ~(SYS_MFP_P03_Msk | SYS_MFP_P02_Msk);
000038  2005              MOVS     r0,#5
00003a  0700              LSLS     r0,r0,#28
00003c  6b01              LDR      r1,[r0,#0x30]
00003e  4a0b              LDR      r2,|L2.108|
000040  4011              ANDS     r1,r1,r2
000042  6301              STR      r1,[r0,#0x30]
;;;366        SYS->P0_MFP |= (SYS_MFP_P03_RXD0 | SYS_MFP_P02_TXD0);
000044  6b01              LDR      r1,[r0,#0x30]
000046  43d2              MVNS     r2,r2
000048  4311              ORRS     r1,r1,r2
00004a  6301              STR      r1,[r0,#0x30]
;;;367    		
;;;368    		SYS->P4_MFP &= ~(SYS_MFP_P46_Msk | SYS_MFP_P47_Msk);
00004c  4808              LDR      r0,|L2.112|
00004e  6801              LDR      r1,[r0,#0]
000050  4a08              LDR      r2,|L2.116|
000052  4011              ANDS     r1,r1,r2
000054  6001              STR      r1,[r0,#0]
;;;369        SYS->P4_MFP |= (SYS_MFP_P46_GPIO | SYS_MFP_P47_GPIO);
000056  6801              LDR      r1,[r0,#0]
000058  6001              STR      r1,[r0,#0]
;;;370    }
00005a  bd10              POP      {r4,pc}
;;;371    
                          ENDP

                  |L2.92|
                          DCD      0x50000200
                  |L2.96|
                          DCD      0x00085639
                  |L2.100|
                          DCD      0x00010004
                  |L2.104|
                          DCD      0x01000700
                  |L2.108|
                          DCD      0xfffff3f3
                  |L2.112|
                          DCD      0x50000040
                  |L2.116|
                          DCD      0xffff3f3f

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  TMR0_IRQHandler PROC
;;;290    
;;;291    void TMR0_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  4918              LDR      r1,|L3.100|
000004  6888              LDR      r0,[r1,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;292    	{
00000a  d00f              BEQ      |L3.44|
00000c  2001              MOVS     r0,#1
00000e  6088              STR      r0,[r1,#8]
;;;293    			if(TIMER_GetIntFlag(TIMER0) == 1)
;;;294    				{
;;;295    						TIMER_ClearIntFlag(TIMER0);								
;;;296    						
;;;297    						if(dataReceiving == 0)
000010  4c15              LDR      r4,|L3.104|
000012  69a1              LDR      r1,[r4,#0x18]  ; dataReceiving
000014  2500              MOVS     r5,#0
000016  2900              CMP      r1,#0
000018  d009              BEQ      |L3.46|
;;;298    							{
;;;299    								if(boardID == 1)
;;;300    									{
;;;301    										P07 = 1;
;;;302    										delay(100000);
;;;303    										
;;;304    										for(i = 0; i < 12; i++)
;;;305    											printf("%c", masterCommand[i]);
;;;306    										
;;;307    										arrayIndex = 0;
;;;308    										//delay(100000);
;;;309    										P07 = 0;
;;;310    									}
;;;311    							}	
;;;312    						else
;;;313    							{
;;;314    								seconds = seconds + 1;
00001a  69e0              LDR      r0,[r4,#0x1c]  ; seconds
00001c  1c40              ADDS     r0,r0,#1
00001e  61e0              STR      r0,[r4,#0x1c]  ; seconds
;;;315    								if(seconds > 4)
000020  69e0              LDR      r0,[r4,#0x1c]  ; seconds
000022  2804              CMP      r0,#4
000024  d902              BLS      |L3.44|
;;;316    									{
;;;317    										seconds = 0;
000026  61e5              STR      r5,[r4,#0x1c]  ; seconds
;;;318    										dataReceiving = 0;
000028  61a5              STR      r5,[r4,#0x18]  ; dataReceiving
;;;319    										arrayIndex = 0;
00002a  6165              STR      r5,[r4,#0x14]  ; arrayIndex
                  |L3.44|
;;;320    									}
;;;321    							}										
;;;322    				}
;;;323    	}
00002c  bdf8              POP      {r3-r7,pc}
                  |L3.46|
00002e  78e1              LDRB     r1,[r4,#3]            ;299  ; boardID
000030  2901              CMP      r1,#1                 ;299
000032  d1fb              BNE      |L3.44|
000034  4e0d              LDR      r6,|L3.108|
000036  61f0              STR      r0,[r6,#0x1c]         ;301
000038  480d              LDR      r0,|L3.112|
00003a  f7fffffe          BL       delay
00003e  6225              STR      r5,[r4,#0x20]         ;304  ; i
000040  4f09              LDR      r7,|L3.104|
000042  3724              ADDS     r7,r7,#0x24           ;305
000044  e007              B        |L3.86|
                  |L3.70|
000046  6a20              LDR      r0,[r4,#0x20]         ;305  ; i
000048  5c39              LDRB     r1,[r7,r0]            ;305
00004a  a00a              ADR      r0,|L3.116|
00004c  f7fffffe          BL       __2printf
000050  6a20              LDR      r0,[r4,#0x20]         ;304  ; i
000052  1c40              ADDS     r0,r0,#1              ;304
000054  6220              STR      r0,[r4,#0x20]         ;304  ; i
                  |L3.86|
000056  6a20              LDR      r0,[r4,#0x20]         ;304  ; i
000058  280c              CMP      r0,#0xc               ;304
00005a  d3f4              BCC      |L3.70|
00005c  6165              STR      r5,[r4,#0x14]         ;307  ; arrayIndex
00005e  61f5              STR      r5,[r6,#0x1c]         ;309
000060  bdf8              POP      {r3-r7,pc}
;;;324    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      0x40010000
                  |L3.104|
                          DCD      ||.data||
                  |L3.108|
                          DCD      0x50004200
                  |L3.112|
                          DCD      0x000186a0
                  |L3.116|
000074  256300            DCB      "%c",0
000077  00                DCB      0

                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART0_IRQHandler PROC
;;;473    
;;;474    void UART0_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;475    {	
;;;476    	UART_TEST_HANDLE();
000002  f7fffffe          BL       UART_TEST_HANDLE
;;;477    	/*
;;;478    	if(dataReceiving == 0)
;;;479    		{
;;;480    			if(boardID == 1)
;;;481    				{
;;;482    					P07 = 1;
;;;483    					delay(100000);
;;;484    					
;;;485    					for(i = 0; i < 12; i++)
;;;486    						printf("%c", masterCommand[i]);
;;;487    					
;;;488    					arrayIndex = 0;
;;;489    					delay(100000);
;;;490    					P07 = 0;
;;;491    				}
;;;492    		}
;;;493    	*/
;;;494    }
000006  bd00              POP      {pc}
;;;495    	
                          ENDP


                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;371    
;;;372    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;373    {
;;;374        /*---------------------------------------------------------------------------------------------------------*/
;;;375        /* Init UART                                                                                               */
;;;376        /*---------------------------------------------------------------------------------------------------------*/
;;;377        /* Reset IP */
;;;378        SYS_ResetModule(UART0_RST);
000002  4804              LDR      r0,|L5.20|
000004  f7fffffe          BL       SYS_ResetModule
;;;379    
;;;380        /* Configure UART0 and set UART0 Baudrate */
;;;381        UART_Open(UART0, 38400);
000008  214b              MOVS     r1,#0x4b
00000a  0249              LSLS     r1,r1,#9
00000c  4802              LDR      r0,|L5.24|
00000e  f7fffffe          BL       UART_Open
;;;382    }
000012  bd10              POP      {r4,pc}
;;;383    
                          ENDP

                  |L5.20|
                          DCD      0x04000010
                  |L5.24|
                          DCD      0x40050000

                          AREA ||i.UART_TEST_HANDLE||, CODE, READONLY, ALIGN=2

                  UART_TEST_HANDLE PROC
;;;386    /*---------------------------------------------------------------------------------------------------------*/
;;;387    void UART_TEST_HANDLE()
000000  b5f8              PUSH     {r3-r7,lr}
;;;388    {
;;;389    	uint8_t u8InChar = 0xFF;
;;;390    	uint32_t u32IntSts = UART0->ISR;
000002  484c              LDR      r0,|L6.308|
000004  69c0              LDR      r0,[r0,#0x1c]
;;;391    
;;;392    	if(u32IntSts & UART_ISR_RDA_INT_Msk)
000006  9000              STR      r0,[sp,#0]
000008  05c0              LSLS     r0,r0,#23
00000a  2700              MOVS     r7,#0
;;;393    		{
;;;394    			/* Get all the input characters */
;;;395    			while(UART_IS_RX_READY(UART0))
;;;396    				{
;;;397    					/* Get the character from UART Buffer */
;;;398    					u8InChar = UART_READ(UART0);
;;;399    					if(dataReceiving == 1)
;;;400    						{
;;;401    							responce[arrayIndex] = u8InChar;					
00000c  4e4a              LDR      r6,|L6.312|
00000e  4d4b              LDR      r5,|L6.316|
000010  2800              CMP      r0,#0                 ;392
000012  db71              BLT      |L6.248|
000014  e074              B        |L6.256|
                  |L6.22|
000016  6800              LDR      r0,[r0,#0]            ;398
000018  b2c4              UXTB     r4,r0                 ;398
00001a  69a8              LDR      r0,[r5,#0x18]         ;399  ; dataReceiving
00001c  2801              CMP      r0,#1                 ;399
00001e  d14b              BNE      |L6.184|
000020  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000022  5434              STRB     r4,[r6,r0]
;;;402    							if(arrayIndex == 1)
000024  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000026  2801              CMP      r0,#1
000028  d112              BNE      |L6.80|
;;;403    								{
;;;404    									if(u8InChar != 0x03)
00002a  2c03              CMP      r4,#3
00002c  d010              BEQ      |L6.80|
;;;405    										{
;;;406    											if(u8InChar == 0x83)
00002e  2c83              CMP      r4,#0x83
000030  d10c              BNE      |L6.76|
;;;407    											{
;;;408    												totalRegsToRead = totalRegsToRead - 1;
000032  7828              LDRB     r0,[r5,#0]  ; totalRegsToRead
000034  1e40              SUBS     r0,r0,#1
000036  7028              STRB     r0,[r5,#0]
;;;409    												toatalDataBytesToReceived = 2 * totalRegsToRead;
000038  7828              LDRB     r0,[r5,#0]  ; totalRegsToRead
00003a  0040              LSLS     r0,r0,#1
00003c  7068              STRB     r0,[r5,#1]
;;;410    												responceSize = toatalDataBytesToReceived + 3;
00003e  7868              LDRB     r0,[r5,#1]  ; toatalDataBytesToReceived
000040  1cc0              ADDS     r0,r0,#3
000042  70a8              STRB     r0,[r5,#2]
;;;411    												masterCommand[11] = totalRegsToRead;
000044  7828              LDRB     r0,[r5,#0]  ; totalRegsToRead
000046  493d              LDR      r1,|L6.316|
000048  3124              ADDS     r1,r1,#0x24
00004a  72c8              STRB     r0,[r1,#0xb]
                  |L6.76|
;;;412    											}
;;;413    											dataReceiving = 0;
00004c  61af              STR      r7,[r5,#0x18]  ; dataReceiving
;;;414    											arrayIndex = 0;
00004e  616f              STR      r7,[r5,#0x14]  ; arrayIndex
                  |L6.80|
;;;415    										}
;;;416    								}
;;;417    							if(arrayIndex == 2)
000050  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000052  2802              CMP      r0,#2
000054  d104              BNE      |L6.96|
;;;418    								{
;;;419    									if(u8InChar != toatalDataBytesToReceived)
000056  7868              LDRB     r0,[r5,#1]  ; toatalDataBytesToReceived
000058  4284              CMP      r4,r0
00005a  d001              BEQ      |L6.96|
;;;420    										{
;;;421    											dataReceiving = 0;
00005c  61af              STR      r7,[r5,#0x18]  ; dataReceiving
;;;422    											arrayIndex = 0;
00005e  616f              STR      r7,[r5,#0x14]  ; arrayIndex
                  |L6.96|
;;;423    										}
;;;424    								}
;;;425    							if(dataReceiving == 1)
000060  69a8              LDR      r0,[r5,#0x18]  ; dataReceiving
000062  2801              CMP      r0,#1
000064  d102              BNE      |L6.108|
;;;426    								arrayIndex = arrayIndex + 1;
000066  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
000068  1c40              ADDS     r0,r0,#1
00006a  6168              STR      r0,[r5,#0x14]  ; arrayIndex
                  |L6.108|
;;;427    							if(arrayIndex == responceSize)
00006c  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
00006e  78a9              LDRB     r1,[r5,#2]  ; responceSize
000070  4288              CMP      r0,r1
000072  d121              BNE      |L6.184|
;;;428    								{
;;;429    									dataReceiving = 0;
000074  61af              STR      r7,[r5,#0x18]  ; dataReceiving
;;;430    									arrayIndex = 0;
000076  616f              STR      r7,[r5,#0x14]  ; arrayIndex
;;;431    									First_Reg_L = (3 * boardID) + (boardID - 1);
000078  78e8              LDRB     r0,[r5,#3]  ; boardID
00007a  0041              LSLS     r1,r0,#1
00007c  1840              ADDS     r0,r0,r1
00007e  78e9              LDRB     r1,[r5,#3]  ; boardID
000080  1840              ADDS     r0,r0,r1
000082  1e40              SUBS     r0,r0,#1
000084  7128              STRB     r0,[r5,#4]
;;;432    									First_Reg_H = First_Reg_L + 1;
000086  7928              LDRB     r0,[r5,#4]  ; First_Reg_L
000088  1c40              ADDS     r0,r0,#1
00008a  7168              STRB     r0,[r5,#5]
;;;433    									Second_Reg_L = First_Reg_H + 1;
00008c  7968              LDRB     r0,[r5,#5]  ; First_Reg_H
00008e  1c40              ADDS     r0,r0,#1
000090  71a8              STRB     r0,[r5,#6]
;;;434    									Second_Reg_H = Second_Reg_L + 1;					
000092  79a8              LDRB     r0,[r5,#6]  ; Second_Reg_L
000094  1c40              ADDS     r0,r0,#1
000096  71e8              STRB     r0,[r5,#7]
;;;435    
;;;436    									setPort_4(responce[First_Reg_H]);
000098  7968              LDRB     r0,[r5,#5]  ; First_Reg_H
00009a  5c30              LDRB     r0,[r6,r0]
00009c  f7fffffe          BL       setPort_4
;;;437    									setPort_2(responce[First_Reg_L]);
0000a0  7928              LDRB     r0,[r5,#4]  ; First_Reg_L
0000a2  5c30              LDRB     r0,[r6,r0]
0000a4  f7fffffe          BL       setPort_2
;;;438    									setPort_3(responce[Second_Reg_H]);
0000a8  79e8              LDRB     r0,[r5,#7]  ; Second_Reg_H
0000aa  5c30              LDRB     r0,[r6,r0]
0000ac  f7fffffe          BL       setPort_3
;;;439    									setPort_1(responce[Second_Reg_L]);
0000b0  79a8              LDRB     r0,[r5,#6]  ; Second_Reg_L
0000b2  5c30              LDRB     r0,[r6,r0]
0000b4  f7fffffe          BL       setPort_1
                  |L6.184|
;;;440    								}
;;;441    						}
;;;442    					if(u8InChar == 0x01 && dataReceiving == 0)
0000b8  2c01              CMP      r4,#1
0000ba  d109              BNE      |L6.208|
0000bc  69a8              LDR      r0,[r5,#0x18]  ; dataReceiving
0000be  2800              CMP      r0,#0
0000c0  d106              BNE      |L6.208|
;;;443    						{
;;;444    							responce[arrayIndex] = u8InChar;
0000c2  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
0000c4  5434              STRB     r4,[r6,r0]
;;;445    							dataReceiving = 1;
0000c6  2001              MOVS     r0,#1
0000c8  61a8              STR      r0,[r5,#0x18]  ; dataReceiving
;;;446    							arrayIndex = arrayIndex + 1;
0000ca  6968              LDR      r0,[r5,#0x14]  ; arrayIndex
0000cc  1c40              ADDS     r0,r0,#1
0000ce  6168              STR      r0,[r5,#0x14]  ; arrayIndex
                  |L6.208|
;;;447    						}
;;;448    
;;;449    					/* Check if buffer full */
;;;450    					if(g_u32comRbytes < RXBUFSIZE)
0000d0  68a8              LDR      r0,[r5,#8]  ; g_u32comRbytes
0000d2  2101              MOVS     r1,#1
0000d4  0289              LSLS     r1,r1,#10
0000d6  4288              CMP      r0,r1
0000d8  d20e              BCS      |L6.248|
;;;451    						{
;;;452    								/* Enqueue the character */
;;;453    								g_u8RecData[g_u32comRtail] = u8InChar;
0000da  4819              LDR      r0,|L6.320|
0000dc  6929              LDR      r1,[r5,#0x10]  ; g_u32comRtail
0000de  5444              STRB     r4,[r0,r1]
;;;454    								g_u32comRtail = (g_u32comRtail == (RXBUFSIZE - 1)) ? 0 : (g_u32comRtail + 1);
0000e0  6929              LDR      r1,[r5,#0x10]  ; g_u32comRtail
0000e2  4818              LDR      r0,|L6.324|
0000e4  4281              CMP      r1,r0
0000e6  d101              BNE      |L6.236|
0000e8  2000              MOVS     r0,#0
0000ea  e001              B        |L6.240|
                  |L6.236|
0000ec  6928              LDR      r0,[r5,#0x10]  ; g_u32comRtail
0000ee  1c40              ADDS     r0,r0,#1
                  |L6.240|
0000f0  6128              STR      r0,[r5,#0x10]  ; g_u32comRtail
;;;455    								g_u32comRbytes++;
0000f2  68a8              LDR      r0,[r5,#8]  ; g_u32comRbytes
0000f4  1c40              ADDS     r0,r0,#1
0000f6  60a8              STR      r0,[r5,#8]  ; g_u32comRbytes
                  |L6.248|
0000f8  480e              LDR      r0,|L6.308|
0000fa  69c1              LDR      r1,[r0,#0x1c]         ;395
0000fc  07c9              LSLS     r1,r1,#31             ;395
0000fe  d18a              BNE      |L6.22|
                  |L6.256|
;;;456    						}
;;;457    				}
;;;458    		}
;;;459    
;;;460    	if(u32IntSts & UART_ISR_THRE_INT_Msk)
000100  9800              LDR      r0,[sp,#0]
000102  0580              LSLS     r0,r0,#22
000104  d515              BPL      |L6.306|
;;;461    		{
;;;462    			uint16_t tmp;
;;;463    			tmp = g_u32comRtail;
000106  6928              LDR      r0,[r5,#0x10]  ; g_u32comRtail
;;;464    			if(g_u32comRhead != tmp)
000108  68e9              LDR      r1,[r5,#0xc]  ; g_u32comRhead
00010a  b280              UXTH     r0,r0                 ;463
00010c  4281              CMP      r1,r0
00010e  d010              BEQ      |L6.306|
;;;465    				{
;;;466    						u8InChar = g_u8RecData[g_u32comRhead];
000110  68e8              LDR      r0,[r5,#0xc]  ; g_u32comRhead
000112  4808              LDR      r0,|L6.308|
                  |L6.276|
;;;467    						while(UART_IS_TX_FULL(UART0));  /* Wait Tx is not full to transmit data */
000114  6981              LDR      r1,[r0,#0x18]
000116  0209              LSLS     r1,r1,#8
000118  d4fc              BMI      |L6.276|
;;;468    						g_u32comRhead = (g_u32comRhead == (RXBUFSIZE - 1)) ? 0 : (g_u32comRhead + 1);
00011a  68e9              LDR      r1,[r5,#0xc]  ; g_u32comRhead
00011c  4809              LDR      r0,|L6.324|
00011e  4281              CMP      r1,r0
000120  d101              BNE      |L6.294|
000122  2000              MOVS     r0,#0
000124  e001              B        |L6.298|
                  |L6.294|
000126  68e8              LDR      r0,[r5,#0xc]  ; g_u32comRhead
000128  1c40              ADDS     r0,r0,#1
                  |L6.298|
00012a  60e8              STR      r0,[r5,#0xc]  ; g_u32comRhead
;;;469    						g_u32comRbytes--;
00012c  68a8              LDR      r0,[r5,#8]  ; g_u32comRbytes
00012e  1e40              SUBS     r0,r0,#1
000130  60a8              STR      r0,[r5,#8]  ; g_u32comRbytes
                  |L6.306|
;;;470    				}
;;;471    		}
;;;472    }
000132  bdf8              POP      {r3-r7,pc}
;;;473    
                          ENDP

                  |L6.308|
                          DCD      0x40050000
                  |L6.312|
                          DCD      ||.bss||+0x400
                  |L6.316|
                          DCD      ||.data||
                  |L6.320|
                          DCD      ||.bss||
                  |L6.324|
                          DCD      0x000003ff

                          AREA ||i.delay||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;51     
;;;52     void delay(uint32_t count)
000000  4904              LDR      r1,|L7.20|
;;;53     {
;;;54     	for(i = 0; i < count; i++);
000002  2200              MOVS     r2,#0
                  |L7.4|
000004  620a              STR      r2,[r1,#0x20]  ; i
000006  6a0a              LDR      r2,[r1,#0x20]  ; i
000008  4282              CMP      r2,r0
00000a  d202              BCS      |L7.18|
00000c  6a0a              LDR      r2,[r1,#0x20]  ; i
00000e  1c52              ADDS     r2,r2,#1
000010  e7f8              B        |L7.4|
                  |L7.18|
;;;55     }
000012  4770              BX       lr
;;;56     
                          ENDP

                  |L7.20|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;512    /*---------------------------------------------------------------------------------------------------------*/
;;;513    int main(void)
000000  2059              MOVS     r0,#0x59
000002  2116              MOVS     r1,#0x16
000004  4c32              LDR      r4,|L8.208|
000006  2288              MOVS     r2,#0x88
000008  e002              B        |L8.16|
                  |L8.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6021              STR      r1,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
                  |L8.16|
000010  6823              LDR      r3,[r4,#0]
000012  2b01              CMP      r3,#1
000014  d1f9              BNE      |L8.10|
;;;514    	{
;;;515    			/* Unlock protected registers */
;;;516    			SYS_UnlockReg();
;;;517    
;;;518    			/* Init System, peripheral clock and multi-function I/O */
;;;519    			SYS_Init();
000016  f7fffffe          BL       SYS_Init
00001a  2000              MOVS     r0,#0
00001c  6020              STR      r0,[r4,#0]
;;;520    
;;;521    			/* Lock protected registers */
;;;522    			SYS_LockReg();
;;;523    		
;;;524    			/* Init UART0 for printf */
;;;525    			UART0_Init();	
00001e  f7fffffe          BL       UART0_Init
;;;526    			
;;;527    			/* Open Timer0 frequency to 2 Hz in periodic mode, and enable interrupt */
;;;528    			TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 2);
000022  4c2c              LDR      r4,|L8.212|
000024  2202              MOVS     r2,#2
000026  0691              LSLS     r1,r2,#26
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       TIMER_Open
00002e  6820              LDR      r0,[r4,#0]
000030  0361              LSLS     r1,r4,#13
000032  4308              ORRS     r0,r0,r1
000034  6020              STR      r0,[r4,#0]
000036  2601              MOVS     r6,#1
000038  4d27              LDR      r5,|L8.216|
00003a  1548              ASRS     r0,r1,#21
00003c  6028              STR      r0,[r5,#0]
00003e  6820              LDR      r0,[r4,#0]
000040  0049              LSLS     r1,r1,#1
000042  4308              ORRS     r0,r0,r1
000044  6020              STR      r0,[r4,#0]
;;;529    			TIMER_EnableInt(TIMER0);		
;;;530    			
;;;531    			/* Enable Timer0 ~ Timer1 NVIC */
;;;532    			NVIC_EnableIRQ(TMR0_IRQn);
;;;533    			
;;;534    			/* Start Timer0 ~ Timer1 counting */
;;;535    			TIMER_Start(TIMER0);
;;;536    			
;;;537    			GPIO_SetMode(P0, BIT0 | BIT1 | BIT4 | BIT5 | BIT6, GPIO_PMD_INPUT);
000046  4c25              LDR      r4,|L8.220|
000048  2200              MOVS     r2,#0
00004a  2173              MOVS     r1,#0x73
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       GPIO_SetMode
;;;538    			GPIO_SetMode(P0, BIT7, GPIO_PMD_OUTPUT);
000052  2201              MOVS     r2,#1
000054  2180              MOVS     r1,#0x80
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       GPIO_SetMode
;;;539    			GPIO_SetMode(P1, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
00005c  481f              LDR      r0,|L8.220|
00005e  2201              MOVS     r2,#1
000060  21ff              MOVS     r1,#0xff
000062  3040              ADDS     r0,r0,#0x40
000064  f7fffffe          BL       GPIO_SetMode
;;;540    			GPIO_SetMode(P2, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000068  481c              LDR      r0,|L8.220|
00006a  2201              MOVS     r2,#1
00006c  21ff              MOVS     r1,#0xff
00006e  3080              ADDS     r0,r0,#0x80
000070  f7fffffe          BL       GPIO_SetMode
;;;541    			GPIO_SetMode(P3, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000074  4819              LDR      r0,|L8.220|
000076  2201              MOVS     r2,#1
000078  21ff              MOVS     r1,#0xff
00007a  30c0              ADDS     r0,r0,#0xc0
00007c  f7fffffe          BL       GPIO_SetMode
;;;542    			GPIO_SetMode(P4, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000080  2201              MOVS     r2,#1
000082  21ff              MOVS     r1,#0xff
000084  4816              LDR      r0,|L8.224|
000086  f7fffffe          BL       GPIO_SetMode
;;;543    			
;;;544    			P07 = 1;
00008a  4816              LDR      r0,|L8.228|
00008c  61c6              STR      r6,[r0,#0x1c]
;;;545    			
;;;546    			GetBoardID();
00008e  f7fffffe          BL       GetBoardID
;;;547    			
;;;548    			setPort_4(0x00);
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       setPort_4
;;;549    			setPort_2(0x00);
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       setPort_2
;;;550    			setPort_3(0x00);
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       setPort_3
;;;551    			setPort_1(0x00);
0000a4  2000              MOVS     r0,#0
0000a6  f7fffffe          BL       setPort_1
;;;552    			
;;;553    			//Variable Initialization
;;;554    			toatalDataBytesToReceived = 2 * totalRegsToRead;
0000aa  480f              LDR      r0,|L8.232|
0000ac  7801              LDRB     r1,[r0,#0]  ; totalRegsToRead
0000ae  0049              LSLS     r1,r1,#1
0000b0  7041              STRB     r1,[r0,#1]
;;;555    			responceSize = toatalDataBytesToReceived + 3;
0000b2  7841              LDRB     r1,[r0,#1]  ; toatalDataBytesToReceived
0000b4  1cc9              ADDS     r1,r1,#3
0000b6  7081              STRB     r1,[r0,#2]
;;;556    			masterCommand[11] = totalRegsToRead;
0000b8  7800              LDRB     r0,[r0,#0]  ; totalRegsToRead
0000ba  490b              LDR      r1,|L8.232|
0000bc  3124              ADDS     r1,r1,#0x24
0000be  72c8              STRB     r0,[r1,#0xb]
;;;557    			
;;;558    			/* Enable Interrupt and install the call back function */
;;;559    			UART_ENABLE_INT(UART0, (UART_IER_RDA_IEN_Msk | UART_IER_THRE_IEN_Msk | UART_IER_RTO_IEN_Msk));
0000c0  480a              LDR      r0,|L8.236|
0000c2  6841              LDR      r1,[r0,#4]
0000c4  2213              MOVS     r2,#0x13
0000c6  4311              ORRS     r1,r1,r2
0000c8  6041              STR      r1,[r0,#4]
0000ca  0330              LSLS     r0,r6,#12
0000cc  6028              STR      r0,[r5,#0]
                  |L8.206|
;;;560    			NVIC_EnableIRQ(UART0_IRQn);
;;;561    			
;;;562    			while(1)
0000ce  e7fe              B        |L8.206|
;;;563    				{					
;;;564    					
;;;565    				}
;;;566    	}
;;;567    
                          ENDP

                  |L8.208|
                          DCD      0x50000100
                  |L8.212|
                          DCD      0x40010000
                  |L8.216|
                          DCD      0xe000e100
                  |L8.220|
                          DCD      0x50004000
                  |L8.224|
                          DCD      0x50004100
                  |L8.228|
                          DCD      0x50004200
                  |L8.232|
                          DCD      ||.data||
                  |L8.236|
                          DCD      0x40050000

                          AREA ||i.setPort_1||, CODE, READONLY, ALIGN=2

                  setPort_1 PROC
;;;56     
;;;57     void setPort_1(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;58     {
;;;59     	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;60     	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;61     		P10 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L9.160|
000012  2c00              CMP      r4,#0                 ;60
000014  d001              BEQ      |L9.26|
000016  620a              STR      r2,[r1,#0x20]
000018  e000              B        |L9.28|
                  |L9.26|
;;;62     	else
;;;63     		P10 = 0;
00001a  620b              STR      r3,[r1,#0x20]
                  |L9.28|
;;;64     	
;;;65     	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;66     	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L9.46|
;;;67     		P11 = 1;
00002a  624a              STR      r2,[r1,#0x24]
00002c  e000              B        |L9.48|
                  |L9.46|
;;;68     	else
;;;69     		P11 = 0;
00002e  624b              STR      r3,[r1,#0x24]
                  |L9.48|
;;;70     	
;;;71     	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;72     	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L9.64|
;;;73     		P12 = 1;
00003c  628a              STR      r2,[r1,#0x28]
00003e  e000              B        |L9.66|
                  |L9.64|
;;;74     	else
;;;75     		P12 = 0;
000040  628b              STR      r3,[r1,#0x28]
                  |L9.66|
;;;76     	
;;;77     	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;78     	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L9.82|
;;;79     		P13 = 1;
00004e  62ca              STR      r2,[r1,#0x2c]
000050  e000              B        |L9.84|
                  |L9.82|
;;;80     	else
;;;81     		P13 = 0;
000052  62cb              STR      r3,[r1,#0x2c]
                  |L9.84|
;;;82     	
;;;83     	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;84     	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L9.100|
;;;85     		P14 = 1;
000060  630a              STR      r2,[r1,#0x30]
000062  e000              B        |L9.102|
                  |L9.100|
;;;86     	else
;;;87     		P14 = 0;
000064  630b              STR      r3,[r1,#0x30]
                  |L9.102|
;;;88     	
;;;89     	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;90     	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L9.118|
;;;91     		P15 = 1;
000072  634a              STR      r2,[r1,#0x34]
000074  e000              B        |L9.120|
                  |L9.118|
;;;92     	else
;;;93     		P15 = 0;
000076  634b              STR      r3,[r1,#0x34]
                  |L9.120|
;;;94     	
;;;95     	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;96     	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L9.136|
;;;97     		P16 = 1;
000084  638a              STR      r2,[r1,#0x38]
000086  e000              B        |L9.138|
                  |L9.136|
;;;98     	else
;;;99     		P16 = 0;
000088  638b              STR      r3,[r1,#0x38]
                  |L9.138|
;;;100    	
;;;101    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;102    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L9.154|
;;;103    		P17 = 1;
000096  63ca              STR      r2,[r1,#0x3c]
;;;104    	else
;;;105    		P17 = 0;
;;;106    }
000098  bd38              POP      {r3-r5,pc}
                  |L9.154|
00009a  63cb              STR      r3,[r1,#0x3c]         ;105
00009c  bd38              POP      {r3-r5,pc}
;;;107    
                          ENDP

00009e  0000              DCW      0x0000
                  |L9.160|
                          DCD      0x50004200

                          AREA ||i.setPort_2||, CODE, READONLY, ALIGN=2

                  setPort_2 PROC
;;;107    
;;;108    void setPort_2(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;109    {
;;;110    	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;111    	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;112    		P20 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L10.160|
000012  2c00              CMP      r4,#0                 ;111
000014  d001              BEQ      |L10.26|
000016  600a              STR      r2,[r1,#0]
000018  e000              B        |L10.28|
                  |L10.26|
;;;113    	else
;;;114    		P20 = 0;
00001a  600b              STR      r3,[r1,#0]
                  |L10.28|
;;;115    	
;;;116    	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;117    	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L10.46|
;;;118    		P21 = 1;
00002a  604a              STR      r2,[r1,#4]
00002c  e000              B        |L10.48|
                  |L10.46|
;;;119    	else
;;;120    		P21 = 0;
00002e  604b              STR      r3,[r1,#4]
                  |L10.48|
;;;121    	
;;;122    	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;123    	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L10.64|
;;;124    		P22 = 1;
00003c  608a              STR      r2,[r1,#8]
00003e  e000              B        |L10.66|
                  |L10.64|
;;;125    	else
;;;126    		P22 = 0;
000040  608b              STR      r3,[r1,#8]
                  |L10.66|
;;;127    	
;;;128    	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;129    	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L10.82|
;;;130    		P23 = 1;
00004e  60ca              STR      r2,[r1,#0xc]
000050  e000              B        |L10.84|
                  |L10.82|
;;;131    	else
;;;132    		P23 = 0;
000052  60cb              STR      r3,[r1,#0xc]
                  |L10.84|
;;;133    	
;;;134    	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;135    	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L10.100|
;;;136    		P24 = 1;
000060  610a              STR      r2,[r1,#0x10]
000062  e000              B        |L10.102|
                  |L10.100|
;;;137    	else
;;;138    		P24 = 0;
000064  610b              STR      r3,[r1,#0x10]
                  |L10.102|
;;;139    	
;;;140    	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;141    	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L10.118|
;;;142    		P25 = 1;
000072  614a              STR      r2,[r1,#0x14]
000074  e000              B        |L10.120|
                  |L10.118|
;;;143    	else
;;;144    		P25 = 0;
000076  614b              STR      r3,[r1,#0x14]
                  |L10.120|
;;;145    	
;;;146    	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;147    	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L10.136|
;;;148    		P26 = 1;
000084  618a              STR      r2,[r1,#0x18]
000086  e000              B        |L10.138|
                  |L10.136|
;;;149    	else
;;;150    		P26 = 0;
000088  618b              STR      r3,[r1,#0x18]
                  |L10.138|
;;;151    	
;;;152    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;153    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L10.154|
;;;154    		P27 = 1;
000096  61ca              STR      r2,[r1,#0x1c]
;;;155    	else
;;;156    		P27 = 0;
;;;157    }
000098  bd38              POP      {r3-r5,pc}
                  |L10.154|
00009a  61cb              STR      r3,[r1,#0x1c]         ;156
00009c  bd38              POP      {r3-r5,pc}
;;;158    
                          ENDP

00009e  0000              DCW      0x0000
                  |L10.160|
                          DCD      0x50004240

                          AREA ||i.setPort_3||, CODE, READONLY, ALIGN=2

                  setPort_3 PROC
;;;158    
;;;159    void setPort_3(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;160    {
;;;161    	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;162    	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;163    		P30 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L11.160|
000012  2c00              CMP      r4,#0                 ;162
000014  d001              BEQ      |L11.26|
000016  620a              STR      r2,[r1,#0x20]
000018  e000              B        |L11.28|
                  |L11.26|
;;;164    	else
;;;165    		P30 = 0;
00001a  620b              STR      r3,[r1,#0x20]
                  |L11.28|
;;;166    	
;;;167    	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;168    	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L11.46|
;;;169    		P31 = 1;
00002a  624a              STR      r2,[r1,#0x24]
00002c  e000              B        |L11.48|
                  |L11.46|
;;;170    	else
;;;171    		P31 = 0;
00002e  624b              STR      r3,[r1,#0x24]
                  |L11.48|
;;;172    	
;;;173    	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;174    	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L11.64|
;;;175    		P32 = 1;
00003c  628a              STR      r2,[r1,#0x28]
00003e  e000              B        |L11.66|
                  |L11.64|
;;;176    	else
;;;177    		P32 = 0;
000040  628b              STR      r3,[r1,#0x28]
                  |L11.66|
;;;178    	
;;;179    	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;180    	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L11.82|
;;;181    		P33 = 1;
00004e  62ca              STR      r2,[r1,#0x2c]
000050  e000              B        |L11.84|
                  |L11.82|
;;;182    	else
;;;183    		P33 = 0;
000052  62cb              STR      r3,[r1,#0x2c]
                  |L11.84|
;;;184    	
;;;185    	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;186    	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L11.100|
;;;187    		P34 = 1;
000060  630a              STR      r2,[r1,#0x30]
000062  e000              B        |L11.102|
                  |L11.100|
;;;188    	else
;;;189    		P34 = 0;
000064  630b              STR      r3,[r1,#0x30]
                  |L11.102|
;;;190    	
;;;191    	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;192    	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L11.118|
;;;193    		P35 = 1;
000072  634a              STR      r2,[r1,#0x34]
000074  e000              B        |L11.120|
                  |L11.118|
;;;194    	else
;;;195    		P35 = 0;
000076  634b              STR      r3,[r1,#0x34]
                  |L11.120|
;;;196    	
;;;197    	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;198    	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L11.136|
;;;199    		P36 = 1;
000084  638a              STR      r2,[r1,#0x38]
000086  e000              B        |L11.138|
                  |L11.136|
;;;200    	else
;;;201    		P36 = 0;
000088  638b              STR      r3,[r1,#0x38]
                  |L11.138|
;;;202    	
;;;203    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;204    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L11.154|
;;;205    		P37 = 1;
000096  63ca              STR      r2,[r1,#0x3c]
;;;206    	else
;;;207    		P37 = 0;
;;;208    }
000098  bd38              POP      {r3-r5,pc}
                  |L11.154|
00009a  63cb              STR      r3,[r1,#0x3c]         ;207
00009c  bd38              POP      {r3-r5,pc}
;;;209    
                          ENDP

00009e  0000              DCW      0x0000
                  |L11.160|
                          DCD      0x50004240

                          AREA ||i.setPort_4||, CODE, READONLY, ALIGN=2

                  setPort_4 PROC
;;;209    
;;;210    void setPort_4(char value)
000000  b538              PUSH     {r3-r5,lr}
;;;211    {
;;;212    	volatile char res = value & 0x01;
000002  07c1              LSLS     r1,r0,#31
000004  0fc9              LSRS     r1,r1,#31
000006  466a              MOV      r2,sp
000008  7011              STRB     r1,[r2,#0]
;;;213    	if(res != 0)
00000a  7814              LDRB     r4,[r2,#0]
;;;214    		P40 = 1;
00000c  2201              MOVS     r2,#1
00000e  2300              MOVS     r3,#0
000010  4923              LDR      r1,|L12.160|
000012  2c00              CMP      r4,#0                 ;213
000014  d001              BEQ      |L12.26|
000016  600a              STR      r2,[r1,#0]
000018  e000              B        |L12.28|
                  |L12.26|
;;;215    	else
;;;216    		P40 = 0;
00001a  600b              STR      r3,[r1,#0]
                  |L12.28|
;;;217    	
;;;218    	res = value & 0x02;
00001c  2402              MOVS     r4,#2
00001e  4004              ANDS     r4,r4,r0
000020  466d              MOV      r5,sp
000022  702c              STRB     r4,[r5,#0]
;;;219    	if(res != 0)
000024  782c              LDRB     r4,[r5,#0]
000026  2c00              CMP      r4,#0
000028  d001              BEQ      |L12.46|
;;;220    		P41 = 1;
00002a  604a              STR      r2,[r1,#4]
00002c  e000              B        |L12.48|
                  |L12.46|
;;;221    	else
;;;222    		P41 = 0;
00002e  604b              STR      r3,[r1,#4]
                  |L12.48|
;;;223    	
;;;224    	res = value & 0x04;
000030  2404              MOVS     r4,#4
000032  4004              ANDS     r4,r4,r0
000034  702c              STRB     r4,[r5,#0]
;;;225    	if(res != 0)
000036  782c              LDRB     r4,[r5,#0]
000038  2c00              CMP      r4,#0
00003a  d001              BEQ      |L12.64|
;;;226    		P42 = 1;
00003c  608a              STR      r2,[r1,#8]
00003e  e000              B        |L12.66|
                  |L12.64|
;;;227    	else
;;;228    		P42 = 0;
000040  608b              STR      r3,[r1,#8]
                  |L12.66|
;;;229    	
;;;230    	res = value & 0x08;
000042  2408              MOVS     r4,#8
000044  4004              ANDS     r4,r4,r0
000046  702c              STRB     r4,[r5,#0]
;;;231    	if(res != 0)
000048  782c              LDRB     r4,[r5,#0]
00004a  2c00              CMP      r4,#0
00004c  d001              BEQ      |L12.82|
;;;232    		P43 = 1;
00004e  60ca              STR      r2,[r1,#0xc]
000050  e000              B        |L12.84|
                  |L12.82|
;;;233    	else
;;;234    		P43 = 0;
000052  60cb              STR      r3,[r1,#0xc]
                  |L12.84|
;;;235    	
;;;236    	res = value & 0x10;
000054  2410              MOVS     r4,#0x10
000056  4004              ANDS     r4,r4,r0
000058  702c              STRB     r4,[r5,#0]
;;;237    	if(res != 0)
00005a  782c              LDRB     r4,[r5,#0]
00005c  2c00              CMP      r4,#0
00005e  d001              BEQ      |L12.100|
;;;238    		P44 = 1;
000060  610a              STR      r2,[r1,#0x10]
000062  e000              B        |L12.102|
                  |L12.100|
;;;239    	else
;;;240    		P44 = 0;
000064  610b              STR      r3,[r1,#0x10]
                  |L12.102|
;;;241    	
;;;242    	res = value & 0x20;
000066  2420              MOVS     r4,#0x20
000068  4004              ANDS     r4,r4,r0
00006a  702c              STRB     r4,[r5,#0]
;;;243    	if(res != 0)
00006c  782c              LDRB     r4,[r5,#0]
00006e  2c00              CMP      r4,#0
000070  d001              BEQ      |L12.118|
;;;244    		P45 = 1;
000072  614a              STR      r2,[r1,#0x14]
000074  e000              B        |L12.120|
                  |L12.118|
;;;245    	else
;;;246    		P45 = 0;
000076  614b              STR      r3,[r1,#0x14]
                  |L12.120|
;;;247    	
;;;248    	res = value & 0x40;
000078  2440              MOVS     r4,#0x40
00007a  4004              ANDS     r4,r4,r0
00007c  702c              STRB     r4,[r5,#0]
;;;249    	if(res != 0)
00007e  782c              LDRB     r4,[r5,#0]
000080  2c00              CMP      r4,#0
000082  d001              BEQ      |L12.136|
;;;250    		P46 = 1;
000084  618a              STR      r2,[r1,#0x18]
000086  e000              B        |L12.138|
                  |L12.136|
;;;251    	else
;;;252    		P46 = 0;
000088  618b              STR      r3,[r1,#0x18]
                  |L12.138|
;;;253    	
;;;254    	res = value & 0x80;
00008a  09c0              LSRS     r0,r0,#7
00008c  01c0              LSLS     r0,r0,#7
00008e  7028              STRB     r0,[r5,#0]
;;;255    	if(res != 0)
000090  7828              LDRB     r0,[r5,#0]
000092  2800              CMP      r0,#0
000094  d001              BEQ      |L12.154|
;;;256    		P47 = 1;
000096  61ca              STR      r2,[r1,#0x1c]
;;;257    	else
;;;258    		P47 = 0;
;;;259    }
000098  bd38              POP      {r3-r5,pc}
                  |L12.154|
00009a  61cb              STR      r3,[r1,#0x1c]         ;258
00009c  bd38              POP      {r3-r5,pc}
;;;260    
                          ENDP

00009e  0000              DCW      0x0000
                  |L12.160|
                          DCD      0x50004280

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_u8RecData
                          %        1024
                  responce
                          %        107

                          AREA ||.data||, DATA, ALIGN=2

                  totalRegsToRead
000000  34                DCB      0x34
                  toatalDataBytesToReceived
000001  68                DCB      0x68
                  responceSize
000002  6b                DCB      0x6b
                  boardID
000003  00                DCB      0x00
                  First_Reg_L
000004  00                DCB      0x00
                  First_Reg_H
000005  00                DCB      0x00
                  Second_Reg_L
000006  00                DCB      0x00
                  Second_Reg_H
000007  00                DCB      0x00
                  g_u32comRbytes
                          DCD      0x00000000
                  g_u32comRhead
                          DCD      0x00000000
                  g_u32comRtail
                          DCD      0x00000000
                  arrayIndex
                          DCD      0x00000000
                  dataReceiving
                          DCD      0x00000000
                  seconds
                          DCD      0x00000000
                  i
                          DCD      0x00000000
                  masterCommand
000024  00010000          DCB      0x00,0x01,0x00,0x00
000028  00060103          DCB      0x00,0x06,0x01,0x03
00002c  00010034          DCB      0x00,0x01,0x00,0x34

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a80fc96b____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_a80fc96b____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a80fc96b____REVSH|
#line 132
|__asm___6_main_c_a80fc96b____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
