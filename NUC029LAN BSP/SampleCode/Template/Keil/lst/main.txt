; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\NUC029xAN\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;62     
;;;63     void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65         /*---------------------------------------------------------------------------------------------------------*/
;;;66         /* Init System Clock                                                                                       */
;;;67         /*---------------------------------------------------------------------------------------------------------*/
;;;68         /* Enable IRC22M clock */
;;;69         CLK->PWRCON |= CLK_PWRCON_IRC22M_EN_Msk;
000002  4c16              LDR      r4,|L1.92|
000004  6820              LDR      r0,[r4,#0]
000006  2104              MOVS     r1,#4
000008  4308              ORRS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;70     
;;;71         /* Waiting for IRC22M clock ready */
;;;72         CLK_WaitClockReady(CLK_CLKSTATUS_IRC22M_STB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;73     
;;;74         /* Switch HCLK clock source to HIRC */
;;;75         CLK->CLKSEL0 = CLK_CLKSEL0_HCLK_S_HIRC;
000012  2007              MOVS     r0,#7
000014  6120              STR      r0,[r4,#0x10]
;;;76     
;;;77         /* Set PLL to Power-down mode and PLL_STB bit in CLKSTATUS register will be cleared by hardware.*/
;;;78         CLK->PLLCON |= CLK_PLLCON_PD_Msk;
000016  6a20              LDR      r0,[r4,#0x20]
000018  01e1              LSLS     r1,r4,#7
00001a  4308              ORRS     r0,r0,r1
00001c  6220              STR      r0,[r4,#0x20]
;;;79     
;;;80         /* Enable external 12 MHz XTAL, IRC10K */
;;;81         //CLK->PWRCON |= CLK_PWRCON_XTL12M_EN_Msk | CLK_PWRCON_OSC10K_EN_Msk;
;;;82     
;;;83         /* Enable PLL and Set PLL frequency */
;;;84         CLK->PLLCON = PLLCON_SETTING;
00001e  4810              LDR      r0,|L1.96|
000020  6220              STR      r0,[r4,#0x20]
;;;85     
;;;86         /* Waiting for clock ready */
;;;87         CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk | CLK_CLKSTATUS_XTL12M_STB_Msk | CLK_CLKSTATUS_IRC10K_STB_Msk);
000022  200d              MOVS     r0,#0xd
000024  f7fffffe          BL       CLK_WaitClockReady
;;;88     
;;;89         /* Switch HCLK clock source to PLL, STCLK to HCLK/2 */
;;;90         CLK->CLKSEL0 = CLK_CLKSEL0_STCLK_S_HCLK_DIV2 | CLK_CLKSEL0_HCLK_S_PLL;
000028  201a              MOVS     r0,#0x1a
00002a  6120              STR      r0,[r4,#0x10]
;;;91     
;;;92         /* Enable peripheral clock */
;;;93         CLK->APBCLK = CLK_APBCLK_UART0_EN_Msk | CLK_APBCLK_TMR0_EN_Msk;
00002c  480d              LDR      r0,|L1.100|
00002e  60a0              STR      r0,[r4,#8]
;;;94     
;;;95         /* Peripheral clock source */
;;;96         CLK->CLKSEL1 = CLK_CLKSEL1_UART_S_PLL | CLK_CLKSEL1_TMR0_S_HIRC;
000030  480d              LDR      r0,|L1.104|
000032  6160              STR      r0,[r4,#0x14]
;;;97     
;;;98         /* Update System Core Clock */
;;;99         /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;100        SystemCoreClockUpdate();
000034  f7fffffe          BL       SystemCoreClockUpdate
;;;101    		
;;;102    		/*---------------------------------------------------------------------------------------------------------*/
;;;103        /* Init I/O Multi-function                                                                                 */
;;;104        /*---------------------------------------------------------------------------------------------------------*/
;;;105        /* Set P3 multi-function pins for UART0 RXD, TXD */
;;;106        //SYS->P3_MFP &= ~(SYS_MFP_P30_Msk | SYS_MFP_P31_Msk);
;;;107        //SYS->P3_MFP |= (SYS_MFP_P30_RXD0 | SYS_MFP_P31_TXD0);
;;;108    		
;;;109    		SYS->P0_MFP &= ~(SYS_MFP_P03_Msk | SYS_MFP_P02_Msk);
000038  2005              MOVS     r0,#5
00003a  0700              LSLS     r0,r0,#28
00003c  6b01              LDR      r1,[r0,#0x30]
00003e  4a0b              LDR      r2,|L1.108|
000040  4011              ANDS     r1,r1,r2
000042  6301              STR      r1,[r0,#0x30]
;;;110        SYS->P0_MFP |= (SYS_MFP_P03_RXD0 | SYS_MFP_P02_TXD0);
000044  6b01              LDR      r1,[r0,#0x30]
000046  43d2              MVNS     r2,r2
000048  4311              ORRS     r1,r1,r2
00004a  6301              STR      r1,[r0,#0x30]
;;;111    		
;;;112    		SYS->P4_MFP &= ~(SYS_MFP_P46_Msk | SYS_MFP_P47_Msk);
00004c  4808              LDR      r0,|L1.112|
00004e  6801              LDR      r1,[r0,#0]
000050  4a08              LDR      r2,|L1.116|
000052  4011              ANDS     r1,r1,r2
000054  6001              STR      r1,[r0,#0]
;;;113        SYS->P4_MFP |= (SYS_MFP_P46_GPIO | SYS_MFP_P47_GPIO);
000056  6801              LDR      r1,[r0,#0]
000058  6001              STR      r1,[r0,#0]
;;;114    }
00005a  bd10              POP      {r4,pc}
;;;115    
                          ENDP

                  |L1.92|
                          DCD      0x50000200
                  |L1.96|
                          DCD      0x00085639
                  |L1.100|
                          DCD      0x00010004
                  |L1.104|
                          DCD      0x01000700
                  |L1.108|
                          DCD      0xfffff3f3
                  |L1.112|
                          DCD      0x50000040
                  |L1.116|
                          DCD      0xffff3f3f

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;15     
;;;16     void TMR0_IRQHandler(void)
000000  4936              LDR      r1,|L2.220|
000002  6888              LDR      r0,[r1,#8]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;17     	{
000008  d066              BEQ      |L2.216|
00000a  2001              MOVS     r0,#1
00000c  6088              STR      r0,[r1,#8]
;;;18     			if(TIMER_GetIntFlag(TIMER0) == 1)
;;;19     				{
;;;20     						/* Clear Timer0 time-out interrupt flag */
;;;21     						TIMER_ClearIntFlag(TIMER0);
;;;22     						GPIO_TOGGLE(P10);
00000e  4934              LDR      r1,|L2.224|
000010  6a0a              LDR      r2,[r1,#0x20]
000012  4042              EORS     r2,r2,r0
000014  620a              STR      r2,[r1,#0x20]
;;;23     						GPIO_TOGGLE(P11);			
000016  6a4a              LDR      r2,[r1,#0x24]
000018  4042              EORS     r2,r2,r0
00001a  624a              STR      r2,[r1,#0x24]
;;;24     						GPIO_TOGGLE(P12);
00001c  6a8a              LDR      r2,[r1,#0x28]
00001e  4042              EORS     r2,r2,r0
000020  628a              STR      r2,[r1,#0x28]
;;;25     						GPIO_TOGGLE(P13);	
000022  6aca              LDR      r2,[r1,#0x2c]
000024  4042              EORS     r2,r2,r0
000026  62ca              STR      r2,[r1,#0x2c]
;;;26     						GPIO_TOGGLE(P14);
000028  6b0a              LDR      r2,[r1,#0x30]
00002a  4042              EORS     r2,r2,r0
00002c  630a              STR      r2,[r1,#0x30]
;;;27     						GPIO_TOGGLE(P15);			
00002e  6b4a              LDR      r2,[r1,#0x34]
000030  4042              EORS     r2,r2,r0
000032  634a              STR      r2,[r1,#0x34]
;;;28     						GPIO_TOGGLE(P16);
000034  6b8a              LDR      r2,[r1,#0x38]
000036  4042              EORS     r2,r2,r0
000038  638a              STR      r2,[r1,#0x38]
;;;29     						GPIO_TOGGLE(P17);
00003a  6bca              LDR      r2,[r1,#0x3c]
00003c  4042              EORS     r2,r2,r0
00003e  63ca              STR      r2,[r1,#0x3c]
;;;30     					
;;;31     						GPIO_TOGGLE(P20);
000040  4927              LDR      r1,|L2.224|
000042  3140              ADDS     r1,r1,#0x40
000044  680a              LDR      r2,[r1,#0]
000046  4042              EORS     r2,r2,r0
000048  600a              STR      r2,[r1,#0]
;;;32     						GPIO_TOGGLE(P21);			
00004a  684a              LDR      r2,[r1,#4]
00004c  4042              EORS     r2,r2,r0
00004e  604a              STR      r2,[r1,#4]
;;;33     						GPIO_TOGGLE(P22);
000050  688a              LDR      r2,[r1,#8]
000052  4042              EORS     r2,r2,r0
000054  608a              STR      r2,[r1,#8]
;;;34     						GPIO_TOGGLE(P23);	
000056  68ca              LDR      r2,[r1,#0xc]
000058  4042              EORS     r2,r2,r0
00005a  60ca              STR      r2,[r1,#0xc]
;;;35     						GPIO_TOGGLE(P24);
00005c  690a              LDR      r2,[r1,#0x10]
00005e  4042              EORS     r2,r2,r0
000060  610a              STR      r2,[r1,#0x10]
;;;36     						GPIO_TOGGLE(P25);			
000062  694a              LDR      r2,[r1,#0x14]
000064  4042              EORS     r2,r2,r0
000066  614a              STR      r2,[r1,#0x14]
;;;37     						GPIO_TOGGLE(P26);
000068  698a              LDR      r2,[r1,#0x18]
00006a  4042              EORS     r2,r2,r0
00006c  618a              STR      r2,[r1,#0x18]
;;;38     						GPIO_TOGGLE(P27);
00006e  69ca              LDR      r2,[r1,#0x1c]
000070  4042              EORS     r2,r2,r0
000072  61ca              STR      r2,[r1,#0x1c]
;;;39     					
;;;40     						GPIO_TOGGLE(P30);
000074  6a0a              LDR      r2,[r1,#0x20]
000076  4042              EORS     r2,r2,r0
000078  620a              STR      r2,[r1,#0x20]
;;;41     						GPIO_TOGGLE(P31);			
00007a  6a4a              LDR      r2,[r1,#0x24]
00007c  4042              EORS     r2,r2,r0
00007e  624a              STR      r2,[r1,#0x24]
;;;42     						GPIO_TOGGLE(P32);
000080  6a8a              LDR      r2,[r1,#0x28]
000082  4042              EORS     r2,r2,r0
000084  628a              STR      r2,[r1,#0x28]
;;;43     						GPIO_TOGGLE(P33);	
000086  6aca              LDR      r2,[r1,#0x2c]
000088  4042              EORS     r2,r2,r0
00008a  62ca              STR      r2,[r1,#0x2c]
;;;44     						GPIO_TOGGLE(P34);
00008c  6b0a              LDR      r2,[r1,#0x30]
00008e  4042              EORS     r2,r2,r0
000090  630a              STR      r2,[r1,#0x30]
;;;45     						GPIO_TOGGLE(P35);			
000092  6b4a              LDR      r2,[r1,#0x34]
000094  4042              EORS     r2,r2,r0
000096  634a              STR      r2,[r1,#0x34]
;;;46     						GPIO_TOGGLE(P36);
000098  6b8a              LDR      r2,[r1,#0x38]
00009a  4042              EORS     r2,r2,r0
00009c  638a              STR      r2,[r1,#0x38]
;;;47     						GPIO_TOGGLE(P37);
00009e  6bca              LDR      r2,[r1,#0x3c]
0000a0  4042              EORS     r2,r2,r0
0000a2  63ca              STR      r2,[r1,#0x3c]
;;;48     						
;;;49     						GPIO_TOGGLE(P40);
0000a4  490e              LDR      r1,|L2.224|
0000a6  3180              ADDS     r1,r1,#0x80
0000a8  680a              LDR      r2,[r1,#0]
0000aa  4042              EORS     r2,r2,r0
0000ac  600a              STR      r2,[r1,#0]
;;;50     						GPIO_TOGGLE(P41);			
0000ae  684a              LDR      r2,[r1,#4]
0000b0  4042              EORS     r2,r2,r0
0000b2  604a              STR      r2,[r1,#4]
;;;51     						GPIO_TOGGLE(P42);
0000b4  688a              LDR      r2,[r1,#8]
0000b6  4042              EORS     r2,r2,r0
0000b8  608a              STR      r2,[r1,#8]
;;;52     						GPIO_TOGGLE(P43);	
0000ba  68ca              LDR      r2,[r1,#0xc]
0000bc  4042              EORS     r2,r2,r0
0000be  60ca              STR      r2,[r1,#0xc]
;;;53     						GPIO_TOGGLE(P44);
0000c0  690a              LDR      r2,[r1,#0x10]
0000c2  4042              EORS     r2,r2,r0
0000c4  610a              STR      r2,[r1,#0x10]
;;;54     						GPIO_TOGGLE(P45);			
0000c6  694a              LDR      r2,[r1,#0x14]
0000c8  4042              EORS     r2,r2,r0
0000ca  614a              STR      r2,[r1,#0x14]
;;;55     						GPIO_TOGGLE(P46);
0000cc  698a              LDR      r2,[r1,#0x18]
0000ce  4042              EORS     r2,r2,r0
0000d0  618a              STR      r2,[r1,#0x18]
;;;56     						GPIO_TOGGLE(P47);
0000d2  69ca              LDR      r2,[r1,#0x1c]
0000d4  4042              EORS     r2,r2,r0
0000d6  61ca              STR      r2,[r1,#0x1c]
                  |L2.216|
;;;57     
;;;58     						//printf("Hello World...!\n");
;;;59     				}
;;;60     	}
0000d8  4770              BX       lr
;;;61     
                          ENDP

0000da  0000              DCW      0x0000
                  |L2.220|
                          DCD      0x40010000
                  |L2.224|
                          DCD      0x50004200

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;115    
;;;116    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118        /*---------------------------------------------------------------------------------------------------------*/
;;;119        /* Init UART                                                                                               */
;;;120        /*---------------------------------------------------------------------------------------------------------*/
;;;121        /* Reset IP */
;;;122        SYS_ResetModule(UART0_RST);
000002  4804              LDR      r0,|L3.20|
000004  f7fffffe          BL       SYS_ResetModule
;;;123    
;;;124        /* Configure UART0 and set UART0 Baudrate */
;;;125        UART_Open(UART0, 38400);
000008  214b              MOVS     r1,#0x4b
00000a  0249              LSLS     r1,r1,#9
00000c  4802              LDR      r0,|L3.24|
00000e  f7fffffe          BL       UART_Open
;;;126    }
000012  bd10              POP      {r4,pc}
;;;127    
                          ENDP

                  |L3.20|
                          DCD      0x04000010
                  |L3.24|
                          DCD      0x40050000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;127    
;;;128    int main()
000000  2159              MOVS     r1,#0x59
000002  2216              MOVS     r2,#0x16
000004  4c1b              LDR      r4,|L4.116|
000006  2088              MOVS     r0,#0x88
000008  e002              B        |L4.16|
                  |L4.10|
00000a  6021              STR      r1,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6020              STR      r0,[r4,#0]
                  |L4.16|
000010  6823              LDR      r3,[r4,#0]
000012  2b01              CMP      r3,#1
000014  d1f9              BNE      |L4.10|
;;;129    {
;;;130        /* Unlock protected registers */
;;;131        SYS_UnlockReg();
;;;132    
;;;133        /* Init System, peripheral clock and multi-function I/O */
;;;134        SYS_Init();
000016  f7fffffe          BL       SYS_Init
00001a  2000              MOVS     r0,#0
00001c  6020              STR      r0,[r4,#0]
;;;135    
;;;136        /* Lock protected registers */
;;;137        SYS_LockReg();
;;;138    	
;;;139    		/* Init UART0 for printf */
;;;140        UART0_Init();
00001e  f7fffffe          BL       UART0_Init
;;;141    
;;;142        /* Open Timer0 frequency to 0.5 Hz in periodic mode, and enable interrupt */
;;;143        TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 1);
000022  4c15              LDR      r4,|L4.120|
000024  2201              MOVS     r2,#1
000026  06d1              LSLS     r1,r2,#27
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       TIMER_Open
00002e  6820              LDR      r0,[r4,#0]
000030  0361              LSLS     r1,r4,#13
000032  4308              ORRS     r0,r0,r1
000034  6020              STR      r0,[r4,#0]
000036  1548              ASRS     r0,r1,#21
000038  4910              LDR      r1,|L4.124|
00003a  6008              STR      r0,[r1,#0]
00003c  6820              LDR      r0,[r4,#0]
00003e  0589              LSLS     r1,r1,#22
000040  4308              ORRS     r0,r0,r1
000042  6020              STR      r0,[r4,#0]
;;;144        TIMER_EnableInt(TIMER0);
;;;145    
;;;146        /* Enable Timer0 ~ Timer3 NVIC */
;;;147        NVIC_EnableIRQ(TMR0_IRQn);
;;;148    
;;;149        /* Start Timer0 ~ Timer3 counting */
;;;150        TIMER_Start(TIMER0);		
;;;151    		
;;;152    		//GPIO_SetMode(P4, BIT1, GPIO_PMD_OUTPUT);
;;;153    		//GPIO_SetMode(P0, BIT7, GPIO_PMD_OUTPUT);
;;;154    		GPIO_SetMode(P1, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000044  2201              MOVS     r2,#1
000046  21ff              MOVS     r1,#0xff
000048  480d              LDR      r0,|L4.128|
00004a  f7fffffe          BL       GPIO_SetMode
;;;155    		GPIO_SetMode(P2, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
00004e  480c              LDR      r0,|L4.128|
000050  2201              MOVS     r2,#1
000052  21ff              MOVS     r1,#0xff
000054  3040              ADDS     r0,r0,#0x40
000056  f7fffffe          BL       GPIO_SetMode
;;;156    		GPIO_SetMode(P3, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
00005a  4809              LDR      r0,|L4.128|
00005c  2201              MOVS     r2,#1
00005e  21ff              MOVS     r1,#0xff
000060  3080              ADDS     r0,r0,#0x80
000062  f7fffffe          BL       GPIO_SetMode
;;;157    		GPIO_SetMode(P4, BIT0 | BIT1 | BIT2 | BIT3 | BIT4 | BIT5 | BIT6 | BIT7, GPIO_PMD_OUTPUT);
000066  4806              LDR      r0,|L4.128|
000068  2201              MOVS     r2,#1
00006a  21ff              MOVS     r1,#0xff
00006c  30c0              ADDS     r0,r0,#0xc0
00006e  f7fffffe          BL       GPIO_SetMode
                  |L4.114|
;;;158    
;;;159        while(1);
000072  e7fe              B        |L4.114|
;;;160    
;;;161    }
;;;162    
                          ENDP

                  |L4.116|
                          DCD      0x50000100
                  |L4.120|
                          DCD      0x40010000
                  |L4.124|
                          DCD      0xe000e100
                  |L4.128|
                          DCD      0x50004040

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_d50ddd2d____REV16|
#line 118 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_d50ddd2d____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_d50ddd2d____REVSH|
#line 132
|__asm___6_main_c_d50ddd2d____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
