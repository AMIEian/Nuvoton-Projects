; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\int_handler.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\int_handler.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\Library\StdDriver\inc -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\int_handler.crf ..\int_handler.c]
                          THUMB

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;14     
;;;15     void TMR0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4805              LDR      r0,|L1.24|
000004  6881              LDR      r1,[r0,#8]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;16     {
00000a  d003              BEQ      |L1.20|
00000c  2101              MOVS     r1,#1
00000e  6081              STR      r1,[r0,#8]
;;;17         if (TIMER_GetIntFlag(TIMER0))
;;;18         {
;;;19             /* Clear Timer0 time-out interrupt flag */
;;;20             TIMER_ClearIntFlag(TIMER0);
;;;21     				TIMER0_LOGIC();
000010  f7fffffe          BL       TIMER0_LOGIC
                  |L1.20|
;;;22         }
;;;23     
;;;24     }
000014  bd10              POP      {r4,pc}
;;;25     void UART0_IRQHandler(void)
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40050000

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART02_IRQHandler PROC
;;;103    
;;;104    void UART02_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106    
;;;107        UART0_IRQHandler();
000002  f7fffffe          BL       UART0_IRQHandler
;;;108    
;;;109    }
000006  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  UART0_IRQHandler PROC
;;;24     }
;;;25     void UART0_IRQHandler(void)
000000  b538              PUSH     {r3-r5,lr}
;;;26     {
;;;27     
;;;28         uint32_t u32IntSts = UART0->INTSTS;
000002  4d2a              LDR      r5,|L3.172|
000004  69ec              LDR      r4,[r5,#0x1c]
;;;29         uint32_t u32WKSts  = UART0->WKSTS;
000006  4829              LDR      r0,|L3.172|
000008  3040              ADDS     r0,r0,#0x40
00000a  6840              LDR      r0,[r0,#4]
;;;30         volatile uint8_t u8InChar = 0xFF;
00000c  20ff              MOVS     r0,#0xff
00000e  4669              MOV      r1,sp
000010  7008              STRB     r0,[r1,#0]
;;;31         uint32_t u32Data;
;;;32     
;;;33         /* Auto-baud Rate Interrupt */
;;;34         if (u32IntSts & UART_INTSTS_ABRINT_Msk)
000012  2c00              CMP      r4,#0
000014  da01              BGE      |L3.26|
;;;35         {
;;;36             UART0->FIFOSTS = (UART_FIFOSTS_ABRDIF_Msk | UART_FIFOSTS_ABRDTOIF_Msk);
000016  2006              MOVS     r0,#6
000018  61a8              STR      r0,[r5,#0x18]
                  |L3.26|
;;;37         }
;;;38     
;;;39         /* MODEM Status Interrupt */
;;;40         if (u32IntSts & UART_INTSTS_MODEMIF_Msk)
00001a  0720              LSLS     r0,r4,#28
00001c  d504              BPL      |L3.40|
;;;41         {
;;;42             /*Clear nCTS State Change Flag*/
;;;43             UART_ClearIntFlag(UART0, UART_INTSTS_MODEMINT_Msk);
00001e  2101              MOVS     r1,#1
000020  02c9              LSLS     r1,r1,#11
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       UART_ClearIntFlag
                  |L3.40|
;;;44         }
;;;45     
;;;46         /* Receive Line Status Interrupt */
;;;47         if (u32IntSts & UART_INTSTS_RLSIF_Msk)
000028  0760              LSLS     r0,r4,#29
00002a  d51a              BPL      |L3.98|
;;;48         {
;;;49             if (UART0->FIFOSTS & UART_FIFOSTS_BIF_Msk)
00002c  69a8              LDR      r0,[r5,#0x18]
00002e  0640              LSLS     r0,r0,#25
000030  d502              BPL      |L3.56|
;;;50                 printf("\n BIF \n");
000032  a01f              ADR      r0,|L3.176|
000034  f7fffffe          BL       __2printf
                  |L3.56|
;;;51     
;;;52             if (UART0->FIFOSTS & UART_FIFOSTS_FEF_Msk)
000038  69a8              LDR      r0,[r5,#0x18]
00003a  0680              LSLS     r0,r0,#26
00003c  d502              BPL      |L3.68|
;;;53                 printf("\n FEF \n");
00003e  a01e              ADR      r0,|L3.184|
000040  f7fffffe          BL       __2printf
                  |L3.68|
;;;54     
;;;55             if (UART0->FIFOSTS & UART_FIFOSTS_PEF_Msk)
000044  69a8              LDR      r0,[r5,#0x18]
000046  06c0              LSLS     r0,r0,#27
000048  d502              BPL      |L3.80|
;;;56                 printf("\n PEF \n");
00004a  a01d              ADR      r0,|L3.192|
00004c  f7fffffe          BL       __2printf
                  |L3.80|
;;;57     
;;;58             u32Data = UART0->DAT; // read out data
000050  6829              LDR      r1,[r5,#0]
;;;59             printf("\n Error Data is '0x%x' \n", u32Data);
000052  a01d              ADR      r0,|L3.200|
000054  f7fffffe          BL       __2printf
;;;60             UART_ClearIntFlag(UART0, UART_INTSTS_RLSINT_Msk);
000058  2101              MOVS     r1,#1
00005a  0289              LSLS     r1,r1,#10
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       UART_ClearIntFlag
                  |L3.98|
;;;61         }
;;;62     
;;;63         if ((u32IntSts & UART_INTSTS_RDAINT_Msk) || (u32IntSts & UART_INTSTS_RXTOINT_Msk))/* Rx Ready or Time-out INT*/
000062  2011              MOVS     r0,#0x11
000064  0200              LSLS     r0,r0,#8
000066  4204              TST      r4,r0
000068  d106              BNE      |L3.120|
00006a  e008              B        |L3.126|
                  |L3.108|
;;;64         {
;;;65             /* Get all the input characters */
;;;66             while (!UART_GET_RX_EMPTY(UART0))
;;;67             {
;;;68                 /* Get the character from UART Buffer */
;;;69                 u8InChar = UART_READ(UART0);
00006c  6829              LDR      r1,[r5,#0]
00006e  4668              MOV      r0,sp
000070  7001              STRB     r1,[r0,#0]
;;;70                 /* ToDo : User handle read data here */
;;;71                 //printf("0x%x\n", u8InChar);
;;;72     						UART_LOGIC(u8InChar);
000072  7800              LDRB     r0,[r0,#0]
000074  f7fffffe          BL       UART_LOGIC
                  |L3.120|
000078  69a8              LDR      r0,[r5,#0x18]         ;66
00007a  0440              LSLS     r0,r0,#17             ;66
00007c  d5f6              BPL      |L3.108|
                  |L3.126|
;;;73     						//PC3 = 0;
;;;74     						//printf("0x%x\n", u8InChar);
;;;75     						//printf("%c\n", (char)u8InChar);
;;;76     						//PC3 = 1;
;;;77             }
;;;78         }
;;;79     
;;;80         /* Buffer Error Interrupt  */
;;;81         if (u32IntSts & UART_INTSTS_BUFERRINT_Msk)     /* Buffer Error INT */
00007e  04a0              LSLS     r0,r4,#18
000080  d507              BPL      |L3.146|
;;;82         {
;;;83             printf("\nBuffer Error...\n");
000082  a018              ADR      r0,|L3.228|
000084  f7fffffe          BL       __2printf
;;;84             UART_ClearIntFlag(UART0, UART_INTSTS_BUFERRINT_Msk);
000088  2101              MOVS     r1,#1
00008a  0349              LSLS     r1,r1,#13
00008c  4628              MOV      r0,r5
00008e  f7fffffe          BL       UART_ClearIntFlag
                  |L3.146|
;;;85         }
;;;86     
;;;87         /* If you would like to use  "Transmit Holding Register Empty Interrupt  or  Transmitter Empty Interrupt ",you can add this code. */
;;;88         //    if ((u32IntSts & UART_INTSTS_THREINT_Msk) || (u32IntSts & UART_INTSTS_TXENDIF_Msk) )
;;;89         //    {
;;;90         //      while (UART_IS_TX_FULL(UART0)){} /* Wait Tx is not full to transmit data */
;;;91         //      UART_WRITE(UART0, u8InChar);
;;;92         //    }
;;;93     
;;;94         /* UART Wake-up Interrupt  */
;;;95         if (u32IntSts & UART_INTSTS_WKIF_Msk)
000092  0660              LSLS     r0,r4,#25
000094  d508              BPL      |L3.168|
;;;96         {
;;;97             printf("\n UART Wake-Up ");
000096  a018              ADR      r0,|L3.248|
000098  f7fffffe          BL       __2printf
;;;98             UART0->INTSTS = UART_INTSTS_WKIF_Msk;
00009c  2140              MOVS     r1,#0x40
00009e  4628              MOV      r0,r5
0000a0  61e9              STR      r1,[r5,#0x1c]
;;;99             UART_ClearIntFlag(UART0, UART_INTSTS_WKINT_Msk);
0000a2  0209              LSLS     r1,r1,#8
0000a4  f7fffffe          BL       UART_ClearIntFlag
                  |L3.168|
;;;100        }
;;;101    
;;;102    }
0000a8  bd38              POP      {r3-r5,pc}
;;;103    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L3.172|
                          DCD      0x40070000
                  |L3.176|
0000b0  0a204249          DCB      "\n BIF \n",0
0000b4  46200a00
                  |L3.184|
0000b8  0a204645          DCB      "\n FEF \n",0
0000bc  46200a00
                  |L3.192|
0000c0  0a205045          DCB      "\n PEF \n",0
0000c4  46200a00
                  |L3.200|
0000c8  0a204572          DCB      "\n Error Data is '0x%x' \n",0
0000cc  726f7220
0000d0  44617461
0000d4  20697320
0000d8  27307825
0000dc  7827200a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L3.228|
0000e4  0a427566          DCB      "\nBuffer Error...\n",0
0000e8  66657220
0000ec  4572726f
0000f0  722e2e2e
0000f4  0a00    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L3.248|
0000f8  0a205541          DCB      "\n UART Wake-Up ",0
0000fc  52542057
000100  616b652d
000104  55702000

;*** Start embedded assembler ***

#line 1 "..\\int_handler.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_int_handler_c_d50ddd2d____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_int_handler_c_d50ddd2d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_int_handler_c_d50ddd2d____REVSH|
#line 402
|__asm___13_int_handler_c_d50ddd2d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
