; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\clk_conf.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clk_conf.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\Library\StdDriver\inc -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\clk_conf.crf ..\clk_conf.c]
                          THUMB

                          AREA ||i.Clock_Init||, CODE, READONLY, ALIGN=1

                  Clock_Init PROC
;;;72     
;;;73     void Clock_Init(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75         /*---------------------------------------------------------------------------------------------------------*/
;;;76         /* Init System Clock                                                                                       */
;;;77         /*---------------------------------------------------------------------------------------------------------*/
;;;78         //CLK->PWRCTL   = (CLK->PWRCTL   & ~(0x0000000FUL)) | 0x02310014UL;
;;;79         //CLK->PLLCTL   = (CLK->PLLCTL   & ~(0x000FFFFFUL)) | 0x0005C25EUL;
;;;80         //CLK->CLKDIV0  = (CLK->CLKDIV0  & ~(0x00FFFFFFUL)) | 0x00000000UL;
;;;81         //CLK->CLKDIV4  = (CLK->CLKDIV4  & ~(0x00FFFFFFUL)) | 0x00000000UL;
;;;82         //CLK->PCLKDIV  = (CLK->PCLKDIV  & ~(0x00000077UL)) | 0x00000000UL;
;;;83         //CLK->CLKSEL0  = (CLK->CLKSEL0  & ~(0x0000013FUL)) | 0x0000003FUL;
;;;84         //CLK->CLKSEL1  = (CLK->CLKSEL1  & ~(0x7777777FUL)) | 0x4477773BUL;
;;;85         //CLK->CLKSEL2  = (CLK->CLKSEL2  & ~(0x0030033FUL)) | 0x0020032BUL;
;;;86         //CLK->CLKSEL3  = (CLK->CLKSEL3  & ~(0x77777700UL)) | 0x44444400UL;
;;;87         //CLK->AHBCLK   = (CLK->AHBCLK   & ~(0x0000009EUL)) | 0x00000004UL;
;;;88         //CLK->APBCLK0  = (CLK->APBCLK0  & ~(0x18FF33FFUL)) | 0x00010000UL;
;;;89         //CLK->APBCLK1  = (CLK->APBCLK1  & ~(0x000F0300UL)) | 0x00000000UL;
;;;90         //CLK->CLKOCTL  = (CLK->CLKOCTL  & ~(0x0000007FUL)) | 0x00000000UL;
;;;91         //SysTick->CTRL = (SysTick->CTRL & ~(0x00000005UL)) | 0x00000000UL;
;;;92         //RTC->LXTCTL   = (RTC->LXTCTL   & ~(0x00000080UL)) | 0x00000000UL;
;;;93     
;;;94         /* Enable base clock */
;;;95         MyProject_init_base();
000002  f7fffffe          BL       MyProject_init_base
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       CLK_EnableModuleClock
;;;96     
;;;97         /* Enable module clock and set clock source */
;;;98         MyProject_init_isp();
;;;99         MyProject_init_uart0();
00000c  f7fffffe          BL       MyProject_init_uart0
;;;100    
;;;101        /* Update System Core Clock */
;;;102        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;103        SystemCoreClockUpdate();
000010  f7fffffe          BL       SystemCoreClockUpdate
;;;104    
;;;105        return;
;;;106    }
000014  bd10              POP      {r4,pc}
;;;107    
                          ENDP


                          AREA ||i.MyProject_deinit_isp||, CODE, READONLY, ALIGN=1

                  MyProject_deinit_isp PROC
;;;33     
;;;34     void MyProject_deinit_isp(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36         CLK_DisableModuleClock(ISP_MODULE);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       CLK_DisableModuleClock
;;;37     
;;;38         return;
;;;39     }
000008  bd10              POP      {r4,pc}
;;;40     
                          ENDP


                          AREA ||i.MyProject_deinit_uart0||, CODE, READONLY, ALIGN=2

                  MyProject_deinit_uart0 PROC
;;;48     
;;;49     void MyProject_deinit_uart0(void)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51         CLK_DisableModuleClock(UART0_MODULE);
000002  4802              LDR      r0,|L3.12|
000004  f7fffffe          BL       CLK_DisableModuleClock
;;;52     
;;;53         return;
;;;54     }
000008  bd10              POP      {r4,pc}
;;;55     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x5f803d10

                          AREA ||i.MyProject_init_base||, CODE, READONLY, ALIGN=2

                  MyProject_init_base PROC
;;;55     
;;;56     void MyProject_init_base(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58         /* Enable clock source */
;;;59         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;60     
;;;61         /* Waiting for clock source ready */
;;;62         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;63     
;;;64         /* Set HCLK clock */
;;;65         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;66     
;;;67         /* Set PCLK-related clock */
;;;68         CLK->PCLKDIV = (CLK_PCLKDIV_APB0DIV_DIV1 | CLK_PCLKDIV_APB1DIV_DIV1);
000016  4902              LDR      r1,|L4.32|
000018  2000              MOVS     r0,#0
00001a  6348              STR      r0,[r1,#0x34]
;;;69     
;;;70         return;
;;;71     }
00001c  bd10              POP      {r4,pc}
;;;72     
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40000200

                          AREA ||i.MyProject_init_isp||, CODE, READONLY, ALIGN=1

                  MyProject_init_isp PROC
;;;26     
;;;27     void MyProject_init_isp(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29         CLK_EnableModuleClock(ISP_MODULE);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;30     
;;;31         return;
;;;32     }
000008  bd10              POP      {r4,pc}
;;;33     
                          ENDP


                          AREA ||i.MyProject_init_uart0||, CODE, READONLY, ALIGN=2

                  MyProject_init_uart0 PROC
;;;40     
;;;41     void MyProject_init_uart0(void)
000000  b510              PUSH     {r4,lr}
;;;42     {
;;;43         CLK_EnableModuleClock(UART0_MODULE);
000002  4c05              LDR      r4,|L6.24|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CLK_EnableModuleClock
;;;44         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
00000a  2101              MOVS     r1,#1
00000c  2200              MOVS     r2,#0
00000e  0689              LSLS     r1,r1,#26
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       CLK_SetModuleClock
;;;45     
;;;46         return;
;;;47     }
000016  bd10              POP      {r4,pc}
;;;48     
                          ENDP

                  |L6.24|
                          DCD      0x5f803d10

;*** Start embedded assembler ***

#line 1 "..\\clk_conf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_clk_conf_c_3f2c7e15____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_clk_conf_c_3f2c7e15____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_clk_conf_c_3f2c7e15____REVSH|
#line 402
|__asm___10_clk_conf_c_3f2c7e15____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
