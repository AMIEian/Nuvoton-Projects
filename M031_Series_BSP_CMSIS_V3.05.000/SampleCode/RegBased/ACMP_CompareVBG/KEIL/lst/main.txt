; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=535 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;403    
;;;404    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c29              LDR      r4,|L1.172|
000006  2116              MOVS     r1,#0x16
000008  2288              MOVS     r2,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6021              STR      r1,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;405    {
;;;406    SYS_UnlockReg() ;
;;;407    CLK->PWRCTL |=CLK_PWRCTL_HIRCEN_Msk ;
000016  4826              LDR      r0,|L1.176|
000018  6801              LDR      r1,[r0,#0]
00001a  2204              MOVS     r2,#4
00001c  4311              ORRS     r1,r1,r2
00001e  6001              STR      r1,[r0,#0]
;;;408    while( (CLK->STATUS & CLK_STATUS_HIRCSTB_Msk) !=CLK_STATUS_HIRCSTB_Msk) ;
000020  4923              LDR      r1,|L1.176|
000022  3140              ADDS     r1,r1,#0x40
                  |L1.36|
000024  690a              LDR      r2,[r1,#0x10]
000026  06d2              LSLS     r2,r2,#27
000028  d5fc              BPL      |L1.36|
;;;409    CLK->CLKSEL0=(CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLKSEL_Msk) | CLK_CLKSEL0_HCLKSEL_HIRC ;
00002a  6901              LDR      r1,[r0,#0x10]
00002c  2207              MOVS     r2,#7
00002e  4311              ORRS     r1,r1,r2
000030  6101              STR      r1,[r0,#0x10]
;;;410    CLK->CLKDIV0=(CLK->CLKDIV0 & ~CLK_CLKDIV0_HCLKDIV_Msk) | CLK_CLKDIV0_HCLK(1) ;
000032  6a01              LDR      r1,[r0,#0x20]
000034  0909              LSRS     r1,r1,#4
000036  0109              LSLS     r1,r1,#4
000038  6201              STR      r1,[r0,#0x20]
;;;411    CLK->PCLKDIV=CLK_PCLKDIV_APB0DIV_DIV2 | CLK_PCLKDIV_APB1DIV_DIV2 ;
00003a  2111              MOVS     r1,#0x11
00003c  6341              STR      r1,[r0,#0x34]
;;;412    CLK->APBCLK0 |=(CLK_APBCLK0_UART1CKEN_Msk | CLK_APBCLK0_UART2CKEN_Msk) ;
00003e  6881              LDR      r1,[r0,#8]
000040  2203              MOVS     r2,#3
000042  0452              LSLS     r2,r2,#17
000044  4311              ORRS     r1,r1,r2
000046  6081              STR      r1,[r0,#8]
;;;413    CLK->CLKSEL1=(CLK->CLKSEL1 & ~CLK_CLKSEL1_UART1SEL_Msk) | CLK_CLKSEL1_UART1SEL_HIRC ;
000048  6941              LDR      r1,[r0,#0x14]
00004a  2207              MOVS     r2,#7
00004c  0712              LSLS     r2,r2,#28
00004e  4391              BICS     r1,r1,r2
000050  2203              MOVS     r2,#3
000052  0712              LSLS     r2,r2,#28
000054  1889              ADDS     r1,r1,r2
000056  6141              STR      r1,[r0,#0x14]
;;;414    CLK->CLKDIV0=(CLK->CLKDIV0 & ~CLK_CLKDIV0_UART1DIV_Msk) | CLK_CLKDIV0_UART1(1) ;
000058  6a01              LDR      r1,[r0,#0x20]
00005a  220f              MOVS     r2,#0xf
00005c  0312              LSLS     r2,r2,#12
00005e  4391              BICS     r1,r1,r2
000060  6201              STR      r1,[r0,#0x20]
;;;415    CLK->CLKSEL3=(CLK->CLKSEL3 & ~CLK_CLKSEL3_UART2SEL_Msk) | CLK_CLKSEL3_UART2SEL_HIRC ;
000062  69c1              LDR      r1,[r0,#0x1c]
000064  2207              MOVS     r2,#7
000066  0612              LSLS     r2,r2,#24
000068  4391              BICS     r1,r1,r2
00006a  2203              MOVS     r2,#3
00006c  0612              LSLS     r2,r2,#24
00006e  1889              ADDS     r1,r1,r2
000070  61c1              STR      r1,[r0,#0x1c]
;;;416    CLK->CLKDIV4=(CLK->CLKDIV4 & ~CLK_CLKDIV4_UART2DIV_Msk) | CLK_CLKDIV4_UART2(1) ;
000072  6b01              LDR      r1,[r0,#0x30]
000074  0909              LSRS     r1,r1,#4
000076  0109              LSLS     r1,r1,#4
000078  6301              STR      r1,[r0,#0x30]
;;;417    SystemCoreClockUpdate() ;
00007a  f7fffffe          BL       SystemCoreClockUpdate
;;;418    SYS->GPA_MFPL=(SYS->GPA_MFPL &~(SYS_GPA_MFPL_PA2MFP_Msk | SYS_GPA_MFPL_PA3MFP_Msk) )
00007e  2001              MOVS     r0,#1
000080  0780              LSLS     r0,r0,#30
000082  6b01              LDR      r1,[r0,#0x30]
000084  22ff              MOVS     r2,#0xff
000086  0212              LSLS     r2,r2,#8
000088  4391              BICS     r1,r1,r2
00008a  2211              MOVS     r2,#0x11
00008c  02d2              LSLS     r2,r2,#11
00008e  1889              ADDS     r1,r1,r2
000090  6301              STR      r1,[r0,#0x30]
;;;419     | SYS_GPA_MFPL_PA2MFP_UART1_RXD | SYS_GPA_MFPL_PA3MFP_UART1_TXD ;
;;;420    SYS->GPF_MFPL=(SYS->GPF_MFPL &~(SYS_GPF_MFPL_PF5MFP_Msk | SYS_GPF_MFPL_PF4MFP_Msk) )
000092  4806              LDR      r0,|L1.172|
000094  38c0              SUBS     r0,r0,#0xc0
000096  6981              LDR      r1,[r0,#0x18]
000098  22ff              MOVS     r2,#0xff
00009a  0412              LSLS     r2,r2,#16
00009c  4391              BICS     r1,r1,r2
00009e  2211              MOVS     r2,#0x11
0000a0  0452              LSLS     r2,r2,#17
0000a2  1889              ADDS     r1,r1,r2
0000a4  6181              STR      r1,[r0,#0x18]
0000a6  2000              MOVS     r0,#0
0000a8  6020              STR      r0,[r4,#0]
;;;421     | SYS_GPF_MFPL_PF5MFP_UART2_RXD | SYS_GPF_MFPL_PF4MFP_UART2_TXD ;
;;;422    SYS_LockReg();
;;;423    }
0000aa  bd10              POP      {r4,pc}
;;;424    
                          ENDP

                  |L1.172|
                          DCD      0x40000100
                  |L1.176|
                          DCD      0x40000200

                          AREA ||i.UART13_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART13_IRQHandler PROC
;;;374    
;;;375    void UART13_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;376    {
;;;377    if(UART1->INTSTS & UART_INTSTS_RDAINT_Msk)
000002  4807              LDR      r0,|L2.32|
000004  69c1              LDR      r1,[r0,#0x1c]
000006  05c9              LSLS     r1,r1,#23
000008  d509              BPL      |L2.30|
;;;378      {
;;;379      while(UART1->INTSTS & UART_INTSTS_RDAIF_Msk) 
;;;380        {
;;;381        bfrxfls[0]=UART1->DAT ;
00000a  4906              LDR      r1,|L2.36|
;;;382        brxfls=1 ;
00000c  4c06              LDR      r4,|L2.40|
00000e  2201              MOVS     r2,#1
                  |L2.16|
000010  69c3              LDR      r3,[r0,#0x1c]         ;379
000012  07db              LSLS     r3,r3,#31             ;379
000014  d003              BEQ      |L2.30|
000016  6803              LDR      r3,[r0,#0]            ;381
000018  800b              STRH     r3,[r1,#0]            ;381
00001a  80a2              STRH     r2,[r4,#4]
00001c  e7f8              B        |L2.16|
                  |L2.30|
;;;383        }
;;;384      }
;;;385    }
00001e  bd10              POP      {r4,pc}
;;;386    
                          ENDP

                  |L2.32|
                          DCD      0x40071000
                  |L2.36|
                          DCD      ||.bss||+0x10
                  |L2.40|
                          DCD      ||.data||

                          AREA ||i.UART1_Init||, CODE, READONLY, ALIGN=2

                  UART1_Init PROC
;;;424    
;;;425    void UART1_Init(void)
000000  2001              MOVS     r0,#1
;;;426    {
;;;427    SYS->IPRST1 |=SYS_IPRST1_UART1RST_Msk ;
000002  0780              LSLS     r0,r0,#30
000004  68c2              LDR      r2,[r0,#0xc]
000006  1341              ASRS     r1,r0,#13
000008  430a              ORRS     r2,r2,r1
00000a  60c2              STR      r2,[r0,#0xc]
;;;428    SYS->IPRST1 &=~SYS_IPRST1_UART1RST_Msk ;
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  438a              BICS     r2,r2,r1
000010  60c2              STR      r2,[r0,#0xc]
;;;429    UART1->BAUD=UART_BAUD_MODE2 | UART_BAUD_MODE2_DIVIDER(__HIRC,9600) ;
000012  4806              LDR      r0,|L3.44|
000014  4904              LDR      r1,|L3.40|
000016  6241              STR      r1,[r0,#0x24]
;;;430    UART1->LINE=UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1 ;
000018  2103              MOVS     r1,#3
00001a  60c1              STR      r1,[r0,#0xc]
;;;431    UART1->INTEN |=UART_INTEN_RDAIEN_Msk ;
00001c  6841              LDR      r1,[r0,#4]
00001e  2201              MOVS     r2,#1
000020  4311              ORRS     r1,r1,r2
000022  6041              STR      r1,[r0,#4]
;;;432    }
000024  4770              BX       lr
;;;433    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x30001386
                  |L3.44|
                          DCD      0x40071000

                          AREA ||i.UART2_Init||, CODE, READONLY, ALIGN=2

                  UART2_Init PROC
;;;433    
;;;434    void UART2_Init(void)
000000  2001              MOVS     r0,#1
;;;435    {
;;;436    SYS->IPRST1 |=SYS_IPRST1_UART2RST_Msk ;
000002  0780              LSLS     r0,r0,#30
000004  68c2              LDR      r2,[r0,#0xc]
000006  1301              ASRS     r1,r0,#12
000008  430a              ORRS     r2,r2,r1
00000a  60c2              STR      r2,[r0,#0xc]
;;;437    SYS->IPRST1 &=~SYS_IPRST1_UART2RST_Msk ;
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  438a              BICS     r2,r2,r1
000010  60c2              STR      r2,[r0,#0xc]
;;;438    UART2->BAUD=UART_BAUD_MODE2 | UART_BAUD_MODE2_DIVIDER(__HIRC,9600) ;
000012  4804              LDR      r0,|L4.36|
000014  4902              LDR      r1,|L4.32|
000016  6241              STR      r1,[r0,#0x24]
;;;439    UART2->LINE=UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1 ;
000018  2103              MOVS     r1,#3
00001a  60c1              STR      r1,[r0,#0xc]
;;;440    }
00001c  4770              BX       lr
;;;441    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x30001386
                  |L4.36|
                          DCD      0x40072000

                          AREA ||i.driveReady||, CODE, READONLY, ALIGN=2

                  driveReady PROC
;;;715    
;;;716    uint8_t driveReady(){//returns TRUE if the drive ready
000000  b510              PUSH     {r4,lr}
;;;717    	uint8_t tmpReturn = 0;	
;;;718    	tmpReturn = mount();
000002  f7fffffe          BL       mount
;;;719    	if(tmpReturn == ANSW_USB_INT_SUCCESS){
000006  2814              CMP      r0,#0x14
000008  d101              BNE      |L5.14|
;;;720    			rdDiskInfo();
00000a  f7fffffe          BL       rdDiskInfo
                  |L5.14|
;;;721    		}//end if not INT SUCCESS
;;;722    	return _deviceAttached;
00000e  4801              LDR      r0,|L5.20|
000010  7800              LDRB     r0,[r0,#0]  ; _deviceAttached
;;;723    }
000012  bd10              POP      {r4,pc}
;;;724    
                          ENDP

                  |L5.20|
                          DCD      ||.data||

                          AREA ||i.fn_16tonib||, CODE, READONLY, ALIGN=2

                  fn_16tonib PROC
;;;560    
;;;561    void fn_16tonib(uint16_t b16) 
000000  0702              LSLS     r2,r0,#28
;;;562    {
;;;563    bcd[0]=b16 & 0x0f ;
000002  4907              LDR      r1,|L6.32|
000004  0f12              LSRS     r2,r2,#28
000006  800a              STRH     r2,[r1,#0]
;;;564    b16>>=4 ;
000008  0900              LSRS     r0,r0,#4
;;;565    bcd[1]=b16 & 0x0f ;
00000a  0702              LSLS     r2,r0,#28
00000c  0f12              LSRS     r2,r2,#28
00000e  804a              STRH     r2,[r1,#2]
;;;566    b16>>=4 ;
000010  0900              LSRS     r0,r0,#4
;;;567    bcd[2]=b16 & 0x0f ;
000012  0702              LSLS     r2,r0,#28
000014  0f12              LSRS     r2,r2,#28
000016  808a              STRH     r2,[r1,#4]
;;;568    b16>>=4 ;
000018  0900              LSRS     r0,r0,#4
;;;569    bcd[3]=b16 ;
00001a  80c8              STRH     r0,[r1,#6]
;;;570    }  
00001c  4770              BX       lr
;;;571    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      ||.bss||

                          AREA ||i.fn_asc2nib||, CODE, READONLY, ALIGN=1

                  fn_asc2nib PROC
;;;581    
;;;582    uint16_t fn_asc2nib(uint16_t asc)
000000  4602              MOV      r2,r0
;;;583    {
;;;584    uint16_t nib=0 ;                
000002  2100              MOVS     r1,#0
;;;585    if(asc>='0' && asc<='9')
000004  3a30              SUBS     r2,r2,#0x30
000006  2a09              CMP      r2,#9
000008  d801              BHI      |L7.14|
;;;586      nib=asc-'0' ;
00000a  b291              UXTH     r1,r2
00000c  e00b              B        |L7.38|
                  |L7.14|
;;;587    else if(asc>='A' && asc<='F')
00000e  4602              MOV      r2,r0
000010  3a41              SUBS     r2,r2,#0x41
000012  2a05              CMP      r2,#5
000014  d801              BHI      |L7.26|
000016  3837              SUBS     r0,r0,#0x37
;;;588      nib=asc-'A'+10 ;
000018  e004              B        |L7.36|
                  |L7.26|
;;;589    else if(asc>='a' && asc<='f')
00001a  4602              MOV      r2,r0
00001c  3a61              SUBS     r2,r2,#0x61
00001e  2a05              CMP      r2,#5
000020  d801              BHI      |L7.38|
000022  3857              SUBS     r0,r0,#0x57
                  |L7.36|
;;;590      nib=asc-'a'+10 ;
000024  b281              UXTH     r1,r0
                  |L7.38|
;;;591    return nib ; 		
000026  4608              MOV      r0,r1
;;;592    }
000028  4770              BX       lr
;;;593    
                          ENDP


                          AREA ||i.fn_bin2bcd||, CODE, READONLY, ALIGN=2

                  fn_bin2bcd PROC
;;;515    
;;;516    uint16_t fn_bin2bcd(float bin)
000000  b5f8              PUSH     {r3-r7,lr}
;;;517    {
;;;518    uint8_t bmnus=0 ;
000002  2500              MOVS     r5,#0
;;;519    bcd[0]=0 ;
000004  4c26              LDR      r4,|L8.160|
;;;520    bcd[1]=0 ;
;;;521    bcd[2]=0 ;
;;;522    bcd[3]=0 ;
;;;523    bcd[4]=0 ;
;;;524    bcd[5]=0 ;
;;;525    if(bin<0)
000006  21ff              MOVS     r1,#0xff
000008  8025              STRH     r5,[r4,#0]            ;519
00000a  8065              STRH     r5,[r4,#2]            ;520
00000c  80a5              STRH     r5,[r4,#4]            ;521
00000e  80e5              STRH     r5,[r4,#6]            ;522
000010  8125              STRH     r5,[r4,#8]            ;523
000012  05c9              LSLS     r1,r1,#23
000014  8165              STRH     r5,[r4,#0xa]          ;524
000016  42c8              CMN      r0,r1
000018  d302              BCC      |L8.32|
;;;526      {
;;;527      bin=0-bin ;
00001a  0209              LSLS     r1,r1,#8
00001c  4048              EORS     r0,r0,r1
;;;528      bmnus=1 ; 
00001e  2501              MOVS     r5,#1
                  |L8.32|
;;;529      }
;;;530    if(bin>999999)
000020  4920              LDR      r1,|L8.164|
000022  4288              CMP      r0,r1
000024  dd06              BLE      |L8.52|
;;;531      bin=999999 ;
000026  4608              MOV      r0,r1
                  |L8.40|
;;;532    while(bin>99999)
;;;533      {
;;;534      bin-=100000 ;
000028  491f              LDR      r1,|L8.168|
00002a  f7fffffe          BL       __aeabi_fsub
;;;535        ++bcd[5] ;
00002e  8961              LDRH     r1,[r4,#0xa]  ; bcd
000030  1c49              ADDS     r1,r1,#1
000032  8161              STRH     r1,[r4,#0xa]
                  |L8.52|
000034  491c              LDR      r1,|L8.168|
000036  3980              SUBS     r1,r1,#0x80           ;532
000038  4288              CMP      r0,r1                 ;532
00003a  dcf5              BGT      |L8.40|
;;;536      }	
;;;537    while(bin>9999)
;;;538      {
;;;539      bin-=10000 ;
00003c  4f1b              LDR      r7,|L8.172|
00003e  4e1c              LDR      r6,|L8.176|
                  |L8.64|
000040  42b0              CMP      r0,r6                 ;537
000042  dd0d              BLE      |L8.96|
000044  4639              MOV      r1,r7
000046  f7fffffe          BL       __aeabi_fsub
;;;540    	++bcd[4] ;
00004a  8921              LDRH     r1,[r4,#8]  ; bcd
00004c  1c49              ADDS     r1,r1,#1
00004e  8121              STRH     r1,[r4,#8]
000050  e7f6              B        |L8.64|
                  |L8.82|
;;;541      }	
;;;542    while(bin>999)
;;;543      {
;;;544      bin-=1000 ;
000052  4639              MOV      r1,r7
000054  f7fffffe          BL       __aeabi_fsub
;;;545    	++bcd[3] ;
000058  88e1              LDRH     r1,[r4,#6]  ; bcd
00005a  1c49              ADDS     r1,r1,#1
00005c  80e1              STRH     r1,[r4,#6]
00005e  e001              B        |L8.100|
                  |L8.96|
000060  4f14              LDR      r7,|L8.180|
000062  4e15              LDR      r6,|L8.184|
                  |L8.100|
000064  42b0              CMP      r0,r6                 ;542
000066  dcf4              BGT      |L8.82|
;;;546      }	
;;;547    while(bin>99)
;;;548      {
;;;549      bin-=100 ;
000068  4f14              LDR      r7,|L8.188|
00006a  4e15              LDR      r6,|L8.192|
                  |L8.108|
00006c  42b0              CMP      r0,r6                 ;547
00006e  dd0d              BLE      |L8.140|
000070  4639              MOV      r1,r7
000072  f7fffffe          BL       __aeabi_fsub
;;;550    	++bcd[2] ;
000076  88a1              LDRH     r1,[r4,#4]  ; bcd
000078  1c49              ADDS     r1,r1,#1
00007a  80a1              STRH     r1,[r4,#4]
00007c  e7f6              B        |L8.108|
                  |L8.126|
;;;551      }	
;;;552    while(bin>9)
;;;553      {
;;;554      bin-=10 ;
00007e  4639              MOV      r1,r7
000080  f7fffffe          BL       __aeabi_fsub
;;;555    	++bcd[1] ;
000084  8861              LDRH     r1,[r4,#2]  ; bcd
000086  1c49              ADDS     r1,r1,#1
000088  8061              STRH     r1,[r4,#2]
00008a  e001              B        |L8.144|
                  |L8.140|
00008c  4f0d              LDR      r7,|L8.196|
00008e  4e0e              LDR      r6,|L8.200|
                  |L8.144|
000090  42b0              CMP      r0,r6                 ;552
000092  dcf4              BGT      |L8.126|
;;;556      }	
;;;557    bcd[0]=bin ;
000094  f7fffffe          BL       __aeabi_f2uiz
000098  8020              STRH     r0,[r4,#0]
;;;558    return bmnus ;
00009a  4628              MOV      r0,r5
;;;559    }	
00009c  bdf8              POP      {r3-r7,pc}
;;;560    
                          ENDP

00009e  0000              DCW      0x0000
                  |L8.160|
                          DCD      ||.bss||
                  |L8.164|
                          DCD      0x497423f0
                  |L8.168|
                          DCD      0x47c35000
                  |L8.172|
                          DCD      0x461c4000
                  |L8.176|
                          DCD      0x461c3c00
                  |L8.180|
                          DCD      0x447a0000
                  |L8.184|
                          DCD      0x4479c000
                  |L8.188|
                          DCD      0x42c80000
                  |L8.192|
                          DCD      0x42c60000
                  |L8.196|
                          DCD      0x41200000
                  |L8.200|
                          DCD      0x41100000

                          AREA ||i.fn_dspvlu||, CODE, READONLY, ALIGN=2

                  fn_dspvlu PROC
;;;640    
;;;641    void fn_dspvlu(uint16_t vlu)
000000  b510              PUSH     {r4,lr}
;;;642    {
;;;643    fn_bin2bcd(vlu) ;
000002  f7fffffe          BL       __aeabi_ui2f
000006  f7fffffe          BL       fn_bin2bcd
;;;644    fn_txts(bcd[2]+'0') ;
00000a  4b08              LDR      r3,|L9.44|
00000c  8898              LDRH     r0,[r3,#4]  ; bcd
00000e  3030              ADDS     r0,r0,#0x30
000010  b280              UXTH     r0,r0
000012  f7fffffe          BL       fn_txts
;;;645    fn_txts(bcd[1]+'0') ;
000016  8858              LDRH     r0,[r3,#2]  ; bcd
000018  3030              ADDS     r0,r0,#0x30
00001a  b280              UXTH     r0,r0
00001c  f7fffffe          BL       fn_txts
;;;646    fn_txts(bcd[0]+'0') ;
000020  8818              LDRH     r0,[r3,#0]  ; bcd
000022  3030              ADDS     r0,r0,#0x30
000024  b280              UXTH     r0,r0
000026  f7fffffe          BL       fn_txts
;;;647    }
00002a  bd10              POP      {r4,pc}
;;;648    
                          ENDP

                  |L9.44|
                          DCD      ||.bss||

                          AREA ||i.fn_enbisr||, CODE, READONLY, ALIGN=2

                  fn_enbisr PROC
;;;488    
;;;489    void fn_enbisr(void)
000000  2001              MOVS     r0,#1
000002  4902              LDR      r1,|L10.12|
000004  0340              LSLS     r0,r0,#13
000006  6008              STR      r0,[r1,#0]
;;;490    {
;;;491    NVIC_EnableIRQ(UART1_IRQn) ;
;;;492    }
000008  4770              BX       lr
;;;493    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0xe000e100

                          AREA ||i.fn_nib2asc||, CODE, READONLY, ALIGN=1

                  fn_nib2asc PROC
;;;571    
;;;572    uint16_t fn_nib2asc(uint16_t nib)
000000  280a              CMP      r0,#0xa
;;;573    {
000002  d201              BCS      |L11.8|
000004  3030              ADDS     r0,r0,#0x30
;;;574    if(nib<10)
;;;575      return nib+'0' ;
000006  e002              B        |L11.14|
                  |L11.8|
;;;576    else if(nib<16)
000008  2810              CMP      r0,#0x10
00000a  d202              BCS      |L11.18|
00000c  3037              ADDS     r0,r0,#0x37
                  |L11.14|
;;;577      return (nib-10)+'A' ;
00000e  b280              UXTH     r0,r0
;;;578    else
;;;579      return 'G' ;
;;;580    }
000010  4770              BX       lr
                  |L11.18|
000012  2047              MOVS     r0,#0x47              ;579
000014  4770              BX       lr
;;;581    
                          ENDP


                          AREA ||i.fn_rxfls||, CODE, READONLY, ALIGN=2

                  fn_rxfls PROC
;;;500    
;;;501    void fn_rxfls(void)
000000  4803              LDR      r0,|L12.16|
;;;502    {
;;;503    if(brxfls)	
000002  8881              LDRH     r1,[r0,#4]  ; brxfls
000004  2900              CMP      r1,#0
000006  d001              BEQ      |L12.12|
;;;504      {
;;;505      brxfls=0 ;
000008  2100              MOVS     r1,#0
00000a  8081              STRH     r1,[r0,#4]
                  |L12.12|
;;;506    //  ++ab ;
;;;507      }	
;;;508    }
00000c  4770              BX       lr
;;;509    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      ||.data||

                          AREA ||i.fn_softde||, CODE, READONLY, ALIGN=2

                  fn_softde PROC
;;;386    
;;;387    uint16_t fn_softde(uint32_t de)
000000  b570              PUSH     {r4-r6,lr}
;;;388    {
000002  4603              MOV      r3,r0
;;;389    uint16_t i=0 ;		
000004  2000              MOVS     r0,#0
;;;390    uint16_t rst=0 ;		
;;;391    uint32_t lop ;		
;;;392    for(lop=0;lop<de;++lop)
;;;393      {
;;;394      i+=1 ;
;;;395      if(++rst>1000)
000006  247d              MOVS     r4,#0x7d
000008  4601              MOV      r1,r0                 ;390
00000a  4602              MOV      r2,r0                 ;392
00000c  00e4              LSLS     r4,r4,#3
;;;396        {
;;;397        rst=0 ;
;;;398        WDT->RSTCNT=WDT_RESET_COUNTER_KEYWORD ;
00000e  4d07              LDR      r5,|L13.44|
000010  4e07              LDR      r6,|L13.48|
000012  e008              B        |L13.38|
                  |L13.20|
000014  1c40              ADDS     r0,r0,#1              ;388
000016  1c49              ADDS     r1,r1,#1              ;394
000018  b289              UXTH     r1,r1                 ;395
00001a  b280              UXTH     r0,r0                 ;394
00001c  42a1              CMP      r1,r4                 ;395
00001e  d901              BLS      |L13.36|
000020  2100              MOVS     r1,#0                 ;397
000022  60b5              STR      r5,[r6,#8]
                  |L13.36|
000024  1c52              ADDS     r2,r2,#1
                  |L13.38|
000026  429a              CMP      r2,r3                 ;392
000028  d3f4              BCC      |L13.20|
;;;399        }
;;;400    	}
;;;401    return i ;
;;;402    }
00002a  bd70              POP      {r4-r6,pc}
;;;403    
                          ENDP

                  |L13.44|
                          DCD      0x00005aa5
                  |L13.48|
                          DCD      0x40040000

                          AREA ||i.fn_tx3ff||, CODE, READONLY, ALIGN=1

                  fn_tx3ff PROC
;;;633    
;;;634    void fn_tx3ff(void)
000000  b500              PUSH     {lr}
;;;635    {	
;;;636    fn_txts(0xff) ;
000002  20ff              MOVS     r0,#0xff
000004  f7fffffe          BL       fn_txts
;;;637    fn_txts(0xff) ;
000008  20ff              MOVS     r0,#0xff
00000a  f7fffffe          BL       fn_txts
;;;638    fn_txts(0xff) ;
00000e  20ff              MOVS     r0,#0xff
000010  f7fffffe          BL       fn_txts
;;;639    }
000014  bd00              POP      {pc}
;;;640    
                          ENDP


                          AREA ||i.fn_txfls||, CODE, READONLY, ALIGN=2

                  fn_txfls PROC
;;;509    
;;;510    void fn_txfls(uint16_t da)
000000  4902              LDR      r1,|L15.12|
                  |L15.2|
;;;511    {	
;;;512    while(!(UART1->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) ) ; 
000002  698a              LDR      r2,[r1,#0x18]
000004  00d2              LSLS     r2,r2,#3
000006  d5fc              BPL      |L15.2|
;;;513    UART1->DAT=da ; 
000008  6008              STR      r0,[r1,#0]
;;;514    }	
00000a  4770              BX       lr
;;;515    
                          ENDP

                  |L15.12|
                          DCD      0x40071000

                          AREA ||i.fn_txt||, CODE, READONLY, ALIGN=2

                  fn_txt PROC
;;;648    
;;;649    void fn_txt(void)
000000  b530              PUSH     {r4,r5,lr}
;;;650    {
;;;651    uint16_t i ;
;;;652    stats=2 ;
000002  4d17              LDR      r5,|L16.96|
000004  2002              MOVS     r0,#2
000006  8068              STRH     r0,[r5,#2]
;;;653    fn_txthead() ;
000008  f7fffffe          BL       fn_txthead
;;;654    fn_16tonib(bfrxfls[0] ) ;
00000c  4815              LDR      r0,|L16.100|
00000e  8800              LDRH     r0,[r0,#0]  ; bfrxfls
000010  f7fffffe          BL       fn_16tonib
;;;655    fn_txts(fn_nib2asc(bcd[1]) ) ;
000014  4c13              LDR      r4,|L16.100|
000016  3c10              SUBS     r4,r4,#0x10
000018  8860              LDRH     r0,[r4,#2]  ; bcd
00001a  f7fffffe          BL       fn_nib2asc
00001e  f7fffffe          BL       fn_txts
;;;656    fn_txts(fn_nib2asc(bcd[0]) ) ;
000022  8820              LDRH     r0,[r4,#0]  ; bcd
000024  f7fffffe          BL       fn_nib2asc
000028  f7fffffe          BL       fn_txts
;;;657    fn_txttrail() ;
00002c  f7fffffe          BL       fn_txttrail
;;;658    i=fn_softde(50000) ;
000030  480d              LDR      r0,|L16.104|
000032  f7fffffe          BL       fn_softde
;;;659    fn_txthead() ;
000036  f7fffffe          BL       fn_txthead
;;;660    fn_16tonib(ab) ;
00003a  88e8              LDRH     r0,[r5,#6]  ; ab
00003c  f7fffffe          BL       fn_16tonib
;;;661    fn_txts(fn_nib2asc(bcd[1]) ) ;
000040  8860              LDRH     r0,[r4,#2]  ; bcd
000042  f7fffffe          BL       fn_nib2asc
000046  f7fffffe          BL       fn_txts
;;;662    fn_txts(fn_nib2asc(bcd[0]) ) ;
00004a  8820              LDRH     r0,[r4,#0]  ; bcd
00004c  f7fffffe          BL       fn_nib2asc
000050  f7fffffe          BL       fn_txts
;;;663    fn_txttrail() ;
000054  f7fffffe          BL       fn_txttrail
;;;664    stats=0 ;
000058  2000              MOVS     r0,#0
00005a  8068              STRH     r0,[r5,#2]
;;;665    }
00005c  bd30              POP      {r4,r5,pc}
;;;666    
                          ENDP

00005e  0000              DCW      0x0000
                  |L16.96|
                          DCD      ||.data||
                  |L16.100|
                          DCD      ||.bss||+0x10
                  |L16.104|
                          DCD      0x0000c350

                          AREA ||i.fn_txthead||, CODE, READONLY, ALIGN=2

                  fn_txthead PROC
;;;599    
;;;600    void fn_txthead(void)
000000  b500              PUSH     {lr}
;;;601    {	
;;;602    fn_txts('t') ;
000002  2074              MOVS     r0,#0x74
000004  f7fffffe          BL       fn_txts
;;;603    if(stats<12)
000008  4b0e              LDR      r3,|L17.68|
00000a  8858              LDRH     r0,[r3,#2]  ; stats
00000c  280c              CMP      r0,#0xc
00000e  d201              BCS      |L17.20|
000010  302e              ADDS     r0,r0,#0x2e
;;;604      fn_txts(stats-2+'0') ;
000012  e00c              B        |L17.46|
                  |L17.20|
;;;605    else if(stats<22)
000014  2816              CMP      r0,#0x16
000016  d205              BCS      |L17.36|
;;;606      {	
;;;607      fn_txts('1') ;
000018  2031              MOVS     r0,#0x31
00001a  f7fffffe          BL       fn_txts
;;;608      fn_txts(stats-12+'0') ;
00001e  8858              LDRH     r0,[r3,#2]  ; stats
000020  3024              ADDS     r0,r0,#0x24
000022  e004              B        |L17.46|
                  |L17.36|
;;;609      }	
;;;610    else
;;;611      {	
;;;612      fn_txts('2') ;
000024  2032              MOVS     r0,#0x32
000026  f7fffffe          BL       fn_txts
;;;613      fn_txts(stats-22+'0') ;
00002a  8858              LDRH     r0,[r3,#2]  ; stats
00002c  301a              ADDS     r0,r0,#0x1a
                  |L17.46|
00002e  b280              UXTH     r0,r0                 ;608
000030  f7fffffe          BL       fn_txts
;;;614      }	
;;;615    fn_txtxt(TXT_txt,5) ;
000034  2105              MOVS     r1,#5
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       fn_txtxt
;;;616    fn_txts('"') ;
00003c  2022              MOVS     r0,#0x22
00003e  f7fffffe          BL       fn_txts
;;;617    }	
000042  bd00              POP      {pc}
;;;618    
                          ENDP

                  |L17.68|
                          DCD      ||.data||

                          AREA ||i.fn_txts||, CODE, READONLY, ALIGN=2

                  fn_txts PROC
;;;593    
;;;594    void fn_txts(uint16_t da)
000000  4902              LDR      r1,|L18.12|
                  |L18.2|
;;;595    {	
;;;596    while(!(UART2->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) ) ; 
000002  698a              LDR      r2,[r1,#0x18]
000004  00d2              LSLS     r2,r2,#3
000006  d5fc              BPL      |L18.2|
;;;597    UART2->DAT=da ; 
000008  6008              STR      r0,[r1,#0]
;;;598    }	
00000a  4770              BX       lr
;;;599    
                          ENDP

                  |L18.12|
                          DCD      0x40072000

                          AREA ||i.fn_txttrail||, CODE, READONLY, ALIGN=2

                  fn_txttrail PROC
;;;626    
;;;627    void fn_txttrail(void)
000000  b500              PUSH     {lr}
;;;628    {	
;;;629    fn_txts('"') ;
000002  2022              MOVS     r0,#0x22
000004  f7fffffe          BL       fn_txts
;;;630    fn_tx3ff() ;
000008  f7fffffe          BL       fn_tx3ff
;;;631    ++stats ;
00000c  4802              LDR      r0,|L19.24|
00000e  8841              LDRH     r1,[r0,#2]  ; stats
000010  1c49              ADDS     r1,r1,#1
000012  8041              STRH     r1,[r0,#2]
;;;632    }	
000014  bd00              POP      {pc}
;;;633    
                          ENDP

000016  0000              DCW      0x0000
                  |L19.24|
                          DCD      ||.data||

                          AREA ||i.fn_txtxt||, CODE, READONLY, ALIGN=2

                  fn_txtxt PROC
;;;618    
;;;619    void fn_txtxt(uint16_t idx,uint16_t num)
000000  b570              PUSH     {r4-r6,lr}
;;;620    {	
;;;621    uint8_t lop ;
;;;622    idx<<=4 ;
000002  0500              LSLS     r0,r0,#20
000004  0c04              LSRS     r4,r0,#16
000006  460d              MOV      r5,r1                 ;620
;;;623    for(lop=0;lop<num;++lop)
000008  2300              MOVS     r3,#0
;;;624      fn_txts(rt_txt[idx++]) ;
00000a  4e06              LDR      r6,|L20.36|
00000c  e006              B        |L20.28|
                  |L20.14|
00000e  5d30              LDRB     r0,[r6,r4]
000010  1c64              ADDS     r4,r4,#1
000012  b2a4              UXTH     r4,r4
000014  f7fffffe          BL       fn_txts
000018  1c5b              ADDS     r3,r3,#1
00001a  b2db              UXTB     r3,r3                 ;623
                  |L20.28|
00001c  42ab              CMP      r3,r5                 ;623
00001e  d3f6              BCC      |L20.14|
;;;625    }
000020  bd70              POP      {r4-r6,pc}
;;;626    
                          ENDP

000022  0000              DCW      0x0000
                  |L20.36|
                          DCD      ||area_number.101||

                          AREA ||i.ini_end||, CODE, READONLY, ALIGN=2

                  ini_end PROC
;;;493    
;;;494    void ini_end(void)
000000  b500              PUSH     {lr}
;;;495    {
;;;496    pbuz=0 ;
000002  4904              LDR      r1,|L21.20|
000004  2000              MOVS     r0,#0
000006  6388              STR      r0,[r1,#0x38]
;;;497    prwmb=0 ;
000008  4902              LDR      r1,|L21.20|
00000a  3980              SUBS     r1,r1,#0x80
00000c  6108              STR      r0,[r1,#0x10]
;;;498    fn_enbisr() ;
00000e  f7fffffe          BL       fn_enbisr
;;;499    }
000012  bd00              POP      {pc}
;;;500    
                          ENDP

                  |L21.20|
                          DCD      0x40004880

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;724    
;;;725    int32_t main(void)
000000  4816              LDR      r0,|L22.92|
;;;726    {
;;;727    uint16_t i ;
;;;728    i=fn_softde(5000000) ;
000002  f7fffffe          BL       fn_softde
;;;729    SYS_Init() ;
000006  f7fffffe          BL       SYS_Init
;;;730    UART1_Init() ;
00000a  f7fffffe          BL       UART1_Init
;;;731    UART2_Init() ;
00000e  f7fffffe          BL       UART2_Init
;;;732    portio_ini() ;
000012  f7fffffe          BL       portio_ini
;;;733    ini_end() ;
000016  f7fffffe          BL       ini_end
;;;734    
;;;735    bfrxfls[0]=2 ;
00001a  4d11              LDR      r5,|L22.96|
00001c  2102              MOVS     r1,#2
00001e  8029              STRH     r1,[r5,#0]
;;;736    
;;;737    while(1) 
;;;738    {
;;;739    i=fn_softde(5000000) ;
;;;740    prwmb=1 ;
;;;741    //fn_txfls(0x57) ;
;;;742    //i=fn_softde(5000) ;
;;;743    //fn_txfls(0xab) ;
;;;744    //i=fn_softde(5000) ;
;;;745    //fn_txfls(0x01) ;
;;;746    //i=fn_softde(5000) ;
;;;747    //fn_txfls(0x06) ;
;;;748    //i=fn_softde(5000) ;
;;;749    //fn_txfls(0xa8) ;
;;;750    //i=fn_softde(5000) ;
;;;751    bfrxfls[0]=3 ;
;;;752    ab=driveReady() ;
;;;753    while(!(UART1->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) ) ; 
000020  4e10              LDR      r6,|L22.100|
000022  4c11              LDR      r4,|L22.104|
;;;754    prwmb=0 ;
;;;755    i=fn_softde(500000) ;
000024  4f11              LDR      r7,|L22.108|
                  |L22.38|
000026  480d              LDR      r0,|L22.92|
000028  f7fffffe          BL       fn_softde
00002c  2001              MOVS     r0,#1                 ;740
00002e  6120              STR      r0,[r4,#0x10]         ;740
000030  2003              MOVS     r0,#3                 ;751
000032  8028              STRH     r0,[r5,#0]            ;751
000034  f7fffffe          BL       driveReady
000038  490d              LDR      r1,|L22.112|
00003a  80c8              STRH     r0,[r1,#6]            ;752
                  |L22.60|
00003c  69b0              LDR      r0,[r6,#0x18]         ;753
00003e  00c0              LSLS     r0,r0,#3              ;753
000040  d5fc              BPL      |L22.60|
000042  2000              MOVS     r0,#0                 ;754
000044  6120              STR      r0,[r4,#0x10]         ;754
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       fn_softde
;;;756    fn_rxfls() ;
00004c  f7fffffe          BL       fn_rxfls
;;;757    i=fn_softde(500000) ;
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       fn_softde
;;;758    fn_txt() ;
000056  f7fffffe          BL       fn_txt
00005a  e7e4              B        |L22.38|
;;;759    }	
;;;760    }
                          ENDP

                  |L22.92|
                          DCD      0x004c4b40
                  |L22.96|
                          DCD      ||.bss||+0x10
                  |L22.100|
                          DCD      0x40071000
                  |L22.104|
                          DCD      0x40004800
                  |L22.108|
                          DCD      0x0007a120
                  |L22.112|
                          DCD      ||.data||

                          AREA ||i.mount||, CODE, READONLY, ALIGN=1

                  mount PROC
;;;690    
;;;691    uint8_t mount(){ // return ANSWSUCCESS or ANSW DISK DISCON
000000  b500              PUSH     {lr}
;;;692    	uint8_t tmpReturn = 0;
;;;693    	sendCommand(CMD_DISK_MOUNT);
000002  2031              MOVS     r0,#0x31
000004  f7fffffe          BL       sendCommand
;;;694    	tmpReturn = readSerDataUSB();
000008  f7fffffe          BL       readSerDataUSB
00000c  b2c0              UXTB     r0,r0
;;;695    	return tmpReturn;
;;;696    }
00000e  bd00              POP      {pc}
;;;697    
                          ENDP


                          AREA ||i.pingDevice||, CODE, READONLY, ALIGN=2

                  pingDevice PROC
;;;677    
;;;678    uint8_t pingDevice(){
000000  b510              PUSH     {r4,lr}
;;;679    	uint8_t tmpReturn = 0;
000002  2400              MOVS     r4,#0
;;;680    	int16_t i = 0;
;;;681    	sendCommand(CMD_CHECK_EXIST);
000004  2006              MOVS     r0,#6
000006  f7fffffe          BL       sendCommand
;;;682    	fn_txfls(0x01); // ez ertek negaltjat adja vissza
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       fn_txfls
;;;683    	i=fn_softde(5000) ;
000010  4804              LDR      r0,|L24.36|
000012  f7fffffe          BL       fn_softde
;;;684    	if(readSerDataUSB() == 0xFE)
000016  f7fffffe          BL       readSerDataUSB
00001a  28fe              CMP      r0,#0xfe
00001c  d100              BNE      |L24.32|
;;;685    		{
;;;686    			tmpReturn = 1;//true
00001e  2401              MOVS     r4,#1
                  |L24.32|
;;;687    		}
;;;688    	return tmpReturn;
000020  4620              MOV      r0,r4
;;;689    }
000022  bd10              POP      {r4,pc}
;;;690    
                          ENDP

                  |L24.36|
                          DCD      0x00001388

                          AREA ||i.portio_ini||, CODE, READONLY, ALIGN=2

                  portio_ini PROC
;;;441    
;;;442    void portio_ini(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;443    {
;;;444    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE2_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE2_Pos) ; 
000002  486b              LDR      r0,|L25.432|
000004  6801              LDR      r1,[r0,#0]
000006  2230              MOVS     r2,#0x30
000008  4391              BICS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;445    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE3_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE3_Pos) ;
00000c  6801              LDR      r1,[r0,#0]
00000e  22c0              MOVS     r2,#0xc0
000010  4391              BICS     r1,r1,r2
000012  3140              ADDS     r1,r1,#0x40
000014  6001              STR      r1,[r0,#0]
;;;446    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE4_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE4_Pos) ;
000016  6801              LDR      r1,[r0,#0]
000018  0094              LSLS     r4,r2,#2
00001a  43a1              BICS     r1,r1,r4
00001c  31ff              ADDS     r1,r1,#0xff
00001e  3101              ADDS     r1,#1
000020  6001              STR      r1,[r0,#0]
;;;447    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE5_Msk) )  | (GPIO_MODE_QUASI<<GPIO_MODE_MODE5_Pos) ;
000022  6801              LDR      r1,[r0,#0]
000024  0115              LSLS     r5,r2,#4
000026  4329              ORRS     r1,r1,r5
000028  6001              STR      r1,[r0,#0]
;;;448    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE8_Msk) )  | (GPIO_MODE_QUASI<<GPIO_MODE_MODE8_Pos) ;
00002a  6801              LDR      r1,[r0,#0]
00002c  0292              LSLS     r2,r2,#10
00002e  4311              ORRS     r1,r1,r2
000030  6001              STR      r1,[r0,#0]
;;;449    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE9_Msk) )  | (GPIO_MODE_QUASI<<GPIO_MODE_MODE9_Pos) ;
000032  6801              LDR      r1,[r0,#0]
000034  0093              LSLS     r3,r2,#2
000036  4319              ORRS     r1,r1,r3
000038  6001              STR      r1,[r0,#0]
;;;450    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE10_Msk) ) | (GPIO_MODE_QUASI<<GPIO_MODE_MODE10_Pos) ;
00003a  6801              LDR      r1,[r0,#0]
00003c  0117              LSLS     r7,r2,#4
00003e  4339              ORRS     r1,r1,r7
000040  6001              STR      r1,[r0,#0]
;;;451    PA->MODE=(PA->MODE &~(GPIO_MODE_MODE11_Msk) ) | (GPIO_MODE_QUASI<<GPIO_MODE_MODE11_Pos) ;
000042  6801              LDR      r1,[r0,#0]
000044  0192              LSLS     r2,r2,#6
000046  4311              ORRS     r1,r1,r2
000048  6001              STR      r1,[r0,#0]
;;;452    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE0_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE0_Pos) ;
00004a  4859              LDR      r0,|L25.432|
00004c  3040              ADDS     r0,r0,#0x40
00004e  6801              LDR      r1,[r0,#0]
000050  0889              LSRS     r1,r1,#2
000052  0089              LSLS     r1,r1,#2
000054  6001              STR      r1,[r0,#0]
;;;453    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE1_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE1_Pos) ;
000056  6802              LDR      r2,[r0,#0]
000058  210c              MOVS     r1,#0xc
00005a  438a              BICS     r2,r2,r1
00005c  6002              STR      r2,[r0,#0]
;;;454    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE2_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE2_Pos) ;
00005e  6801              LDR      r1,[r0,#0]
000060  2230              MOVS     r2,#0x30
000062  4391              BICS     r1,r1,r2
000064  6001              STR      r1,[r0,#0]
;;;455    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE3_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE3_Pos) ;
000066  6801              LDR      r1,[r0,#0]
000068  22c0              MOVS     r2,#0xc0
00006a  4391              BICS     r1,r1,r2
00006c  6001              STR      r1,[r0,#0]
;;;456    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE4_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE4_Pos) ;
00006e  6801              LDR      r1,[r0,#0]
000070  43a1              BICS     r1,r1,r4
000072  6001              STR      r1,[r0,#0]
;;;457    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE5_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE5_Pos) ;
000074  6801              LDR      r1,[r0,#0]
000076  43a9              BICS     r1,r1,r5
000078  6001              STR      r1,[r0,#0]
;;;458    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE6_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE6_Pos) ;
00007a  6802              LDR      r2,[r0,#0]
00007c  1199              ASRS     r1,r3,#6
00007e  438a              BICS     r2,r2,r1
000080  6002              STR      r2,[r0,#0]
;;;459    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE7_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE7_Pos) ;
000082  6806              LDR      r6,[r0,#0]
000084  008a              LSLS     r2,r1,#2
000086  4396              BICS     r6,r6,r2
000088  6006              STR      r6,[r0,#0]
;;;460    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE8_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE8_Pos) ;
00008a  6802              LDR      r2,[r0,#0]
00008c  010e              LSLS     r6,r1,#4
00008e  43b2              BICS     r2,r2,r6
000090  6002              STR      r2,[r0,#0]
;;;461    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE9_Msk) )  | (GPIO_MODE_INPUT<<GPIO_MODE_MODE9_Pos) ;
000092  6802              LDR      r2,[r0,#0]
000094  439a              BICS     r2,r2,r3
000096  6002              STR      r2,[r0,#0]
;;;462    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE10_Msk) ) | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE10_Pos) ;
000098  6803              LDR      r3,[r0,#0]
00009a  2201              MOVS     r2,#1
00009c  43bb              BICS     r3,r3,r7
00009e  0512              LSLS     r2,r2,#20
0000a0  189a              ADDS     r2,r3,r2
0000a2  6002              STR      r2,[r0,#0]
;;;463    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE11_Msk) ) | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE11_Pos) ;
0000a4  6803              LDR      r3,[r0,#0]
0000a6  028a              LSLS     r2,r1,#10
0000a8  4393              BICS     r3,r3,r2
0000aa  2201              MOVS     r2,#1
0000ac  0592              LSLS     r2,r2,#22
0000ae  189a              ADDS     r2,r3,r2
0000b0  6002              STR      r2,[r0,#0]
;;;464    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE12_Msk) ) | (GPIO_MODE_QUASI<<GPIO_MODE_MODE12_Pos) ;
0000b2  6802              LDR      r2,[r0,#0]
0000b4  030b              LSLS     r3,r1,#12
0000b6  431a              ORRS     r2,r2,r3
0000b8  6002              STR      r2,[r0,#0]
;;;465    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE13_Msk) ) | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE13_Pos) ;
0000ba  6802              LDR      r2,[r0,#0]
0000bc  038b              LSLS     r3,r1,#14
0000be  439a              BICS     r2,r2,r3
0000c0  0503              LSLS     r3,r0,#20
0000c2  18d2              ADDS     r2,r2,r3
0000c4  6002              STR      r2,[r0,#0]
;;;466    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE14_Msk) ) | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE14_Pos) ;
0000c6  6806              LDR      r6,[r0,#0]
0000c8  040a              LSLS     r2,r1,#16
0000ca  4396              BICS     r6,r6,r2
0000cc  0583              LSLS     r3,r0,#22
0000ce  18f6              ADDS     r6,r6,r3
0000d0  6006              STR      r6,[r0,#0]
;;;467    PB->MODE=(PB->MODE &~(GPIO_MODE_MODE15_Msk) ) | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE15_Pos) ;
0000d2  6806              LDR      r6,[r0,#0]
0000d4  0607              LSLS     r7,r0,#24
0000d6  00b6              LSLS     r6,r6,#2
0000d8  08b6              LSRS     r6,r6,#2
0000da  19f6              ADDS     r6,r6,r7
0000dc  6006              STR      r6,[r0,#0]
;;;468    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE0_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE0_Pos) ;
0000de  4834              LDR      r0,|L25.432|
0000e0  3080              ADDS     r0,r0,#0x80
0000e2  6800              LDR      r0,[r0,#0]
0000e4  4e32              LDR      r6,|L25.432|
0000e6  0880              LSRS     r0,r0,#2
0000e8  0080              LSLS     r0,r0,#2
0000ea  3680              ADDS     r6,r6,#0x80
0000ec  1c40              ADDS     r0,r0,#1
0000ee  6030              STR      r0,[r6,#0]
;;;469    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE1_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE1_Pos) ;
0000f0  6830              LDR      r0,[r6,#0]
0000f2  260c              MOVS     r6,#0xc
0000f4  43b0              BICS     r0,r0,r6
0000f6  4e2e              LDR      r6,|L25.432|
0000f8  3680              ADDS     r6,r6,#0x80
0000fa  1d00              ADDS     r0,r0,#4
0000fc  6030              STR      r0,[r6,#0]
;;;470    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE2_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE2_Pos) ;
0000fe  6830              LDR      r0,[r6,#0]
000100  2630              MOVS     r6,#0x30
000102  43b0              BICS     r0,r0,r6
000104  4e2a              LDR      r6,|L25.432|
000106  3680              ADDS     r6,r6,#0x80
000108  3010              ADDS     r0,r0,#0x10
00010a  6030              STR      r0,[r6,#0]
;;;471    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE3_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE3_Pos) ;
00010c  6830              LDR      r0,[r6,#0]
00010e  26c0              MOVS     r6,#0xc0
000110  43b0              BICS     r0,r0,r6
000112  4e27              LDR      r6,|L25.432|
000114  3680              ADDS     r6,r6,#0x80
000116  3040              ADDS     r0,r0,#0x40
000118  6030              STR      r0,[r6,#0]
;;;472    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE4_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE4_Pos) ;
00011a  6830              LDR      r0,[r6,#0]
00011c  43a0              BICS     r0,r0,r4
00011e  30ff              ADDS     r0,r0,#0xff
000120  3001              ADDS     r0,#1
000122  6030              STR      r0,[r6,#0]
;;;473    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE5_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE5_Pos) ;
000124  6830              LDR      r0,[r6,#0]
000126  149c              ASRS     r4,r3,#18
000128  43a8              BICS     r0,r0,r5
00012a  1900              ADDS     r0,r0,r4
00012c  6030              STR      r0,[r6,#0]
;;;474    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE6_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE6_Pos) ;
00012e  6830              LDR      r0,[r6,#0]
000130  141d              ASRS     r5,r3,#16
000132  4388              BICS     r0,r0,r1
000134  1940              ADDS     r0,r0,r5
000136  4634              MOV      r4,r6
000138  6020              STR      r0,[r4,#0]
;;;475    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE7_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE7_Pos) ;
00013a  6824              LDR      r4,[r4,#0]
00013c  0088              LSLS     r0,r1,#2
00013e  4384              BICS     r4,r4,r0
000140  1398              ASRS     r0,r3,#14
000142  1820              ADDS     r0,r4,r0
000144  4634              MOV      r4,r6
000146  6020              STR      r0,[r4,#0]
;;;476    PC->MODE=(PC->MODE &~(GPIO_MODE_MODE14_Msk) ) | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE14_Pos) ;
000148  6820              LDR      r0,[r4,#0]
00014a  4390              BICS     r0,r0,r2
00014c  18c0              ADDS     r0,r0,r3
00014e  6020              STR      r0,[r4,#0]
;;;477    PD->MODE=(PD->MODE &~(GPIO_MODE_MODE0_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE0_Pos) ;
000150  4817              LDR      r0,|L25.432|
000152  30c0              ADDS     r0,r0,#0xc0
000154  6804              LDR      r4,[r0,#0]
000156  08a4              LSRS     r4,r4,#2
000158  00a4              LSLS     r4,r4,#2
00015a  1c64              ADDS     r4,r4,#1
00015c  6004              STR      r4,[r0,#0]
;;;478    PD->MODE=(PD->MODE &~(GPIO_MODE_MODE1_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE1_Pos) ;
00015e  6804              LDR      r4,[r0,#0]
000160  260c              MOVS     r6,#0xc
000162  43b4              BICS     r4,r4,r6
000164  1d24              ADDS     r4,r4,#4
000166  6004              STR      r4,[r0,#0]
;;;479    PD->MODE=(PD->MODE &~(GPIO_MODE_MODE2_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE2_Pos) ;
000168  6804              LDR      r4,[r0,#0]
00016a  2630              MOVS     r6,#0x30
00016c  43b4              BICS     r4,r4,r6
00016e  3410              ADDS     r4,r4,#0x10
000170  6004              STR      r4,[r0,#0]
;;;480    PD->MODE=(PD->MODE &~(GPIO_MODE_MODE3_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE3_Pos) ;
000172  6804              LDR      r4,[r0,#0]
000174  26c0              MOVS     r6,#0xc0
000176  43b4              BICS     r4,r4,r6
000178  3440              ADDS     r4,r4,#0x40
00017a  6004              STR      r4,[r0,#0]
;;;481    PD->MODE=(PD->MODE &~(GPIO_MODE_MODE15_Msk) ) | (GPIO_MODE_QUASI<<GPIO_MODE_MODE15_Pos) ;
00017c  6804              LDR      r4,[r0,#0]
00017e  0606              LSLS     r6,r0,#24
000180  4334              ORRS     r4,r4,r6
000182  6004              STR      r4,[r0,#0]
;;;482    PF->MODE=(PF->MODE &~(GPIO_MODE_MODE2_Msk) )  | (GPIO_MODE_QUASI<<GPIO_MODE_MODE2_Pos) ;
000184  480b              LDR      r0,|L25.436|
000186  6804              LDR      r4,[r0,#0]
000188  2730              MOVS     r7,#0x30
00018a  433c              ORRS     r4,r4,r7
00018c  6004              STR      r4,[r0,#0]
;;;483    PF->MODE=(PF->MODE &~(GPIO_MODE_MODE3_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE3_Pos) ;
00018e  6804              LDR      r4,[r0,#0]
000190  27c0              MOVS     r7,#0xc0
000192  43bc              BICS     r4,r4,r7
000194  3440              ADDS     r4,r4,#0x40
000196  6004              STR      r4,[r0,#0]
;;;484    PF->MODE=(PF->MODE &~(GPIO_MODE_MODE6_Msk) )  | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE6_Pos) ;
000198  6804              LDR      r4,[r0,#0]
00019a  438c              BICS     r4,r4,r1
00019c  1961              ADDS     r1,r4,r5
00019e  6001              STR      r1,[r0,#0]
;;;485    PF->MODE=(PF->MODE &~(GPIO_MODE_MODE14_Msk) ) | (GPIO_MODE_OUTPUT<<GPIO_MODE_MODE14_Pos) ;
0001a0  6801              LDR      r1,[r0,#0]
0001a2  4391              BICS     r1,r1,r2
0001a4  18c9              ADDS     r1,r1,r3
0001a6  6001              STR      r1,[r0,#0]
;;;486    PF->MODE=(PF->MODE &~(GPIO_MODE_MODE15_Msk) ) | (GPIO_MODE_QUASI<<GPIO_MODE_MODE15_Pos) ;
0001a8  6801              LDR      r1,[r0,#0]
0001aa  4331              ORRS     r1,r1,r6
0001ac  6001              STR      r1,[r0,#0]
;;;487    }
0001ae  bdf0              POP      {r4-r7,pc}
;;;488    
                          ENDP

                  |L25.432|
                          DCD      0x40004000
                  |L25.436|
                          DCD      0x40004140

                          AREA ||i.rdDiskInfo||, CODE, READONLY, ALIGN=2

                  rdDiskInfo PROC
;;;697    
;;;698    void rdDiskInfo(){
000000  b5fe              PUSH     {r1-r7,lr}
;;;699    	uint8_t dataLength;
;;;700    	uint8_t tmpReturn;
;;;701    	uint8_t tmpdata[9];
;;;702    	uint8_t s = 0;
000002  2400              MOVS     r4,#0
;;;703    	sendCommand(CMD_DISK_QUERY);
000004  203f              MOVS     r0,#0x3f
000006  f7fffffe          BL       sendCommand
;;;704    	tmpReturn= readSerDataUSB();
00000a  f7fffffe          BL       readSerDataUSB
00000e  b2c0              UXTB     r0,r0
;;;705    	if(tmpReturn == ANSW_USB_INT_SUCCESS){
000010  2814              CMP      r0,#0x14
000012  d10e              BNE      |L26.50|
;;;706    		sendCommand(CMD_RD_USB_DATA0);
000014  2027              MOVS     r0,#0x27
000016  f7fffffe          BL       sendCommand
;;;707    		dataLength = readSerDataUSB();
00001a  f7fffffe          BL       readSerDataUSB
00001e  b2c5              UXTB     r5,r0
000020  466e              MOV      r6,sp                 ;701
;;;708    		for(s =0;s < dataLength;s++){
000022  e004              B        |L26.46|
                  |L26.36|
;;;709    			tmpdata[s] = readSerDataUSB();// fill up temporary buffer
000024  f7fffffe          BL       readSerDataUSB
000028  5530              STRB     r0,[r6,r4]
00002a  1c64              ADDS     r4,r4,#1
00002c  b2e4              UXTB     r4,r4                 ;708
                  |L26.46|
00002e  42ac              CMP      r4,r5                 ;708
000030  d3f8              BCC      |L26.36|
                  |L26.50|
;;;710    		}//end for
;;;711    	}//end if success
;;;712    		_deviceAttached = 1;
000032  4904              LDR      r1,|L26.68|
000034  2001              MOVS     r0,#1
000036  7008              STRB     r0,[r1,#0]
;;;713    		memcpy( &_diskData, &tmpdata, sizeof(tmpdata) ); //copy raw data to structured variable
000038  2209              MOVS     r2,#9
00003a  4669              MOV      r1,sp
00003c  4802              LDR      r0,|L26.72|
00003e  f7fffffe          BL       __aeabi_memcpy4
;;;714    }
000042  bdfe              POP      {r1-r7,pc}
;;;715    
                          ENDP

                  |L26.68|
                          DCD      ||.data||
                  |L26.72|
                          DCD      ||.bss||+0x24

                          AREA ||i.readSerDataUSB||, CODE, READONLY, ALIGN=2

                  readSerDataUSB PROC
;;;672    
;;;673    int16_t readSerDataUSB(){
000000  b500              PUSH     {lr}
;;;674    	uint16_t i=fn_softde(50000) ;
000002  4803              LDR      r0,|L27.16|
000004  f7fffffe          BL       fn_softde
;;;675    	return bfrxfls[0];
000008  4902              LDR      r1,|L27.20|
00000a  2000              MOVS     r0,#0
00000c  5e08              LDRSH    r0,[r1,r0]  ; bfrxfls
;;;676    }
00000e  bd00              POP      {pc}
;;;677    
                          ENDP

                  |L27.16|
                          DCD      0x0000c350
                  |L27.20|
                          DCD      ||.bss||+0x10

                          AREA ||i.sendCommand||, CODE, READONLY, ALIGN=1

                  sendCommand PROC
;;;666    
;;;667    void sendCommand(uint8_t b_parancs){
000000  b500              PUSH     {lr}
000002  4603              MOV      r3,r0
;;;668    	fn_txfls(0x57);// UART first sync command
000004  2057              MOVS     r0,#0x57
000006  f7fffffe          BL       fn_txfls
;;;669    	fn_txfls(0xAB);// UART second sync command
00000a  20ab              MOVS     r0,#0xab
00000c  f7fffffe          BL       fn_txfls
;;;670    	fn_txfls(b_parancs);
000010  4618              MOV      r0,r3
000012  f7fffffe          BL       fn_txfls
;;;671    }
000016  bd00              POP      {pc}
;;;672    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bcd
                          %        16
                  bfrxfls
                          %        20
                  _diskData
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CURSORBEGIN
                          DCD      0x00000000

                          AREA ||area_number.33||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.constdata||
                  CURSOREND
                          DCD      0xffffffff

                          AREA ||area_number.34||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.constdata||
                  SECTORSIZE
000000  0200              DCW      0x0200

                          AREA ||area_number.35||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.constdata||
                  CMD_GET_IC_VER
000000  01                DCB      0x01

                          AREA ||area_number.36||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.constdata||
                  CMD_SET_BAUDRATE
000000  02                DCB      0x02

                          AREA ||area_number.37||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.37||, ||.constdata||
                  CMD_RESET_ALL
000000  05                DCB      0x05

                          AREA ||area_number.38||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.38||, ||.constdata||
                  CMD_CHECK_EXIST
000000  06                DCB      0x06

                          AREA ||area_number.39||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.constdata||
                  CMD_SET_SD0_INT
000000  0b                DCB      0x0b

                          AREA ||area_number.40||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.constdata||
                  CMD_GET_FILE_SIZE
000000  0c                DCB      0x0c

                          AREA ||area_number.41||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.constdata||
                  CMD_SET_USB_MODE
000000  15                DCB      0x15

                          AREA ||area_number.42||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.42||, ||.constdata||
                  MODE_HOST_INV
000000  04                DCB      0x04

                          AREA ||area_number.43||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.43||, ||.constdata||
                  MODE_HOST_0
000000  05                DCB      0x05

                          AREA ||area_number.44||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.44||, ||.constdata||
                  MODE_HOST_1
000000  07                DCB      0x07

                          AREA ||area_number.45||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.constdata||
                  MODE_HOST_2
000000  06                DCB      0x06

                          AREA ||area_number.46||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.constdata||
                  MODE_HOST_SD
000000  03                DCB      0x03

                          AREA ||area_number.47||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.constdata||
                  MODE_DEFAULT
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.constdata||
                  CMD_GET_STATUS
000000  22                DCB      0x22

                          AREA ||area_number.49||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.constdata||
                  CMD_RD_USB_DATA0
000000  27                DCB      0x27

                          AREA ||area_number.50||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.constdata||
                  CMD_WR_USB_DATA
000000  2c                DCB      0x2c

                          AREA ||area_number.51||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.constdata||
                  CMD_WR_REQ_DATA
000000  2d                DCB      0x2d

                          AREA ||area_number.52||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.constdata||
                  CMD_WR_OFS_DATA
000000  2e                DCB      0x2e

                          AREA ||area_number.53||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.constdata||
                  CMD_SET_FILE_NAME
000000  2f                DCB      0x2f

                          AREA ||area_number.54||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.constdata||
                  CMD_DISK_CONNECT
000000  30                DCB      0x30

                          AREA ||area_number.55||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.constdata||
                  CMD_DISK_MOUNT
000000  31                DCB      0x31

                          AREA ||area_number.56||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.constdata||
                  CMD_FILE_OPEN
000000  32                DCB      0x32

                          AREA ||area_number.57||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.constdata||
                  CMD_FILE_ENUM_GO
000000  33                DCB      0x33

                          AREA ||area_number.58||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.constdata||
                  CMD_FILE_CREATE
000000  34                DCB      0x34

                          AREA ||area_number.59||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.constdata||
                  CMD_FILE_ERASE
000000  35                DCB      0x35

                          AREA ||area_number.60||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.constdata||
                  CMD_FILE_CLOSE
000000  36                DCB      0x36

                          AREA ||area_number.61||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.constdata||
                  CMD_DIR_INFO_READ
000000  37                DCB      0x37

                          AREA ||area_number.62||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.constdata||
                  CMD_DIR_INFO_SAVE
000000  38                DCB      0x38

                          AREA ||area_number.63||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.63||, ||.constdata||
                  CMD_BYTE_LOCATE
000000  39                DCB      0x39

                          AREA ||area_number.64||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.64||, ||.constdata||
                  CMD_BYTE_READ
000000  3a                DCB      0x3a

                          AREA ||area_number.65||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.65||, ||.constdata||
                  CMD_BYTE_RD_GO
000000  3b                DCB      0x3b

                          AREA ||area_number.66||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.66||, ||.constdata||
                  CMD_BYTE_WRITE
000000  3c                DCB      0x3c

                          AREA ||area_number.67||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.constdata||
                  CMD_BYTE_WR_GO
000000  3d                DCB      0x3d

                          AREA ||area_number.68||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.68||, ||.constdata||
                  CMD_DISK_CAPACITY
000000  3e                DCB      0x3e

                          AREA ||area_number.69||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.69||, ||.constdata||
                  CMD_DISK_QUERY
000000  3f                DCB      0x3f

                          AREA ||area_number.70||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.70||, ||.constdata||
                  CMD_DIR_CREATE
000000  40                DCB      0x40

                          AREA ||area_number.71||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.71||, ||.constdata||
                  ANSW_RET_SUCCESS
000000  51                DCB      0x51

                          AREA ||area_number.72||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.72||, ||.constdata||
                  ANSW_USB_INT_SUCCESS
000000  14                DCB      0x14

                          AREA ||area_number.73||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.73||, ||.constdata||
                  ANSW_USB_INT_CONNECT
000000  15                DCB      0x15

                          AREA ||area_number.74||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.74||, ||.constdata||
                  ANSW_USB_INT_DISCONNECT
000000  16                DCB      0x16

                          AREA ||area_number.75||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.75||, ||.constdata||
                  ANSW_USB_INT_USB_READY
000000  18                DCB      0x18

                          AREA ||area_number.76||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.76||, ||.constdata||
                  ANSW_USB_INT_DISK_READ
000000  1d                DCB      0x1d

                          AREA ||area_number.77||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.77||, ||.constdata||
                  ANSW_USB_INT_DISK_WRITE
000000  1e                DCB      0x1e

                          AREA ||area_number.78||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.78||, ||.constdata||
                  ANSW_RET_ABORT
000000  5f                DCB      0x5f

                          AREA ||area_number.79||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.79||, ||.constdata||
                  ANSW_USB_INT_DISK_ERR
000000  1f                DCB      0x1f

                          AREA ||area_number.80||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.80||, ||.constdata||
                  ANSW_USB_INT_BUF_OVER
000000  17                DCB      0x17

                          AREA ||area_number.81||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.81||, ||.constdata||
                  ANSW_ERR_OPEN_DIR
000000  41                DCB      0x41

                          AREA ||area_number.82||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.82||, ||.constdata||
                  ANSW_ERR_MISS_FILE
000000  42                DCB      0x42

                          AREA ||area_number.83||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.83||, ||.constdata||
                  ANSW_ERR_FOUND_NAME
000000  43                DCB      0x43

                          AREA ||area_number.84||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.84||, ||.constdata||
                  ANSW_ERR_DISK_DISCON
000000  82                DCB      0x82

                          AREA ||area_number.85||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.85||, ||.constdata||
                  ANSW_ERR_LARGE_SECTOR
000000  84                DCB      0x84

                          AREA ||area_number.86||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.86||, ||.constdata||
                  ANSW_ERR_TYPE_ERROR
000000  92                DCB      0x92

                          AREA ||area_number.87||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.87||, ||.constdata||
                  ANSW_ERR_BPB_ERROR
000000  a1                DCB      0xa1

                          AREA ||area_number.88||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.88||, ||.constdata||
                  ANSW_ERR_DISK_FULL
000000  b1                DCB      0xb1

                          AREA ||area_number.89||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.89||, ||.constdata||
                  ANSW_ERR_FDT_OVER
000000  b2                DCB      0xb2

                          AREA ||area_number.90||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.90||, ||.constdata||
                  ANSW_ERR_FILE_CLOSE
000000  b4                DCB      0xb4

                          AREA ||area_number.91||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.91||, ||.constdata||
                  CH376_ERR_OVERFLOW
000000  03                DCB      0x03

                          AREA ||area_number.92||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.92||, ||.constdata||
                  CH376_ERR_TIMEOUT
000000  02                DCB      0x02

                          AREA ||area_number.93||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.93||, ||.constdata||
                  CH376_ERR_NO_RESPONSE
000000  01                DCB      0x01

                          AREA ||area_number.94||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.94||, ||.constdata||
                  CH376_ERR_LONGFILENAME
000000  04                DCB      0x04

                          AREA ||area_number.95||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.95||, ||.constdata||
                  CH376_ATTR_READ_ONLY
000000  01                DCB      0x01

                          AREA ||area_number.96||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.96||, ||.constdata||
                  CH376_ATTR_HIDDEN
000000  02                DCB      0x02

                          AREA ||area_number.97||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.97||, ||.constdata||
                  CH376_ATTR_SYSTEM
000000  04                DCB      0x04

                          AREA ||area_number.98||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.98||, ||.constdata||
                  CH376_ATTR_VOLUME_ID
000000  08                DCB      0x08

                          AREA ||area_number.99||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.99||, ||.constdata||
                  CH376_ATTR_DIRECTORY
000000  10                DCB      0x10

                          AREA ||area_number.100||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.100||, ||.constdata||
                  CH376_ATTR_ARCHIVE
000000  20                DCB      0x20

                          AREA ||area_number.101||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.101||, ||.constdata||
                  rt_txt
000000  2e747874          DCB      0x2e,0x74,0x78,0x74
000004  3d202020          DCB      0x3d,0x20,0x20,0x20
000008  20202020          DCB      0x20,0x20,0x20,0x20
00000c  20202020          DCB      0x20,0x20,0x20,0x20
000010  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  _deviceAttached
000000  0000              DCB      0x00,0x00
                  stats
000002  0000              DCW      0x0000
                  brxfls
000004  0000              DCW      0x0000
                  ||ab||
000006  0000              DCW      0x0000

                          AREA ||area_number.103||, DATA, ALIGN=0

                          EXPORTAS ||area_number.103||, ||.data||
                  _controllerReady
000000  00                DCB      0x00

                          AREA ||area_number.104||, DATA, ALIGN=0

                          EXPORTAS ||area_number.104||, ||.data||
                  _streamLength
000000  00                DCB      0x00

                          AREA ||area_number.105||, DATA, ALIGN=0

                          EXPORTAS ||area_number.105||, ||.data||
                  _fileWrite
000000  00                DCB      0x00

                          AREA ||area_number.106||, DATA, ALIGN=0

                          EXPORTAS ||area_number.106||, ||.data||
                  _dirDepth
000000  00                DCB      0x00

                          AREA ||area_number.107||, DATA, ALIGN=0

                          EXPORTAS ||area_number.107||, ||.data||
                  _byteCounter
000000  00                DCB      0x00

                          AREA ||area_number.108||, DATA, ALIGN=0

                          EXPORTAS ||area_number.108||, ||.data||
                  _answer
000000  00                DCB      0x00

                          AREA ||area_number.109||, DATA, ALIGN=0

                          EXPORTAS ||area_number.109||, ||.data||
                  _driveSource
000000  00                DCB      0x00

                          AREA ||area_number.110||, DATA, ALIGN=0

                          EXPORTAS ||area_number.110||, ||.data||
                  _errorCode
000000  00                DCB      0x00

                          AREA ||area_number.111||, DATA, ALIGN=1

                          EXPORTAS ||area_number.111||, ||.data||
                  _sectorCounter
000000  0000              DCW      0x0000

                          AREA ||area_number.112||, DATA, ALIGN=0

                          EXPORTAS ||area_number.112||, ||.data||
                  _hwSerial
000000  00                DCB      0x00

                          AREA ||area_number.113||, DATA, ALIGN=0

                          EXPORTAS ||area_number.113||, ||.data||
                  _spiChipSelect
000000  00                DCB      0x00

                          AREA ||area_number.114||, DATA, ALIGN=0

                          EXPORTAS ||area_number.114||, ||.data||
                  _intPin
000000  00                DCB      0x00

                          AREA ||area_number.115||, DATA, ALIGN=2

                          EXPORTAS ||area_number.115||, ||.data||
                  _speed
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b35665b1____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_b35665b1____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b35665b1____REVSH|
#line 402
|__asm___6_main_c_b35665b1____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
